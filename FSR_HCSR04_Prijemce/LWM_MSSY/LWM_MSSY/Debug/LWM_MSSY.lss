
LWM_MSSY.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800200  00001c64  00001cf8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c64  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000180b  00800204  00800204  00001cfc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001cfc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000418  00000000  00000000  00001d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006207  00000000  00000000  00002184  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002c5f  00000000  00000000  0000838b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002623  00000000  00000000  0000afea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009d0  00000000  00000000  0000d610  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001eeb  00000000  00000000  0000dfe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000024be  00000000  00000000  0000fecb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000480  00000000  00000000  00012389  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	99 c0       	rjmp	.+306    	; 0x134 <__ctors_end>
       2:	00 00       	nop
       4:	b7 c0       	rjmp	.+366    	; 0x174 <__bad_interrupt>
       6:	00 00       	nop
       8:	b5 c0       	rjmp	.+362    	; 0x174 <__bad_interrupt>
       a:	00 00       	nop
       c:	b3 c0       	rjmp	.+358    	; 0x174 <__bad_interrupt>
       e:	00 00       	nop
      10:	b1 c0       	rjmp	.+354    	; 0x174 <__bad_interrupt>
      12:	00 00       	nop
      14:	af c0       	rjmp	.+350    	; 0x174 <__bad_interrupt>
      16:	00 00       	nop
      18:	ad c0       	rjmp	.+346    	; 0x174 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ab c0       	rjmp	.+342    	; 0x174 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a9 c0       	rjmp	.+338    	; 0x174 <__bad_interrupt>
      22:	00 00       	nop
      24:	a7 c0       	rjmp	.+334    	; 0x174 <__bad_interrupt>
      26:	00 00       	nop
      28:	a5 c0       	rjmp	.+330    	; 0x174 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a3 c0       	rjmp	.+326    	; 0x174 <__bad_interrupt>
      2e:	00 00       	nop
      30:	a1 c0       	rjmp	.+322    	; 0x174 <__bad_interrupt>
      32:	00 00       	nop
      34:	9e c1       	rjmp	.+828    	; 0x372 <__vector_13>
      36:	00 00       	nop
      38:	9d c0       	rjmp	.+314    	; 0x174 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9b c0       	rjmp	.+310    	; 0x174 <__bad_interrupt>
      3e:	00 00       	nop
      40:	99 c0       	rjmp	.+306    	; 0x174 <__bad_interrupt>
      42:	00 00       	nop
      44:	97 c0       	rjmp	.+302    	; 0x174 <__bad_interrupt>
      46:	00 00       	nop
      48:	95 c0       	rjmp	.+298    	; 0x174 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	93 c0       	rjmp	.+294    	; 0x174 <__bad_interrupt>
      4e:	00 00       	nop
      50:	91 c0       	rjmp	.+290    	; 0x174 <__bad_interrupt>
      52:	00 00       	nop
      54:	8f c0       	rjmp	.+286    	; 0x174 <__bad_interrupt>
      56:	00 00       	nop
      58:	8d c0       	rjmp	.+282    	; 0x174 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8b c0       	rjmp	.+278    	; 0x174 <__bad_interrupt>
      5e:	00 00       	nop
      60:	89 c0       	rjmp	.+274    	; 0x174 <__bad_interrupt>
      62:	00 00       	nop
      64:	87 c0       	rjmp	.+270    	; 0x174 <__bad_interrupt>
      66:	00 00       	nop
      68:	85 c0       	rjmp	.+266    	; 0x174 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	83 c0       	rjmp	.+262    	; 0x174 <__bad_interrupt>
      6e:	00 00       	nop
      70:	81 c0       	rjmp	.+258    	; 0x174 <__bad_interrupt>
      72:	00 00       	nop
      74:	7f c0       	rjmp	.+254    	; 0x174 <__bad_interrupt>
      76:	00 00       	nop
      78:	7d c0       	rjmp	.+250    	; 0x174 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7b c0       	rjmp	.+246    	; 0x174 <__bad_interrupt>
      7e:	00 00       	nop
      80:	79 c0       	rjmp	.+242    	; 0x174 <__bad_interrupt>
      82:	00 00       	nop
      84:	77 c0       	rjmp	.+238    	; 0x174 <__bad_interrupt>
      86:	00 00       	nop
      88:	75 c0       	rjmp	.+234    	; 0x174 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	73 c0       	rjmp	.+230    	; 0x174 <__bad_interrupt>
      8e:	00 00       	nop
      90:	3d c2       	rjmp	.+1146   	; 0x50c <__vector_36>
      92:	00 00       	nop
      94:	1f c2       	rjmp	.+1086   	; 0x4d4 <__vector_37>
      96:	00 00       	nop
      98:	6d c0       	rjmp	.+218    	; 0x174 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	6b c0       	rjmp	.+214    	; 0x174 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	69 c0       	rjmp	.+210    	; 0x174 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	67 c0       	rjmp	.+206    	; 0x174 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	53 c1       	rjmp	.+678    	; 0x350 <__vector_42>
      aa:	00 00       	nop
      ac:	63 c0       	rjmp	.+198    	; 0x174 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	61 c0       	rjmp	.+194    	; 0x174 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	5f c0       	rjmp	.+190    	; 0x174 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	5d c0       	rjmp	.+186    	; 0x174 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	5b c0       	rjmp	.+182    	; 0x174 <__bad_interrupt>
      be:	00 00       	nop
      c0:	59 c0       	rjmp	.+178    	; 0x174 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	57 c0       	rjmp	.+174    	; 0x174 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	55 c0       	rjmp	.+170    	; 0x174 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	53 c0       	rjmp	.+166    	; 0x174 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	51 c0       	rjmp	.+162    	; 0x174 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	4f c0       	rjmp	.+158    	; 0x174 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	4d c0       	rjmp	.+154    	; 0x174 <__bad_interrupt>
      da:	00 00       	nop
      dc:	4b c0       	rjmp	.+150    	; 0x174 <__bad_interrupt>
      de:	00 00       	nop
      e0:	49 c0       	rjmp	.+146    	; 0x174 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	47 c0       	rjmp	.+142    	; 0x174 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	45 c0       	rjmp	.+138    	; 0x174 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	43 c0       	rjmp	.+134    	; 0x174 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	41 c0       	rjmp	.+130    	; 0x174 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	3f c0       	rjmp	.+126    	; 0x174 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	3d c0       	rjmp	.+122    	; 0x174 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	3b c0       	rjmp	.+118    	; 0x174 <__bad_interrupt>
      fe:	00 00       	nop
     100:	39 c0       	rjmp	.+114    	; 0x174 <__bad_interrupt>
     102:	00 00       	nop
     104:	37 c0       	rjmp	.+110    	; 0x174 <__bad_interrupt>
     106:	00 00       	nop
     108:	35 c0       	rjmp	.+106    	; 0x174 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	33 c0       	rjmp	.+102    	; 0x174 <__bad_interrupt>
     10e:	00 00       	nop
     110:	31 c0       	rjmp	.+98     	; 0x174 <__bad_interrupt>
     112:	00 00       	nop
     114:	2f c0       	rjmp	.+94     	; 0x174 <__bad_interrupt>
     116:	00 00       	nop
     118:	2d c0       	rjmp	.+90     	; 0x174 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	2b c0       	rjmp	.+86     	; 0x174 <__bad_interrupt>
     11e:	00 00       	nop
     120:	29 c0       	rjmp	.+82     	; 0x174 <__bad_interrupt>
     122:	00 00       	nop
     124:	27 c0       	rjmp	.+78     	; 0x174 <__bad_interrupt>
     126:	00 00       	nop
     128:	25 c0       	rjmp	.+74     	; 0x174 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	23 c0       	rjmp	.+70     	; 0x174 <__bad_interrupt>
     12e:	00 00       	nop
     130:	21 c0       	rjmp	.+66     	; 0x174 <__bad_interrupt>
	...

00000134 <__ctors_end>:
     134:	11 24       	eor	r1, r1
     136:	1f be       	out	0x3f, r1	; 63
     138:	cf ef       	ldi	r28, 0xFF	; 255
     13a:	d1 e8       	ldi	r29, 0x81	; 129
     13c:	de bf       	out	0x3e, r29	; 62
     13e:	cd bf       	out	0x3d, r28	; 61
     140:	00 e0       	ldi	r16, 0x00	; 0
     142:	0c bf       	out	0x3c, r16	; 60

00000144 <__do_copy_data>:
     144:	12 e0       	ldi	r17, 0x02	; 2
     146:	a0 e0       	ldi	r26, 0x00	; 0
     148:	b2 e0       	ldi	r27, 0x02	; 2
     14a:	e4 e6       	ldi	r30, 0x64	; 100
     14c:	fc e1       	ldi	r31, 0x1C	; 28
     14e:	00 e0       	ldi	r16, 0x00	; 0
     150:	0b bf       	out	0x3b, r16	; 59
     152:	02 c0       	rjmp	.+4      	; 0x158 <__do_copy_data+0x14>
     154:	07 90       	elpm	r0, Z+
     156:	0d 92       	st	X+, r0
     158:	a4 30       	cpi	r26, 0x04	; 4
     15a:	b1 07       	cpc	r27, r17
     15c:	d9 f7       	brne	.-10     	; 0x154 <__do_copy_data+0x10>

0000015e <__do_clear_bss>:
     15e:	2a e1       	ldi	r18, 0x1A	; 26
     160:	a4 e0       	ldi	r26, 0x04	; 4
     162:	b2 e0       	ldi	r27, 0x02	; 2
     164:	01 c0       	rjmp	.+2      	; 0x168 <.do_clear_bss_start>

00000166 <.do_clear_bss_loop>:
     166:	1d 92       	st	X+, r1

00000168 <.do_clear_bss_start>:
     168:	af 30       	cpi	r26, 0x0F	; 15
     16a:	b2 07       	cpc	r27, r18
     16c:	e1 f7       	brne	.-8      	; 0x166 <.do_clear_bss_loop>
     16e:	83 d0       	rcall	.+262    	; 0x276 <main>
     170:	0c 94 30 0e 	jmp	0x1c60	; 0x1c60 <_exit>

00000174 <__bad_interrupt>:
     174:	45 cf       	rjmp	.-374    	; 0x0 <__vectors>

00000176 <appDataConf>:

/*************************************************************************//**
*****************************************************************************/
static void appDataConf(NWK_DataReq_t *req)
{
appDataReqBusy = false;
     176:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <appDataReqBusy>
     17a:	08 95       	ret

0000017c <appSendData>:
}

/*************************************************************************//**
*****************************************************************************/
static void appSendData(void)
{
     17c:	cf 93       	push	r28
     17e:	df 93       	push	r29
if (appDataReqBusy || 0 == appUartBufferPtr)
     180:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <appDataReqBusy>
     184:	81 11       	cpse	r24, r1
     186:	26 c0       	rjmp	.+76     	; 0x1d4 <appSendData+0x58>
     188:	c0 91 04 02 	lds	r28, 0x0204	; 0x800204 <__data_end>
     18c:	cc 23       	and	r28, r28
     18e:	11 f1       	breq	.+68     	; 0x1d4 <appSendData+0x58>
return;

memcpy(appDataReqBuffer, appUartBuffer, appUartBufferPtr);
     190:	4c 2f       	mov	r20, r28
     192:	50 e0       	ldi	r21, 0x00	; 0
     194:	65 e0       	ldi	r22, 0x05	; 5
     196:	72 e0       	ldi	r23, 0x02	; 2
     198:	82 e7       	ldi	r24, 0x72	; 114
     19a:	92 e0       	ldi	r25, 0x02	; 2
     19c:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <memcpy>

appDataReq.dstAddr = 1-APP_ADDR;
     1a0:	e0 ee       	ldi	r30, 0xE0	; 224
     1a2:	f2 e0       	ldi	r31, 0x02	; 2
     1a4:	81 e0       	ldi	r24, 0x01	; 1
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	96 83       	std	Z+6, r25	; 0x06
     1aa:	85 83       	std	Z+5, r24	; 0x05
appDataReq.dstEndpoint = APP_ENDPOINT;
     1ac:	d1 e0       	ldi	r29, 0x01	; 1
     1ae:	d7 83       	std	Z+7, r29	; 0x07
appDataReq.srcEndpoint = APP_ENDPOINT;
     1b0:	d0 87       	std	Z+8, r29	; 0x08
appDataReq.options = NWK_OPT_ENABLE_SECURITY;
     1b2:	82 e0       	ldi	r24, 0x02	; 2
     1b4:	81 87       	std	Z+9, r24	; 0x09
appDataReq.data = appDataReqBuffer;
     1b6:	82 e7       	ldi	r24, 0x72	; 114
     1b8:	92 e0       	ldi	r25, 0x02	; 2
     1ba:	93 87       	std	Z+11, r25	; 0x0b
     1bc:	82 87       	std	Z+10, r24	; 0x0a
appDataReq.size = appUartBufferPtr;
     1be:	c4 87       	std	Z+12, r28	; 0x0c
appDataReq.confirm = appDataConf;
     1c0:	8b eb       	ldi	r24, 0xBB	; 187
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	96 87       	std	Z+14, r25	; 0x0e
     1c6:	85 87       	std	Z+13, r24	; 0x0d
NWK_DataReq(&appDataReq);
     1c8:	cf 01       	movw	r24, r30
     1ca:	94 d2       	rcall	.+1320   	; 0x6f4 <NWK_DataReq>

appUartBufferPtr = 0;
     1cc:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <__data_end>
appDataReqBusy = true;
     1d0:	d0 93 df 02 	sts	0x02DF, r29	; 0x8002df <appDataReqBusy>
}
     1d4:	df 91       	pop	r29
     1d6:	cf 91       	pop	r28
     1d8:	08 95       	ret

000001da <appTimerHandler>:

/*************************************************************************//**
*****************************************************************************/
static void appTimerHandler(SYS_Timer_t *timer)
{
appSendData();
     1da:	d0 cf       	rjmp	.-96     	; 0x17c <appSendData>
     1dc:	08 95       	ret

000001de <appDataInd>:
}

/*************************************************************************//**
*****************************************************************************/
static bool appDataInd(NWK_DataInd_t *ind)
{
     1de:	0f 93       	push	r16
     1e0:	1f 93       	push	r17
     1e2:	cf 93       	push	r28
for (uint8_t i = 0; i < ind->size; i++)
     1e4:	dc 01       	movw	r26, r24
     1e6:	19 96       	adiw	r26, 0x09	; 9
     1e8:	2c 91       	ld	r18, X
     1ea:	22 23       	and	r18, r18
     1ec:	81 f0       	breq	.+32     	; 0x20e <appDataInd+0x30>
     1ee:	8c 01       	movw	r16, r24
     1f0:	c0 e0       	ldi	r28, 0x00	; 0
HAL_UartWriteByte(ind->data[i]);
     1f2:	d8 01       	movw	r26, r16
     1f4:	17 96       	adiw	r26, 0x07	; 7
     1f6:	ed 91       	ld	r30, X+
     1f8:	fc 91       	ld	r31, X
     1fa:	18 97       	sbiw	r26, 0x08	; 8
     1fc:	ec 0f       	add	r30, r28
     1fe:	f1 1d       	adc	r31, r1
     200:	80 81       	ld	r24, Z
     202:	1b d1       	rcall	.+566    	; 0x43a <HAL_UartWriteByte>

/*************************************************************************//**
*****************************************************************************/
static bool appDataInd(NWK_DataInd_t *ind)
{
for (uint8_t i = 0; i < ind->size; i++)
     204:	cf 5f       	subi	r28, 0xFF	; 255
     206:	f8 01       	movw	r30, r16
     208:	81 85       	ldd	r24, Z+9	; 0x09
     20a:	c8 17       	cp	r28, r24
     20c:	90 f3       	brcs	.-28     	; 0x1f2 <appDataInd+0x14>
HAL_UartWriteByte(ind->data[i]);
return true;
}
     20e:	81 e0       	ldi	r24, 0x01	; 1
     210:	cf 91       	pop	r28
     212:	1f 91       	pop	r17
     214:	0f 91       	pop	r16
     216:	08 95       	ret

00000218 <HAL_UartBytesReceived>:
}

/*************************************************************************//**
*****************************************************************************/
void HAL_UartBytesReceived(uint16_t bytes)
{
     218:	ff 92       	push	r15
     21a:	0f 93       	push	r16
     21c:	1f 93       	push	r17
     21e:	cf 93       	push	r28
     220:	df 93       	push	r29
     222:	8c 01       	movw	r16, r24
for (uint16_t i = 0; i < bytes; i++)
     224:	89 2b       	or	r24, r25
     226:	c9 f0       	breq	.+50     	; 0x25a <HAL_UartBytesReceived+0x42>
     228:	c0 e0       	ldi	r28, 0x00	; 0
     22a:	d0 e0       	ldi	r29, 0x00	; 0
{
uint8_t byte = HAL_UartReadByte();
     22c:	2d d1       	rcall	.+602    	; 0x488 <HAL_UartReadByte>
     22e:	f8 2e       	mov	r15, r24

if (appUartBufferPtr == sizeof(appUartBuffer))
     230:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <__data_end>
     234:	8d 36       	cpi	r24, 0x6D	; 109
appSendData();
     236:	09 f4       	brne	.+2      	; 0x23a <HAL_UartBytesReceived+0x22>
     238:	a1 df       	rcall	.-190    	; 0x17c <appSendData>

if (appUartBufferPtr < sizeof(appUartBuffer))
     23a:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <__data_end>
     23e:	ed 36       	cpi	r30, 0x6D	; 109
     240:	40 f4       	brcc	.+16     	; 0x252 <HAL_UartBytesReceived+0x3a>
appUartBuffer[appUartBufferPtr++] = byte;
     242:	81 e0       	ldi	r24, 0x01	; 1
     244:	8e 0f       	add	r24, r30
     246:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <__data_end>
     24a:	f0 e0       	ldi	r31, 0x00	; 0
     24c:	eb 5f       	subi	r30, 0xFB	; 251
     24e:	fd 4f       	sbci	r31, 0xFD	; 253
     250:	f0 82       	st	Z, r15

/*************************************************************************//**
*****************************************************************************/
void HAL_UartBytesReceived(uint16_t bytes)
{
for (uint16_t i = 0; i < bytes; i++)
     252:	21 96       	adiw	r28, 0x01	; 1
     254:	0c 17       	cp	r16, r28
     256:	1d 07       	cpc	r17, r29
     258:	49 f7       	brne	.-46     	; 0x22c <HAL_UartBytesReceived+0x14>

if (appUartBufferPtr < sizeof(appUartBuffer))
appUartBuffer[appUartBufferPtr++] = byte;
}

SYS_TimerStop(&appTimer);
     25a:	81 ef       	ldi	r24, 0xF1	; 241
     25c:	92 e0       	ldi	r25, 0x02	; 2
     25e:	0e 94 a8 0c 	call	0x1950	; 0x1950 <SYS_TimerStop>
SYS_TimerStart(&appTimer);
     262:	81 ef       	ldi	r24, 0xF1	; 241
     264:	92 e0       	ldi	r25, 0x02	; 2
     266:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <SYS_TimerStart>
}
     26a:	df 91       	pop	r29
     26c:	cf 91       	pop	r28
     26e:	1f 91       	pop	r17
     270:	0f 91       	pop	r16
     272:	ff 90       	pop	r15
     274:	08 95       	ret

00000276 <main>:

/*************************************************************************//**
*****************************************************************************/
int main(void)
{
SYS_Init();
     276:	0e 94 33 0c 	call	0x1866	; 0x1866 <SYS_Init>
HAL_UartInit(38400);
     27a:	60 e0       	ldi	r22, 0x00	; 0
     27c:	76 e9       	ldi	r23, 0x96	; 150
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	86 d0       	rcall	.+268    	; 0x390 <HAL_UartInit>
HAL_UartWriteByte('P');
     284:	80 e5       	ldi	r24, 0x50	; 80
     286:	d9 d0       	rcall	.+434    	; 0x43a <HAL_UartWriteByte>
HAL_UartWriteByte('R');
     288:	82 e5       	ldi	r24, 0x52	; 82
     28a:	d7 d0       	rcall	.+430    	; 0x43a <HAL_UartWriteByte>
HAL_UartWriteByte('I');
     28c:	89 e4       	ldi	r24, 0x49	; 73
     28e:	d5 d0       	rcall	.+426    	; 0x43a <HAL_UartWriteByte>
HAL_UartWriteByte('J');
     290:	8a e4       	ldi	r24, 0x4A	; 74
     292:	d3 d0       	rcall	.+422    	; 0x43a <HAL_UartWriteByte>
HAL_UartWriteByte('I');
     294:	89 e4       	ldi	r24, 0x49	; 73
     296:	d1 d0       	rcall	.+418    	; 0x43a <HAL_UartWriteByte>
HAL_UartWriteByte('M');
     298:	8d e4       	ldi	r24, 0x4D	; 77
     29a:	cf d0       	rcall	.+414    	; 0x43a <HAL_UartWriteByte>
     29c:	81 e4       	ldi	r24, 0x41	; 65
HAL_UartWriteByte('A');
     29e:	cd d0       	rcall	.+410    	; 0x43a <HAL_UartWriteByte>
     2a0:	83 e4       	ldi	r24, 0x43	; 67
     2a2:	cb d0       	rcall	.+406    	; 0x43a <HAL_UartWriteByte>
HAL_UartWriteByte('C');
     2a4:	c1 ef       	ldi	r28, 0xF1	; 241
     2a6:	d2 e0       	ldi	r29, 0x02	; 2
     2a8:	0f 2e       	mov	r0, r31

NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);

HAL_BoardInit();

appTimer.interval = APP_FLUSH_TIMER_INTERVAL;
     2aa:	f4 e1       	ldi	r31, 0x14	; 20
     2ac:	cf 2e       	mov	r12, r31
     2ae:	d1 2c       	mov	r13, r1
     2b0:	e1 2c       	mov	r14, r1
     2b2:	f1 2c       	mov	r15, r1
     2b4:	f0 2d       	mov	r31, r0
     2b6:	0d ee       	ldi	r16, 0xED	; 237
     2b8:	10 e0       	ldi	r17, 0x00	; 0
appTimer.mode = SYS_TIMER_INTERVAL_MODE;
appTimer.handler = appTimerHandler;
     2ba:	0e 94 3a 0c 	call	0x1874	; 0x1874 <SYS_TaskHandler>
HAL_UartWriteByte('A');
HAL_UartWriteByte('C');

while (1)
{
SYS_TaskHandler();
     2be:	7d d1       	rcall	.+762    	; 0x5ba <HAL_UartTaskHandler>
HAL_UartTaskHandler();
     2c0:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <appState>

/*************************************************************************//**
*****************************************************************************/
static void APP_TaskHandler(void)
{
switch (appState)
     2c4:	81 11       	cpse	r24, r1
     2c6:	f9 cf       	rjmp	.-14     	; 0x2ba <main+0x44>
     2c8:	80 e0       	ldi	r24, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
static void appInit(void)
{
NWK_SetAddr(APP_ADDR);
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	d0 d1       	rcall	.+928    	; 0x66e <NWK_SetAddr>
     2ce:	80 e8       	ldi	r24, 0x80	; 128
     2d0:	90 e0       	ldi	r25, 0x00	; 0
NWK_SetPanId(APP_PANID);
     2d2:	d4 d1       	rcall	.+936    	; 0x67c <NWK_SetPanId>
     2d4:	8f e0       	ldi	r24, 0x0F	; 15
     2d6:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <PHY_SetChannel>
PHY_SetChannel(APP_CHANNEL);
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <PHY_SetRxState>
#ifdef PHY_AT86RF212
PHY_SetBand(APP_BAND);
PHY_SetModulation(APP_MODULATION);
#endif
PHY_SetRxState(true);
     2e0:	6f ee       	ldi	r22, 0xEF	; 239
     2e2:	70 e0       	ldi	r23, 0x00	; 0

NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);
     2e4:	81 e0       	ldi	r24, 0x01	; 1
     2e6:	d1 d1       	rcall	.+930    	; 0x68a <NWK_OpenEndpoint>
     2e8:	ce 82       	std	Y+6, r12	; 0x06
     2ea:	df 82       	std	Y+7, r13	; 0x07
     2ec:	e8 86       	std	Y+8, r14	; 0x08

HAL_BoardInit();

appTimer.interval = APP_FLUSH_TIMER_INTERVAL;
     2ee:	f9 86       	std	Y+9, r15	; 0x09
     2f0:	1a 86       	std	Y+10, r1	; 0x0a
     2f2:	1c 87       	std	Y+12, r17	; 0x0c
     2f4:	0b 87       	std	Y+11, r16	; 0x0b
appTimer.mode = SYS_TIMER_INTERVAL_MODE;
     2f6:	81 e0       	ldi	r24, 0x01	; 1
appTimer.handler = appTimerHandler;
     2f8:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <appState>
switch (appState)
{
case APP_STATE_INITIAL:
{
appInit();
appState = APP_STATE_IDLE;
     2fc:	de cf       	rjmp	.-68     	; 0x2ba <main+0x44>

000002fe <HAL_Init>:

/*************************************************************************//**
*****************************************************************************/
void HAL_Init(void)
{
  MCUSR = 0;
     2fe:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     300:	0f b6       	in	r0, 0x3f	; 63
     302:	f8 94       	cli
     304:	a8 95       	wdr
     306:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     30a:	88 61       	ori	r24, 0x18	; 24
     30c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     310:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     314:	0f be       	out	0x3f, r0	; 63
  wdt_disable();

  CLKPR = 1 << CLKPCE;
     316:	e1 e6       	ldi	r30, 0x61	; 97
     318:	f0 e0       	ldi	r31, 0x00	; 0
     31a:	80 e8       	ldi	r24, 0x80	; 128
     31c:	80 83       	st	Z, r24
  CLKPR = 0;
     31e:	10 82       	st	Z, r1

  SYS_EnableInterrupts();
     320:	78 94       	sei

  HAL_TimerInit();
     322:	01 c0       	rjmp	.+2      	; 0x326 <HAL_TimerInit>
     324:	08 95       	ret

00000326 <HAL_TimerInit>:

  TIFR4 = (1 << OCF4B);
  while (0 == (TIFR4 & (1 << OCF4B)));

  PRAGMA(diag_default=Pa082);
}
     326:	10 92 e6 19 	sts	0x19E6, r1	; 0x8019e6 <halTimerIrqCount>
     32a:	80 e1       	ldi	r24, 0x10	; 16
     32c:	97 e2       	ldi	r25, 0x27	; 39
     32e:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
     332:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
     336:	e1 ea       	ldi	r30, 0xA1	; 161
     338:	f0 e0       	ldi	r31, 0x00	; 0
     33a:	88 e0       	ldi	r24, 0x08	; 8
     33c:	80 83       	st	Z, r24
     33e:	80 81       	ld	r24, Z
     340:	82 60       	ori	r24, 0x02	; 2
     342:	80 83       	st	Z, r24
     344:	e2 e7       	ldi	r30, 0x72	; 114
     346:	f0 e0       	ldi	r31, 0x00	; 0
     348:	80 81       	ld	r24, Z
     34a:	82 60       	ori	r24, 0x02	; 2
     34c:	80 83       	st	Z, r24
     34e:	08 95       	ret

00000350 <__vector_42>:

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER4_COMPA_vect)
{
     350:	1f 92       	push	r1
     352:	0f 92       	push	r0
     354:	0f b6       	in	r0, 0x3f	; 63
     356:	0f 92       	push	r0
     358:	11 24       	eor	r1, r1
     35a:	8f 93       	push	r24
  halTimerIrqCount++;
     35c:	80 91 e6 19 	lds	r24, 0x19E6	; 0x8019e6 <halTimerIrqCount>
     360:	8f 5f       	subi	r24, 0xFF	; 255
     362:	80 93 e6 19 	sts	0x19E6, r24	; 0x8019e6 <halTimerIrqCount>
}
     366:	8f 91       	pop	r24
     368:	0f 90       	pop	r0
     36a:	0f be       	out	0x3f, r0	; 63
     36c:	0f 90       	pop	r0
     36e:	1f 90       	pop	r1
     370:	18 95       	reti

00000372 <__vector_13>:
}

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER2_COMPA_vect)
{
     372:	1f 92       	push	r1
     374:	0f 92       	push	r0
     376:	0f b6       	in	r0, 0x3f	; 63
     378:	0f 92       	push	r0
     37a:	11 24       	eor	r1, r1
     37c:	8f 93       	push	r24
  halSleepTimerEvent = true;
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <halSleepTimerEvent>
}
     384:	8f 91       	pop	r24
     386:	0f 90       	pop	r0
     388:	0f be       	out	0x3f, r0	; 63
     38a:	0f 90       	pop	r0
     38c:	1f 90       	pop	r1
     38e:	18 95       	reti

00000390 <HAL_UartInit>:

/*************************************************************************//**
*****************************************************************************/
void HAL_UartInit(uint32_t baudrate)
{
  uint32_t brr = ((uint32_t)F_CPU * 2) / (16 * baudrate) - 1;
     390:	dc 01       	movw	r26, r24
     392:	cb 01       	movw	r24, r22
     394:	88 0f       	add	r24, r24
     396:	99 1f       	adc	r25, r25
     398:	aa 1f       	adc	r26, r26
     39a:	bb 1f       	adc	r27, r27
     39c:	88 0f       	add	r24, r24
     39e:	99 1f       	adc	r25, r25
     3a0:	aa 1f       	adc	r26, r26
     3a2:	bb 1f       	adc	r27, r27
     3a4:	9c 01       	movw	r18, r24
     3a6:	ad 01       	movw	r20, r26
     3a8:	22 0f       	add	r18, r18
     3aa:	33 1f       	adc	r19, r19
     3ac:	44 1f       	adc	r20, r20
     3ae:	55 1f       	adc	r21, r21
     3b0:	22 0f       	add	r18, r18
     3b2:	33 1f       	adc	r19, r19
     3b4:	44 1f       	adc	r20, r20
     3b6:	55 1f       	adc	r21, r21
     3b8:	60 e0       	ldi	r22, 0x00	; 0
     3ba:	74 e2       	ldi	r23, 0x24	; 36
     3bc:	84 ef       	ldi	r24, 0xF4	; 244
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	0e 94 75 0d 	call	0x1aea	; 0x1aea <__udivmodsi4>
     3c4:	ba 01       	movw	r22, r20
     3c6:	a9 01       	movw	r20, r18
     3c8:	41 50       	subi	r20, 0x01	; 1
     3ca:	51 09       	sbc	r21, r1
     3cc:	61 09       	sbc	r22, r1
     3ce:	71 09       	sbc	r23, r1

  UBRRxH = (brr >> 8) & 0xff;
     3d0:	bb 27       	eor	r27, r27
     3d2:	a7 2f       	mov	r26, r23
     3d4:	96 2f       	mov	r25, r22
     3d6:	85 2f       	mov	r24, r21
     3d8:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
  UBRRxL = (brr & 0xff);
     3dc:	40 93 cc 00 	sts	0x00CC, r20	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
  UCSRxA = (1 << U2X1);
     3e0:	82 e0       	ldi	r24, 0x02	; 2
     3e2:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
  UCSRxB = (1 << TXEN1) | (1 << RXEN1) | (1 << RXCIE1);
     3e6:	88 e9       	ldi	r24, 0x98	; 152
     3e8:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>
  UCSRxC = (3 << UCSZ10);
     3ec:	86 e0       	ldi	r24, 0x06	; 6
     3ee:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7c00ca>

  txFifo.data = txData;
     3f2:	ee e2       	ldi	r30, 0x2E	; 46
     3f4:	f6 e0       	ldi	r31, 0x06	; 6
     3f6:	8d e9       	ldi	r24, 0x9D	; 157
     3f8:	94 e0       	ldi	r25, 0x04	; 4
     3fa:	91 87       	std	Z+9, r25	; 0x09
     3fc:	80 87       	std	Z+8, r24	; 0x08
  txFifo.size = HAL_UART_TX_FIFO_SIZE;
     3fe:	80 e9       	ldi	r24, 0x90	; 144
     400:	91 e0       	ldi	r25, 0x01	; 1
     402:	95 83       	std	Z+5, r25	; 0x05
     404:	84 83       	std	Z+4, r24	; 0x04
  txFifo.bytes = 0;
     406:	17 82       	std	Z+7, r1	; 0x07
     408:	16 82       	std	Z+6, r1	; 0x06
  txFifo.head = 0;
     40a:	11 82       	std	Z+1, r1	; 0x01
     40c:	10 82       	st	Z, r1
  txFifo.tail = 0;
     40e:	13 82       	std	Z+3, r1	; 0x03
     410:	12 82       	std	Z+2, r1	; 0x02

  rxFifo.data = rxData;
     412:	e3 e9       	ldi	r30, 0x93	; 147
     414:	f4 e0       	ldi	r31, 0x04	; 4
     416:	22 e0       	ldi	r18, 0x02	; 2
     418:	33 e0       	ldi	r19, 0x03	; 3
     41a:	31 87       	std	Z+9, r19	; 0x09
     41c:	20 87       	std	Z+8, r18	; 0x08
  rxFifo.size = HAL_UART_RX_FIFO_SIZE;
     41e:	95 83       	std	Z+5, r25	; 0x05
     420:	84 83       	std	Z+4, r24	; 0x04
  rxFifo.bytes = 0;
     422:	17 82       	std	Z+7, r1	; 0x07
     424:	16 82       	std	Z+6, r1	; 0x06
  rxFifo.head = 0;
     426:	11 82       	std	Z+1, r1	; 0x01
     428:	10 82       	st	Z, r1
  rxFifo.tail = 0;
     42a:	13 82       	std	Z+3, r1	; 0x03
     42c:	12 82       	std	Z+2, r1	; 0x02

  udrEmpty = true;
     42e:	81 e0       	ldi	r24, 0x01	; 1
     430:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <udrEmpty>
  newData = false;
     434:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <newData>
     438:	08 95       	ret

0000043a <HAL_UartWriteByte>:
}

/*************************************************************************//**
*****************************************************************************/
void HAL_UartWriteByte(uint8_t byte)
{
     43a:	cf 93       	push	r28
     43c:	df 93       	push	r29
  if (txFifo.bytes == txFifo.size)
     43e:	ee e2       	ldi	r30, 0x2E	; 46
     440:	f6 e0       	ldi	r31, 0x06	; 6
     442:	26 81       	ldd	r18, Z+6	; 0x06
     444:	37 81       	ldd	r19, Z+7	; 0x07
     446:	64 81       	ldd	r22, Z+4	; 0x04
     448:	75 81       	ldd	r23, Z+5	; 0x05
     44a:	26 17       	cp	r18, r22
     44c:	37 07       	cpc	r19, r23
     44e:	c9 f0       	breq	.+50     	; 0x482 <HAL_UartWriteByte+0x48>
    return;

  txFifo.data[txFifo.tail++] = byte;
     450:	c0 85       	ldd	r28, Z+8	; 0x08
     452:	d1 85       	ldd	r29, Z+9	; 0x09
     454:	42 81       	ldd	r20, Z+2	; 0x02
     456:	53 81       	ldd	r21, Z+3	; 0x03
     458:	da 01       	movw	r26, r20
     45a:	11 96       	adiw	r26, 0x01	; 1
     45c:	b3 83       	std	Z+3, r27	; 0x03
     45e:	a2 83       	std	Z+2, r26	; 0x02
     460:	fe 01       	movw	r30, r28
     462:	e4 0f       	add	r30, r20
     464:	f5 1f       	adc	r31, r21
     466:	80 83       	st	Z, r24
  if (txFifo.tail == txFifo.size)
     468:	6a 17       	cp	r22, r26
     46a:	7b 07       	cpc	r23, r27
     46c:	21 f4       	brne	.+8      	; 0x476 <HAL_UartWriteByte+0x3c>
    txFifo.tail = 0;
     46e:	10 92 31 06 	sts	0x0631, r1	; 0x800631 <txFifo+0x3>
     472:	10 92 30 06 	sts	0x0630, r1	; 0x800630 <txFifo+0x2>
  txFifo.bytes++;
     476:	2f 5f       	subi	r18, 0xFF	; 255
     478:	3f 4f       	sbci	r19, 0xFF	; 255
     47a:	30 93 35 06 	sts	0x0635, r19	; 0x800635 <txFifo+0x7>
     47e:	20 93 34 06 	sts	0x0634, r18	; 0x800634 <txFifo+0x6>
}
     482:	df 91       	pop	r29
     484:	cf 91       	pop	r28
     486:	08 95       	ret

00000488 <HAL_UartReadByte>:
uint8_t HAL_UartReadByte(void)
{
  uint8_t byte;

  PRAGMA(diag_suppress=Pa082);
  ATOMIC_SECTION_ENTER
     488:	4f b7       	in	r20, 0x3f	; 63
     48a:	f8 94       	cli
    byte = rxFifo.data[rxFifo.head++];
     48c:	e3 e9       	ldi	r30, 0x93	; 147
     48e:	f4 e0       	ldi	r31, 0x04	; 4
     490:	20 85       	ldd	r18, Z+8	; 0x08
     492:	31 85       	ldd	r19, Z+9	; 0x09
     494:	80 81       	ld	r24, Z
     496:	91 81       	ldd	r25, Z+1	; 0x01
     498:	bc 01       	movw	r22, r24
     49a:	6f 5f       	subi	r22, 0xFF	; 255
     49c:	7f 4f       	sbci	r23, 0xFF	; 255
     49e:	71 83       	std	Z+1, r23	; 0x01
     4a0:	60 83       	st	Z, r22
     4a2:	d9 01       	movw	r26, r18
     4a4:	a8 0f       	add	r26, r24
     4a6:	b9 1f       	adc	r27, r25
     4a8:	8c 91       	ld	r24, X
    if (rxFifo.head == rxFifo.size)
     4aa:	60 81       	ld	r22, Z
     4ac:	71 81       	ldd	r23, Z+1	; 0x01
     4ae:	24 81       	ldd	r18, Z+4	; 0x04
     4b0:	35 81       	ldd	r19, Z+5	; 0x05
     4b2:	62 17       	cp	r22, r18
     4b4:	73 07       	cpc	r23, r19
     4b6:	21 f4       	brne	.+8      	; 0x4c0 <HAL_UartReadByte+0x38>
      rxFifo.head = 0;
     4b8:	10 92 94 04 	sts	0x0494, r1	; 0x800494 <rxFifo+0x1>
     4bc:	10 92 93 04 	sts	0x0493, r1	; 0x800493 <rxFifo>
    rxFifo.bytes--;
     4c0:	e3 e9       	ldi	r30, 0x93	; 147
     4c2:	f4 e0       	ldi	r31, 0x04	; 4
     4c4:	26 81       	ldd	r18, Z+6	; 0x06
     4c6:	37 81       	ldd	r19, Z+7	; 0x07
     4c8:	21 50       	subi	r18, 0x01	; 1
     4ca:	31 09       	sbc	r19, r1
     4cc:	37 83       	std	Z+7, r19	; 0x07
     4ce:	26 83       	std	Z+6, r18	; 0x06
  ATOMIC_SECTION_LEAVE
     4d0:	4f bf       	out	0x3f, r20	; 63
  PRAGMA(diag_default=Pa082);

  return byte;
}
     4d2:	08 95       	ret

000004d4 <__vector_37>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_UDRE_vect)
{
     4d4:	1f 92       	push	r1
     4d6:	0f 92       	push	r0
     4d8:	0f b6       	in	r0, 0x3f	; 63
     4da:	0f 92       	push	r0
     4dc:	11 24       	eor	r1, r1
     4de:	0b b6       	in	r0, 0x3b	; 59
     4e0:	0f 92       	push	r0
     4e2:	8f 93       	push	r24
     4e4:	ef 93       	push	r30
     4e6:	ff 93       	push	r31
  udrEmpty = true;
     4e8:	81 e0       	ldi	r24, 0x01	; 1
     4ea:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <udrEmpty>
  UCSRxB &= ~(1 << UDRIE1);
     4ee:	e9 ec       	ldi	r30, 0xC9	; 201
     4f0:	f0 e0       	ldi	r31, 0x00	; 0
     4f2:	80 81       	ld	r24, Z
     4f4:	8f 7d       	andi	r24, 0xDF	; 223
     4f6:	80 83       	st	Z, r24
}
     4f8:	ff 91       	pop	r31
     4fa:	ef 91       	pop	r30
     4fc:	8f 91       	pop	r24
     4fe:	0f 90       	pop	r0
     500:	0b be       	out	0x3b, r0	; 59
     502:	0f 90       	pop	r0
     504:	0f be       	out	0x3f, r0	; 63
     506:	0f 90       	pop	r0
     508:	1f 90       	pop	r1
     50a:	18 95       	reti

0000050c <__vector_36>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_RX_vect)
{
     50c:	1f 92       	push	r1
     50e:	0f 92       	push	r0
     510:	0f b6       	in	r0, 0x3f	; 63
     512:	0f 92       	push	r0
     514:	11 24       	eor	r1, r1
     516:	0b b6       	in	r0, 0x3b	; 59
     518:	0f 92       	push	r0
     51a:	2f 93       	push	r18
     51c:	3f 93       	push	r19
     51e:	4f 93       	push	r20
     520:	5f 93       	push	r21
     522:	6f 93       	push	r22
     524:	7f 93       	push	r23
     526:	8f 93       	push	r24
     528:	9f 93       	push	r25
     52a:	af 93       	push	r26
     52c:	bf 93       	push	r27
     52e:	ef 93       	push	r30
     530:	ff 93       	push	r31
  PRAGMA(diag_suppress=Pa082);

  uint8_t status = UCSRxA;
     532:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
  uint8_t byte = UDRx;
     536:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>

  if (0 == (status & ((1 << FE1) | (1 << DOR1) | (1 << UPE1))))
     53a:	8c 71       	andi	r24, 0x1C	; 28
     53c:	59 f5       	brne	.+86     	; 0x594 <__vector_36+0x88>
  {
    if (rxFifo.bytes == rxFifo.size)
     53e:	e3 e9       	ldi	r30, 0x93	; 147
     540:	f4 e0       	ldi	r31, 0x04	; 4
     542:	46 81       	ldd	r20, Z+6	; 0x06
     544:	57 81       	ldd	r21, Z+7	; 0x07
     546:	84 81       	ldd	r24, Z+4	; 0x04
     548:	95 81       	ldd	r25, Z+5	; 0x05
     54a:	48 17       	cp	r20, r24
     54c:	59 07       	cpc	r21, r25
     54e:	11 f1       	breq	.+68     	; 0x594 <__vector_36+0x88>
      return;

    rxFifo.data[rxFifo.tail++] = byte;
     550:	40 85       	ldd	r20, Z+8	; 0x08
     552:	51 85       	ldd	r21, Z+9	; 0x09
     554:	82 81       	ldd	r24, Z+2	; 0x02
     556:	93 81       	ldd	r25, Z+3	; 0x03
     558:	bc 01       	movw	r22, r24
     55a:	6f 5f       	subi	r22, 0xFF	; 255
     55c:	7f 4f       	sbci	r23, 0xFF	; 255
     55e:	73 83       	std	Z+3, r23	; 0x03
     560:	62 83       	std	Z+2, r22	; 0x02
     562:	da 01       	movw	r26, r20
     564:	a8 0f       	add	r26, r24
     566:	b9 1f       	adc	r27, r25
     568:	2c 93       	st	X, r18
    if (rxFifo.tail == rxFifo.size)
     56a:	22 81       	ldd	r18, Z+2	; 0x02
     56c:	33 81       	ldd	r19, Z+3	; 0x03
     56e:	84 81       	ldd	r24, Z+4	; 0x04
     570:	95 81       	ldd	r25, Z+5	; 0x05
     572:	28 17       	cp	r18, r24
     574:	39 07       	cpc	r19, r25
     576:	21 f4       	brne	.+8      	; 0x580 <__vector_36+0x74>
      rxFifo.tail = 0;
     578:	10 92 96 04 	sts	0x0496, r1	; 0x800496 <rxFifo+0x3>
     57c:	10 92 95 04 	sts	0x0495, r1	; 0x800495 <rxFifo+0x2>
    rxFifo.bytes++;
     580:	e3 e9       	ldi	r30, 0x93	; 147
     582:	f4 e0       	ldi	r31, 0x04	; 4
     584:	86 81       	ldd	r24, Z+6	; 0x06
     586:	97 81       	ldd	r25, Z+7	; 0x07
     588:	01 96       	adiw	r24, 0x01	; 1
     58a:	97 83       	std	Z+7, r25	; 0x07
     58c:	86 83       	std	Z+6, r24	; 0x06

    newData = true;
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <newData>
  }

  PRAGMA(diag_default=Pa082);
}
     594:	ff 91       	pop	r31
     596:	ef 91       	pop	r30
     598:	bf 91       	pop	r27
     59a:	af 91       	pop	r26
     59c:	9f 91       	pop	r25
     59e:	8f 91       	pop	r24
     5a0:	7f 91       	pop	r23
     5a2:	6f 91       	pop	r22
     5a4:	5f 91       	pop	r21
     5a6:	4f 91       	pop	r20
     5a8:	3f 91       	pop	r19
     5aa:	2f 91       	pop	r18
     5ac:	0f 90       	pop	r0
     5ae:	0b be       	out	0x3b, r0	; 59
     5b0:	0f 90       	pop	r0
     5b2:	0f be       	out	0x3f, r0	; 63
     5b4:	0f 90       	pop	r0
     5b6:	1f 90       	pop	r1
     5b8:	18 95       	reti

000005ba <HAL_UartTaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void HAL_UartTaskHandler(void)
{
  if (txFifo.bytes && udrEmpty)
     5ba:	80 91 34 06 	lds	r24, 0x0634	; 0x800634 <txFifo+0x6>
     5be:	90 91 35 06 	lds	r25, 0x0635	; 0x800635 <txFifo+0x7>
     5c2:	00 97       	sbiw	r24, 0x00	; 0
     5c4:	69 f1       	breq	.+90     	; 0x620 <HAL_UartTaskHandler+0x66>
     5c6:	20 91 01 03 	lds	r18, 0x0301	; 0x800301 <udrEmpty>
     5ca:	22 23       	and	r18, r18
     5cc:	49 f1       	breq	.+82     	; 0x620 <HAL_UartTaskHandler+0x66>
  {
    uint8_t byte;

    byte = txFifo.data[txFifo.head++];
     5ce:	ee e2       	ldi	r30, 0x2E	; 46
     5d0:	f6 e0       	ldi	r31, 0x06	; 6
     5d2:	60 85       	ldd	r22, Z+8	; 0x08
     5d4:	71 85       	ldd	r23, Z+9	; 0x09
     5d6:	20 81       	ld	r18, Z
     5d8:	31 81       	ldd	r19, Z+1	; 0x01
     5da:	a9 01       	movw	r20, r18
     5dc:	4f 5f       	subi	r20, 0xFF	; 255
     5de:	5f 4f       	sbci	r21, 0xFF	; 255
     5e0:	51 83       	std	Z+1, r21	; 0x01
     5e2:	40 83       	st	Z, r20
     5e4:	db 01       	movw	r26, r22
     5e6:	a2 0f       	add	r26, r18
     5e8:	b3 1f       	adc	r27, r19
     5ea:	2c 91       	ld	r18, X
    if (txFifo.head == txFifo.size)
     5ec:	64 81       	ldd	r22, Z+4	; 0x04
     5ee:	75 81       	ldd	r23, Z+5	; 0x05
     5f0:	46 17       	cp	r20, r22
     5f2:	57 07       	cpc	r21, r23
     5f4:	21 f4       	brne	.+8      	; 0x5fe <HAL_UartTaskHandler+0x44>
      txFifo.head = 0;
     5f6:	10 92 2f 06 	sts	0x062F, r1	; 0x80062f <txFifo+0x1>
     5fa:	10 92 2e 06 	sts	0x062E, r1	; 0x80062e <txFifo>
    txFifo.bytes--;
     5fe:	01 97       	sbiw	r24, 0x01	; 1
     600:	90 93 35 06 	sts	0x0635, r25	; 0x800635 <txFifo+0x7>
     604:	80 93 34 06 	sts	0x0634, r24	; 0x800634 <txFifo+0x6>

    ATOMIC_SECTION_ENTER
     608:	9f b7       	in	r25, 0x3f	; 63
     60a:	f8 94       	cli
      UDRx = byte;
     60c:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
      UCSRxB |= (1 << UDRIE1);
     610:	e9 ec       	ldi	r30, 0xC9	; 201
     612:	f0 e0       	ldi	r31, 0x00	; 0
     614:	80 81       	ld	r24, Z
     616:	80 62       	ori	r24, 0x20	; 32
     618:	80 83       	st	Z, r24
      udrEmpty = false;
     61a:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <udrEmpty>
    ATOMIC_SECTION_LEAVE
     61e:	9f bf       	out	0x3f, r25	; 63

  {
    uint16_t bytes;
    bool new;

    ATOMIC_SECTION_ENTER
     620:	2f b7       	in	r18, 0x3f	; 63
     622:	f8 94       	cli
      new = newData;
     624:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <newData>
      newData = false;
     628:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <newData>
      bytes = rxFifo.bytes;
     62c:	40 91 99 04 	lds	r20, 0x0499	; 0x800499 <rxFifo+0x6>
     630:	50 91 9a 04 	lds	r21, 0x049A	; 0x80049a <rxFifo+0x7>
    ATOMIC_SECTION_LEAVE
     634:	2f bf       	out	0x3f, r18	; 63

    if (new)
     636:	99 23       	and	r25, r25
     638:	11 f0       	breq	.+4      	; 0x63e <HAL_UartTaskHandler+0x84>
      HAL_UartBytesReceived(bytes);
     63a:	ca 01       	movw	r24, r20
     63c:	ed cd       	rjmp	.-1062   	; 0x218 <HAL_UartBytesReceived>
     63e:	08 95       	ret

00000640 <NWK_Init>:
      return val[i];
    cl += 25;
  }

  return 255;
}
     640:	e7 ee       	ldi	r30, 0xE7	; 231
     642:	f9 e1       	ldi	r31, 0x19	; 25
     644:	14 82       	std	Z+4, r1	; 0x04
     646:	15 82       	std	Z+5, r1	; 0x05
     648:	11 82       	std	Z+1, r1	; 0x01
     64a:	10 82       	st	Z, r1
     64c:	17 a2       	std	Z+39, r1	; 0x27
     64e:	16 a2       	std	Z+38, r1	; 0x26
     650:	ed ee       	ldi	r30, 0xED	; 237
     652:	f9 e1       	ldi	r31, 0x19	; 25
     654:	8d e0       	ldi	r24, 0x0D	; 13
     656:	9a e1       	ldi	r25, 0x1A	; 26
     658:	11 92       	st	Z+, r1
     65a:	11 92       	st	Z+, r1
     65c:	e8 17       	cp	r30, r24
     65e:	f9 07       	cpc	r31, r25
     660:	d9 f7       	brne	.-10     	; 0x658 <NWK_Init+0x18>
     662:	42 d6       	rcall	.+3204   	; 0x12e8 <nwkTxInit>
     664:	60 d3       	rcall	.+1728   	; 0xd26 <nwkRxInit>
     666:	0d d1       	rcall	.+538    	; 0x882 <nwkFrameInit>
     668:	40 d0       	rcall	.+128    	; 0x6ea <nwkDataReqInit>
     66a:	92 c1       	rjmp	.+804    	; 0x990 <nwkRouteInit>
     66c:	08 95       	ret

0000066e <NWK_SetAddr>:
     66e:	90 93 e8 19 	sts	0x19E8, r25	; 0x8019e8 <nwkIb+0x1>
     672:	80 93 e7 19 	sts	0x19E7, r24	; 0x8019e7 <nwkIb>
     676:	0c 94 78 0b 	jmp	0x16f0	; 0x16f0 <PHY_SetShortAddr>
     67a:	08 95       	ret

0000067c <NWK_SetPanId>:
     67c:	90 93 ea 19 	sts	0x19EA, r25	; 0x8019ea <nwkIb+0x3>
     680:	80 93 e9 19 	sts	0x19E9, r24	; 0x8019e9 <nwkIb+0x2>
     684:	0c 94 66 0b 	jmp	0x16cc	; 0x16cc <PHY_SetPanId>
     688:	08 95       	ret

0000068a <NWK_OpenEndpoint>:
     68a:	e8 2f       	mov	r30, r24
     68c:	f0 e0       	ldi	r31, 0x00	; 0
     68e:	ee 0f       	add	r30, r30
     690:	ff 1f       	adc	r31, r31
     692:	e3 51       	subi	r30, 0x13	; 19
     694:	f6 4e       	sbci	r31, 0xE6	; 230
     696:	71 83       	std	Z+1, r23	; 0x01
     698:	60 83       	st	Z, r22
     69a:	08 95       	ret

0000069c <NWK_TaskHandler>:
/*************************************************************************//**
  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
  nwkRxTaskHandler();
     69c:	8b d3       	rcall	.+1814   	; 0xdb4 <nwkRxTaskHandler>
  nwkTxTaskHandler();
     69e:	20 d7       	rcall	.+3648   	; 0x14e0 <nwkTxTaskHandler>
  nwkDataReqTaskHandler();
     6a0:	4d c0       	rjmp	.+154    	; 0x73c <nwkDataReqTaskHandler>
     6a2:	08 95       	ret

000006a4 <nwkDataReqTxConf>:
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     6a4:	e0 91 38 06 	lds	r30, 0x0638	; 0x800638 <nwkDataReqQueue>
     6a8:	f0 91 39 06 	lds	r31, 0x0639	; 0x800639 <nwkDataReqQueue+0x1>
     6ac:	30 97       	sbiw	r30, 0x00	; 0
     6ae:	d9 f0       	breq	.+54     	; 0x6e6 <nwkDataReqTxConf+0x42>
  {
    if (req->frame == frame)
     6b0:	22 81       	ldd	r18, Z+2	; 0x02
     6b2:	33 81       	ldd	r19, Z+3	; 0x03
     6b4:	82 17       	cp	r24, r18
     6b6:	93 07       	cpc	r25, r19
     6b8:	89 f4       	brne	.+34     	; 0x6dc <nwkDataReqTxConf+0x38>
     6ba:	05 c0       	rjmp	.+10     	; 0x6c6 <nwkDataReqTxConf+0x22>
     6bc:	22 81       	ldd	r18, Z+2	; 0x02
     6be:	33 81       	ldd	r19, Z+3	; 0x03
     6c0:	28 17       	cp	r18, r24
     6c2:	39 07       	cpc	r19, r25
     6c4:	59 f4       	brne	.+22     	; 0x6dc <nwkDataReqTxConf+0x38>
    {
      req->status = frame->tx.status;
     6c6:	dc 01       	movw	r26, r24
     6c8:	ad 57       	subi	r26, 0x7D	; 125
     6ca:	bf 4f       	sbci	r27, 0xFF	; 255
     6cc:	2c 91       	ld	r18, X
     6ce:	27 87       	std	Z+15, r18	; 0x0f
      req->control = frame->tx.control;
     6d0:	13 96       	adiw	r26, 0x03	; 3
     6d2:	2c 91       	ld	r18, X
     6d4:	20 8b       	std	Z+16, r18	; 0x10
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
     6d6:	22 e0       	ldi	r18, 0x02	; 2
     6d8:	24 83       	std	Z+4, r18	; 0x04
      break;
     6da:	05 c0       	rjmp	.+10     	; 0x6e6 <nwkDataReqTxConf+0x42>
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     6dc:	01 90       	ld	r0, Z+
     6de:	f0 81       	ld	r31, Z
     6e0:	e0 2d       	mov	r30, r0
     6e2:	30 97       	sbiw	r30, 0x00	; 0
     6e4:	59 f7       	brne	.-42     	; 0x6bc <nwkDataReqTxConf+0x18>
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
      break;
    }
  }

  nwkFrameFree(frame);
     6e6:	11 c1       	rjmp	.+546    	; 0x90a <nwkFrameFree>
     6e8:	08 95       	ret

000006ea <nwkDataReqInit>:
/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
     6ea:	10 92 39 06 	sts	0x0639, r1	; 0x800639 <nwkDataReqQueue+0x1>
     6ee:	10 92 38 06 	sts	0x0638, r1	; 0x800638 <nwkDataReqQueue>
     6f2:	08 95       	ret

000006f4 <NWK_DataReq>:
/*************************************************************************//**
  @brief Adds request @a req to the queue of outgoing requests
  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
     6f4:	fc 01       	movw	r30, r24
  req->state = NWK_DATA_REQ_STATE_INITIAL;
     6f6:	14 82       	std	Z+4, r1	; 0x04
  req->status = NWK_SUCCESS_STATUS;
     6f8:	17 86       	std	Z+15, r1	; 0x0f
  req->frame = NULL;
     6fa:	13 82       	std	Z+3, r1	; 0x03
     6fc:	12 82       	std	Z+2, r1	; 0x02

  nwkIb.lock++;
     6fe:	a7 ee       	ldi	r26, 0xE7	; 231
     700:	b9 e1       	ldi	r27, 0x19	; 25
     702:	96 96       	adiw	r26, 0x26	; 38
     704:	8d 91       	ld	r24, X+
     706:	9c 91       	ld	r25, X
     708:	97 97       	sbiw	r26, 0x27	; 39
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	97 96       	adiw	r26, 0x27	; 39
     70e:	9c 93       	st	X, r25
     710:	8e 93       	st	-X, r24
     712:	96 97       	sbiw	r26, 0x26	; 38

  if (NULL == nwkDataReqQueue)
     714:	80 91 38 06 	lds	r24, 0x0638	; 0x800638 <nwkDataReqQueue>
     718:	90 91 39 06 	lds	r25, 0x0639	; 0x800639 <nwkDataReqQueue+0x1>
     71c:	00 97       	sbiw	r24, 0x00	; 0
     71e:	39 f4       	brne	.+14     	; 0x72e <NWK_DataReq+0x3a>
  {
    req->next = NULL;
     720:	11 82       	std	Z+1, r1	; 0x01
     722:	10 82       	st	Z, r1
    nwkDataReqQueue = req;
     724:	f0 93 39 06 	sts	0x0639, r31	; 0x800639 <nwkDataReqQueue+0x1>
     728:	e0 93 38 06 	sts	0x0638, r30	; 0x800638 <nwkDataReqQueue>
     72c:	08 95       	ret
  }
  else
  {
    req->next = nwkDataReqQueue;
     72e:	91 83       	std	Z+1, r25	; 0x01
     730:	80 83       	st	Z, r24
    nwkDataReqQueue = req;
     732:	f0 93 39 06 	sts	0x0639, r31	; 0x800639 <nwkDataReqQueue+0x1>
     736:	e0 93 38 06 	sts	0x0638, r30	; 0x800638 <nwkDataReqQueue>
     73a:	08 95       	ret

0000073c <nwkDataReqTaskHandler>:

/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
     73c:	0f 93       	push	r16
     73e:	1f 93       	push	r17
     740:	cf 93       	push	r28
     742:	df 93       	push	r29
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     744:	e0 91 38 06 	lds	r30, 0x0638	; 0x800638 <nwkDataReqQueue>
     748:	f0 91 39 06 	lds	r31, 0x0639	; 0x800639 <nwkDataReqQueue+0x1>
     74c:	30 97       	sbiw	r30, 0x00	; 0
     74e:	09 f4       	brne	.+2      	; 0x752 <nwkDataReqTaskHandler+0x16>
     750:	93 c0       	rjmp	.+294    	; 0x878 <nwkDataReqTaskHandler+0x13c>
     752:	ef 01       	movw	r28, r30
  {
    switch (req->state)
     754:	8c 81       	ldd	r24, Y+4	; 0x04
     756:	88 23       	and	r24, r24
     758:	21 f0       	breq	.+8      	; 0x762 <nwkDataReqTaskHandler+0x26>
     75a:	82 30       	cpi	r24, 0x02	; 2
     75c:	09 f4       	brne	.+2      	; 0x760 <nwkDataReqTaskHandler+0x24>
     75e:	66 c0       	rjmp	.+204    	; 0x82c <nwkDataReqTaskHandler+0xf0>
     760:	85 c0       	rjmp	.+266    	; 0x86c <nwkDataReqTaskHandler+0x130>
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
  NwkFrame_t *frame;

  if (NULL == (frame = nwkFrameAlloc()))
     762:	9a d0       	rcall	.+308    	; 0x898 <nwkFrameAlloc>
     764:	8c 01       	movw	r16, r24
     766:	00 97       	sbiw	r24, 0x00	; 0
     768:	21 f4       	brne	.+8      	; 0x772 <nwkDataReqTaskHandler+0x36>
  {
    req->state = NWK_DATA_REQ_STATE_CONFIRM;
     76a:	82 e0       	ldi	r24, 0x02	; 2
     76c:	8c 83       	std	Y+4, r24	; 0x04
    req->status = NWK_OUT_OF_MEMORY_STATUS;
     76e:	8f 87       	std	Y+15, r24	; 0x0f
     770:	83 c0       	rjmp	.+262    	; 0x878 <nwkDataReqTaskHandler+0x13c>
    return;
  }

  req->frame = frame;
     772:	9b 83       	std	Y+3, r25	; 0x03
     774:	8a 83       	std	Y+2, r24	; 0x02
  req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	8c 83       	std	Y+4, r24	; 0x04

  frame->tx.confirm = nwkDataReqTxConf;
     77a:	f8 01       	movw	r30, r16
     77c:	e9 57       	subi	r30, 0x79	; 121
     77e:	ff 4f       	sbci	r31, 0xFF	; 255
     780:	82 e5       	ldi	r24, 0x52	; 82
     782:	93 e0       	ldi	r25, 0x03	; 3
     784:	91 83       	std	Z+1, r25	; 0x01
     786:	80 83       	st	Z, r24
  frame->tx.control = req->options & NWK_OPT_BROADCAST_PAN_ID ? NWK_TX_CONTROL_BROADCAST_PAN_ID : 0;
     788:	31 97       	sbiw	r30, 0x01	; 1
     78a:	89 85       	ldd	r24, Y+9	; 0x09
     78c:	82 fb       	bst	r24, 2
     78e:	88 27       	eor	r24, r24
     790:	80 f9       	bld	r24, 0
     792:	80 83       	st	Z, r24

  frame->header.nwkFcf.ackRequest = req->options & NWK_OPT_ACK_REQUEST ? 1 : 0;
     794:	99 85       	ldd	r25, Y+9	; 0x09
     796:	d8 01       	movw	r26, r16
     798:	1b 96       	adiw	r26, 0x0b	; 11
     79a:	8c 91       	ld	r24, X
     79c:	1b 97       	sbiw	r26, 0x0b	; 11
     79e:	90 fb       	bst	r25, 0
     7a0:	80 f9       	bld	r24, 0
     7a2:	1b 96       	adiw	r26, 0x0b	; 11
     7a4:	8c 93       	st	X, r24
     7a6:	1b 97       	sbiw	r26, 0x0b	; 11
  frame->header.nwkFcf.linkLocal = req->options & NWK_OPT_LINK_LOCAL ? 1 : 0;
     7a8:	99 85       	ldd	r25, Y+9	; 0x09
     7aa:	93 fb       	bst	r25, 3
     7ac:	99 27       	eor	r25, r25
     7ae:	90 f9       	bld	r25, 0
     7b0:	90 fb       	bst	r25, 0
     7b2:	82 f9       	bld	r24, 2
     7b4:	1b 96       	adiw	r26, 0x0b	; 11
     7b6:	8c 93       	st	X, r24
     7b8:	1b 97       	sbiw	r26, 0x0b	; 11
    frame->payload += sizeof(NwkFrameMulticastHeader_t);
    frame->size += sizeof(NwkFrameMulticastHeader_t);
  }
#endif

  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     7ba:	e7 ee       	ldi	r30, 0xE7	; 231
     7bc:	f9 e1       	ldi	r31, 0x19	; 25
     7be:	84 81       	ldd	r24, Z+4	; 0x04
     7c0:	8f 5f       	subi	r24, 0xFF	; 255
     7c2:	84 83       	std	Z+4, r24	; 0x04
     7c4:	1c 96       	adiw	r26, 0x0c	; 12
     7c6:	8c 93       	st	X, r24
     7c8:	1c 97       	sbiw	r26, 0x0c	; 12
  frame->header.nwkSrcAddr = nwkIb.addr;
     7ca:	80 81       	ld	r24, Z
     7cc:	91 81       	ldd	r25, Z+1	; 0x01
     7ce:	1e 96       	adiw	r26, 0x0e	; 14
     7d0:	9c 93       	st	X, r25
     7d2:	8e 93       	st	-X, r24
     7d4:	1d 97       	sbiw	r26, 0x0d	; 13
  frame->header.nwkDstAddr = req->dstAddr;
     7d6:	8d 81       	ldd	r24, Y+5	; 0x05
     7d8:	9e 81       	ldd	r25, Y+6	; 0x06
     7da:	50 96       	adiw	r26, 0x10	; 16
     7dc:	9c 93       	st	X, r25
     7de:	8e 93       	st	-X, r24
     7e0:	1f 97       	sbiw	r26, 0x0f	; 15
  frame->header.nwkSrcEndpoint = req->srcEndpoint;
     7e2:	88 85       	ldd	r24, Y+8	; 0x08
     7e4:	98 2f       	mov	r25, r24
     7e6:	9f 70       	andi	r25, 0x0F	; 15
     7e8:	51 96       	adiw	r26, 0x11	; 17
     7ea:	8c 91       	ld	r24, X
     7ec:	51 97       	sbiw	r26, 0x11	; 17
     7ee:	80 7f       	andi	r24, 0xF0	; 240
     7f0:	89 2b       	or	r24, r25
     7f2:	51 96       	adiw	r26, 0x11	; 17
     7f4:	8c 93       	st	X, r24
     7f6:	51 97       	sbiw	r26, 0x11	; 17
  frame->header.nwkDstEndpoint = req->dstEndpoint;
     7f8:	9f 81       	ldd	r25, Y+7	; 0x07
     7fa:	92 95       	swap	r25
     7fc:	90 7f       	andi	r25, 0xF0	; 240
     7fe:	8f 70       	andi	r24, 0x0F	; 15
     800:	89 2b       	or	r24, r25
     802:	51 96       	adiw	r26, 0x11	; 17
     804:	8c 93       	st	X, r24

  memcpy(frame->payload, req->data, req->size);
     806:	f8 01       	movw	r30, r16
     808:	ef 57       	subi	r30, 0x7F	; 127
     80a:	ff 4f       	sbci	r31, 0xFF	; 255
     80c:	4c 85       	ldd	r20, Y+12	; 0x0c
     80e:	50 e0       	ldi	r21, 0x00	; 0
     810:	6a 85       	ldd	r22, Y+10	; 0x0a
     812:	7b 85       	ldd	r23, Y+11	; 0x0b
     814:	80 81       	ld	r24, Z
     816:	91 81       	ldd	r25, Z+1	; 0x01
     818:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <memcpy>
  frame->size += req->size;
     81c:	f8 01       	movw	r30, r16
     81e:	91 81       	ldd	r25, Z+1	; 0x01
     820:	8c 85       	ldd	r24, Y+12	; 0x0c
     822:	89 0f       	add	r24, r25
     824:	81 83       	std	Z+1, r24	; 0x01

  nwkTxFrame(frame);
     826:	c8 01       	movw	r24, r16
     828:	82 d5       	rcall	.+2820   	; 0x132e <nwkTxFrame>
     82a:	26 c0       	rjmp	.+76     	; 0x878 <nwkDataReqTaskHandler+0x13c>
  @brief Confirms request @req to the application and remove it from the queue
  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
  if (nwkDataReqQueue == req)
     82c:	ec 17       	cp	r30, r28
     82e:	fd 07       	cpc	r31, r29
     830:	41 f4       	brne	.+16     	; 0x842 <nwkDataReqTaskHandler+0x106>
  {
    nwkDataReqQueue = nwkDataReqQueue->next;
     832:	80 81       	ld	r24, Z
     834:	91 81       	ldd	r25, Z+1	; 0x01
     836:	90 93 39 06 	sts	0x0639, r25	; 0x800639 <nwkDataReqQueue+0x1>
     83a:	80 93 38 06 	sts	0x0638, r24	; 0x800638 <nwkDataReqQueue>
     83e:	0a c0       	rjmp	.+20     	; 0x854 <nwkDataReqTaskHandler+0x118>
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
      prev = prev->next;
     840:	fc 01       	movw	r30, r24
    nwkDataReqQueue = nwkDataReqQueue->next;
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
     842:	80 81       	ld	r24, Z
     844:	91 81       	ldd	r25, Z+1	; 0x01
     846:	8c 17       	cp	r24, r28
     848:	9d 07       	cpc	r25, r29
     84a:	d1 f7       	brne	.-12     	; 0x840 <nwkDataReqTaskHandler+0x104>
      prev = prev->next;
    prev->next = ((NWK_DataReq_t *)prev->next)->next;
     84c:	88 81       	ld	r24, Y
     84e:	99 81       	ldd	r25, Y+1	; 0x01
     850:	91 83       	std	Z+1, r25	; 0x01
     852:	80 83       	st	Z, r24
  }

  nwkIb.lock--;
     854:	e7 ee       	ldi	r30, 0xE7	; 231
     856:	f9 e1       	ldi	r31, 0x19	; 25
     858:	86 a1       	ldd	r24, Z+38	; 0x26
     85a:	97 a1       	ldd	r25, Z+39	; 0x27
     85c:	01 97       	sbiw	r24, 0x01	; 1
     85e:	97 a3       	std	Z+39, r25	; 0x27
     860:	86 a3       	std	Z+38, r24	; 0x26
  req->confirm(req);
     862:	ed 85       	ldd	r30, Y+13	; 0x0d
     864:	fe 85       	ldd	r31, Y+14	; 0x0e
     866:	ce 01       	movw	r24, r28
     868:	19 95       	eicall
     86a:	06 c0       	rjmp	.+12     	; 0x878 <nwkDataReqTaskHandler+0x13c>
/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     86c:	09 90       	ld	r0, Y+
     86e:	d8 81       	ld	r29, Y
     870:	c0 2d       	mov	r28, r0
     872:	20 97       	sbiw	r28, 0x00	; 0
     874:	09 f0       	breq	.+2      	; 0x878 <nwkDataReqTaskHandler+0x13c>
     876:	6e cf       	rjmp	.-292    	; 0x754 <nwkDataReqTaskHandler+0x18>

      default:
        break;
    };
  }
}
     878:	df 91       	pop	r29
     87a:	cf 91       	pop	r28
     87c:	1f 91       	pop	r17
     87e:	0f 91       	pop	r16
     880:	08 95       	ret

00000882 <nwkFrameInit>:

/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
     882:	ea e3       	ldi	r30, 0x3A	; 58
     884:	f6 e0       	ldi	r31, 0x06	; 6
     886:	88 e4       	ldi	r24, 0x48	; 72
     888:	96 e1       	ldi	r25, 0x16	; 22
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
     88a:	10 82       	st	Z, r1
     88c:	e7 57       	subi	r30, 0x77	; 119
     88e:	ff 4f       	sbci	r31, 0xFF	; 255
/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
     890:	e8 17       	cp	r30, r24
     892:	f9 07       	cpc	r31, r25
     894:	d1 f7       	brne	.-12     	; 0x88a <nwkFrameInit+0x8>
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
}
     896:	08 95       	ret

00000898 <nwkFrameAlloc>:
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
  {
    if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state)
     898:	80 91 3a 06 	lds	r24, 0x063A	; 0x80063a <nwkFrameFrames>
     89c:	88 23       	and	r24, r24
     89e:	59 f0       	breq	.+22     	; 0x8b6 <nwkFrameAlloc+0x1e>
     8a0:	e3 ec       	ldi	r30, 0xC3	; 195
     8a2:	f6 e0       	ldi	r31, 0x06	; 6
     8a4:	68 e4       	ldi	r22, 0x48	; 72
     8a6:	76 e1       	ldi	r23, 0x16	; 22
     8a8:	81 e0       	ldi	r24, 0x01	; 1
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	ac 01       	movw	r20, r24
     8ae:	20 81       	ld	r18, Z
     8b0:	21 11       	cpse	r18, r1
     8b2:	22 c0       	rjmp	.+68     	; 0x8f8 <nwkFrameAlloc+0x60>
     8b4:	02 c0       	rjmp	.+4      	; 0x8ba <nwkFrameAlloc+0x22>
     8b6:	40 e0       	ldi	r20, 0x00	; 0
     8b8:	50 e0       	ldi	r21, 0x00	; 0
    {
      memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
     8ba:	69 e8       	ldi	r22, 0x89	; 137
     8bc:	64 9f       	mul	r22, r20
     8be:	90 01       	movw	r18, r0
     8c0:	65 9f       	mul	r22, r21
     8c2:	30 0d       	add	r19, r0
     8c4:	11 24       	eor	r1, r1
     8c6:	c9 01       	movw	r24, r18
     8c8:	86 5c       	subi	r24, 0xC6	; 198
     8ca:	99 4f       	sbci	r25, 0xF9	; 249
     8cc:	fc 01       	movw	r30, r24
     8ce:	11 92       	st	Z+, r1
     8d0:	6a 95       	dec	r22
     8d2:	e9 f7       	brne	.-6      	; 0x8ce <nwkFrameAlloc+0x36>
      nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
     8d4:	40 e1       	ldi	r20, 0x10	; 16
     8d6:	fc 01       	movw	r30, r24
     8d8:	41 83       	std	Z+1, r20	; 0x01
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
     8da:	ef 57       	subi	r30, 0x7F	; 127
     8dc:	ff 4f       	sbci	r31, 0xFF	; 255
     8de:	24 5b       	subi	r18, 0xB4	; 180
     8e0:	39 4f       	sbci	r19, 0xF9	; 249
     8e2:	31 83       	std	Z+1, r19	; 0x01
     8e4:	20 83       	st	Z, r18
      nwkIb.lock++;
     8e6:	e7 ee       	ldi	r30, 0xE7	; 231
     8e8:	f9 e1       	ldi	r31, 0x19	; 25
     8ea:	26 a1       	ldd	r18, Z+38	; 0x26
     8ec:	37 a1       	ldd	r19, Z+39	; 0x27
     8ee:	2f 5f       	subi	r18, 0xFF	; 255
     8f0:	3f 4f       	sbci	r19, 0xFF	; 255
     8f2:	37 a3       	std	Z+39, r19	; 0x27
     8f4:	26 a3       	std	Z+38, r18	; 0x26
      return &nwkFrameFrames[i];
     8f6:	08 95       	ret
     8f8:	01 96       	adiw	r24, 0x01	; 1
     8fa:	e7 57       	subi	r30, 0x77	; 119
     8fc:	ff 4f       	sbci	r31, 0xFF	; 255
  @brief Allocates an empty frame from the buffer pool
  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
     8fe:	e6 17       	cp	r30, r22
     900:	f7 07       	cpc	r31, r23
     902:	a1 f6       	brne	.-88     	; 0x8ac <nwkFrameAlloc+0x14>
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
      nwkIb.lock++;
      return &nwkFrameFrames[i];
    }
  }
  return NULL;
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	90 e0       	ldi	r25, 0x00	; 0
}
     908:	08 95       	ret

0000090a <nwkFrameFree>:
  @brief Frees a @a frame and returns it to the buffer pool
  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
  frame->state = NWK_FRAME_STATE_FREE;
     90a:	fc 01       	movw	r30, r24
     90c:	10 82       	st	Z, r1
  nwkIb.lock--;
     90e:	e7 ee       	ldi	r30, 0xE7	; 231
     910:	f9 e1       	ldi	r31, 0x19	; 25
     912:	86 a1       	ldd	r24, Z+38	; 0x26
     914:	97 a1       	ldd	r25, Z+39	; 0x27
     916:	01 97       	sbiw	r24, 0x01	; 1
     918:	97 a3       	std	Z+39, r25	; 0x27
     91a:	86 a3       	std	Z+38, r24	; 0x26
     91c:	08 95       	ret

0000091e <nwkFrameNext>:
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
     91e:	00 97       	sbiw	r24, 0x00	; 0
     920:	41 f0       	breq	.+16     	; 0x932 <nwkFrameNext+0x14>
    frame = nwkFrameFrames;
  else
    frame++;
     922:	fc 01       	movw	r30, r24
     924:	e7 57       	subi	r30, 0x77	; 119
     926:	ff 4f       	sbci	r31, 0xFF	; 255

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     928:	86 e1       	ldi	r24, 0x16	; 22
     92a:	e8 34       	cpi	r30, 0x48	; 72
     92c:	f8 07       	cpc	r31, r24
     92e:	18 f0       	brcs	.+6      	; 0x936 <nwkFrameNext+0x18>
     930:	12 c0       	rjmp	.+36     	; 0x956 <nwkFrameNext+0x38>
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
     932:	ea e3       	ldi	r30, 0x3A	; 58
     934:	f6 e0       	ldi	r31, 0x06	; 6
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
     936:	80 81       	ld	r24, Z
     938:	88 23       	and	r24, r24
     93a:	21 f0       	breq	.+8      	; 0x944 <nwkFrameNext+0x26>
     93c:	0f c0       	rjmp	.+30     	; 0x95c <nwkFrameNext+0x3e>
     93e:	80 81       	ld	r24, Z
     940:	81 11       	cpse	r24, r1
     942:	0f c0       	rjmp	.+30     	; 0x962 <nwkFrameNext+0x44>
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     944:	e7 57       	subi	r30, 0x77	; 119
     946:	ff 4f       	sbci	r31, 0xFF	; 255
     948:	86 e1       	ldi	r24, 0x16	; 22
     94a:	e8 34       	cpi	r30, 0x48	; 72
     94c:	f8 07       	cpc	r31, r24
     94e:	b8 f3       	brcs	.-18     	; 0x93e <nwkFrameNext+0x20>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	08 95       	ret
     956:	80 e0       	ldi	r24, 0x00	; 0
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	08 95       	ret
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
     95c:	8e 2f       	mov	r24, r30
     95e:	9f 2f       	mov	r25, r31
     960:	08 95       	ret
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     962:	8e 2f       	mov	r24, r30
     964:	9f 2f       	mov	r25, r31
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
}
     966:	08 95       	ret

00000968 <nwkFrameCommandInit>:
/*************************************************************************//**
  @brief Sets default parameters for the the command @a frame
  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
     968:	fc 01       	movw	r30, r24
  frame->tx.status = NWK_SUCCESS_STATUS;
     96a:	dc 01       	movw	r26, r24
     96c:	ad 57       	subi	r26, 0x7D	; 125
     96e:	bf 4f       	sbci	r27, 0xFF	; 255
     970:	1c 92       	st	X, r1
  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     972:	a7 ee       	ldi	r26, 0xE7	; 231
     974:	b9 e1       	ldi	r27, 0x19	; 25
     976:	14 96       	adiw	r26, 0x04	; 4
     978:	9c 91       	ld	r25, X
     97a:	14 97       	sbiw	r26, 0x04	; 4
     97c:	9f 5f       	subi	r25, 0xFF	; 255
     97e:	14 96       	adiw	r26, 0x04	; 4
     980:	9c 93       	st	X, r25
     982:	14 97       	sbiw	r26, 0x04	; 4
     984:	94 87       	std	Z+12, r25	; 0x0c
  frame->header.nwkSrcAddr = nwkIb.addr;
     986:	8d 91       	ld	r24, X+
     988:	9c 91       	ld	r25, X
     98a:	96 87       	std	Z+14, r25	; 0x0e
     98c:	85 87       	std	Z+13, r24	; 0x0d
     98e:	08 95       	ret

00000990 <nwkRouteInit>:
  entry->nextHopAddr = nextHop;
  entry->multicast = multicast;
  entry->score = NWK_ROUTE_DEFAULT_SCORE;
  entry->rank = NWK_ROUTE_DEFAULT_RANK;
  entry->lqi = lqi;
}
     990:	a9 e4       	ldi	r26, 0x49	; 73
     992:	b6 e1       	ldi	r27, 0x16	; 22
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	4f ef       	ldi	r20, 0xFF	; 255
     99a:	5f ef       	ldi	r21, 0xFF	; 255
     99c:	11 96       	adiw	r26, 0x01	; 1
     99e:	5c 93       	st	X, r21
     9a0:	4e 93       	st	-X, r20
     9a2:	fc 01       	movw	r30, r24
     9a4:	ee 0f       	add	r30, r30
     9a6:	ff 1f       	adc	r31, r31
     9a8:	ee 0f       	add	r30, r30
     9aa:	ff 1f       	adc	r31, r31
     9ac:	ee 0f       	add	r30, r30
     9ae:	ff 1f       	adc	r31, r31
     9b0:	e8 1b       	sub	r30, r24
     9b2:	f9 0b       	sbc	r31, r25
     9b4:	e8 5b       	subi	r30, 0xB8	; 184
     9b6:	f9 4e       	sbci	r31, 0xE9	; 233
     9b8:	20 81       	ld	r18, Z
     9ba:	2e 7f       	andi	r18, 0xFE	; 254
     9bc:	20 83       	st	Z, r18
     9be:	14 96       	adiw	r26, 0x04	; 4
     9c0:	1c 92       	st	X, r1
     9c2:	14 97       	sbiw	r26, 0x04	; 4
     9c4:	01 96       	adiw	r24, 0x01	; 1
     9c6:	17 96       	adiw	r26, 0x07	; 7
     9c8:	84 36       	cpi	r24, 0x64	; 100
     9ca:	91 05       	cpc	r25, r1
     9cc:	39 f7       	brne	.-50     	; 0x99c <nwkRouteInit+0xc>
     9ce:	08 95       	ret

000009d0 <NWK_RouteFindEntry>:
     9d0:	0f 93       	push	r16
     9d2:	1f 93       	push	r17
     9d4:	cf 93       	push	r28
     9d6:	df 93       	push	r29
     9d8:	e9 e4       	ldi	r30, 0x49	; 73
     9da:	f6 e1       	ldi	r31, 0x16	; 22
     9dc:	20 e0       	ldi	r18, 0x00	; 0
     9de:	30 e0       	ldi	r19, 0x00	; 0
     9e0:	06 2f       	mov	r16, r22
     9e2:	10 e0       	ldi	r17, 0x00	; 0
     9e4:	40 81       	ld	r20, Z
     9e6:	51 81       	ldd	r21, Z+1	; 0x01
     9e8:	48 17       	cp	r20, r24
     9ea:	59 07       	cpc	r21, r25
     9ec:	b1 f4       	brne	.+44     	; 0xa1a <NWK_RouteFindEntry+0x4a>
     9ee:	d9 01       	movw	r26, r18
     9f0:	aa 0f       	add	r26, r26
     9f2:	bb 1f       	adc	r27, r27
     9f4:	aa 0f       	add	r26, r26
     9f6:	bb 1f       	adc	r27, r27
     9f8:	aa 0f       	add	r26, r26
     9fa:	bb 1f       	adc	r27, r27
     9fc:	a2 1b       	sub	r26, r18
     9fe:	b3 0b       	sbc	r27, r19
     a00:	a8 5b       	subi	r26, 0xB8	; 184
     a02:	b9 4e       	sbci	r27, 0xE9	; 233
     a04:	4c 91       	ld	r20, X
     a06:	46 95       	lsr	r20
     a08:	41 70       	andi	r20, 0x01	; 1
     a0a:	c4 2f       	mov	r28, r20
     a0c:	40 e0       	ldi	r20, 0x00	; 0
     a0e:	d4 2f       	mov	r29, r20
     a10:	c0 17       	cp	r28, r16
     a12:	d1 07       	cpc	r29, r17
     a14:	11 f4       	brne	.+4      	; 0xa1a <NWK_RouteFindEntry+0x4a>
     a16:	cd 01       	movw	r24, r26
     a18:	08 c0       	rjmp	.+16     	; 0xa2a <NWK_RouteFindEntry+0x5a>
     a1a:	2f 5f       	subi	r18, 0xFF	; 255
     a1c:	3f 4f       	sbci	r19, 0xFF	; 255
     a1e:	37 96       	adiw	r30, 0x07	; 7
     a20:	24 36       	cpi	r18, 0x64	; 100
     a22:	31 05       	cpc	r19, r1
     a24:	f9 f6       	brne	.-66     	; 0x9e4 <NWK_RouteFindEntry+0x14>
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	df 91       	pop	r29
     a2c:	cf 91       	pop	r28
     a2e:	1f 91       	pop	r17
     a30:	0f 91       	pop	r16
     a32:	08 95       	ret

00000a34 <NWK_RouteNewEntry>:
     a34:	a0 e0       	ldi	r26, 0x00	; 0
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	e8 e4       	ldi	r30, 0x48	; 72
     a3a:	f6 e1       	ldi	r31, 0x16	; 22
     a3c:	80 81       	ld	r24, Z
     a3e:	80 fd       	sbrc	r24, 0
     a40:	0d c0       	rjmp	.+26     	; 0xa5c <NWK_RouteNewEntry+0x28>
     a42:	85 81       	ldd	r24, Z+5	; 0x05
     a44:	88 23       	and	r24, r24
     a46:	81 f0       	breq	.+32     	; 0xa68 <NWK_RouteNewEntry+0x34>
     a48:	10 97       	sbiw	r26, 0x00	; 0
     a4a:	39 f0       	breq	.+14     	; 0xa5a <NWK_RouteNewEntry+0x26>
     a4c:	15 96       	adiw	r26, 0x05	; 5
     a4e:	9c 91       	ld	r25, X
     a50:	15 97       	sbiw	r26, 0x05	; 5
     a52:	89 17       	cp	r24, r25
     a54:	18 f4       	brcc	.+6      	; 0xa5c <NWK_RouteNewEntry+0x28>
     a56:	df 01       	movw	r26, r30
     a58:	01 c0       	rjmp	.+2      	; 0xa5c <NWK_RouteNewEntry+0x28>
     a5a:	df 01       	movw	r26, r30
     a5c:	37 96       	adiw	r30, 0x07	; 7
     a5e:	89 e1       	ldi	r24, 0x19	; 25
     a60:	e4 30       	cpi	r30, 0x04	; 4
     a62:	f8 07       	cpc	r31, r24
     a64:	59 f7       	brne	.-42     	; 0xa3c <NWK_RouteNewEntry+0x8>
     a66:	fd 01       	movw	r30, r26
     a68:	80 81       	ld	r24, Z
     a6a:	8d 70       	andi	r24, 0x0D	; 13
     a6c:	80 63       	ori	r24, 0x30	; 48
     a6e:	80 83       	st	Z, r24
     a70:	80 e8       	ldi	r24, 0x80	; 128
     a72:	85 83       	std	Z+5, r24	; 0x05
     a74:	cf 01       	movw	r24, r30
     a76:	08 95       	ret

00000a78 <NWK_RouteFreeEntry>:
     a78:	fc 01       	movw	r30, r24
     a7a:	80 81       	ld	r24, Z
     a7c:	80 fd       	sbrc	r24, 0
     a7e:	05 c0       	rjmp	.+10     	; 0xa8a <NWK_RouteFreeEntry+0x12>
     a80:	8f ef       	ldi	r24, 0xFF	; 255
     a82:	9f ef       	ldi	r25, 0xFF	; 255
     a84:	92 83       	std	Z+2, r25	; 0x02
     a86:	81 83       	std	Z+1, r24	; 0x01
     a88:	15 82       	std	Z+5, r1	; 0x05
     a8a:	08 95       	ret

00000a8c <NWK_RouteNextHop>:
     a8c:	a1 df       	rcall	.-190    	; 0x9d0 <NWK_RouteFindEntry>
     a8e:	00 97       	sbiw	r24, 0x00	; 0
     a90:	21 f0       	breq	.+8      	; 0xa9a <NWK_RouteNextHop+0xe>
     a92:	fc 01       	movw	r30, r24
     a94:	83 81       	ldd	r24, Z+3	; 0x03
     a96:	94 81       	ldd	r25, Z+4	; 0x04
     a98:	08 95       	ret
     a9a:	8f ef       	ldi	r24, 0xFF	; 255
     a9c:	9f ef       	ldi	r25, 0xFF	; 255
     a9e:	08 95       	ret

00000aa0 <nwkRouteRemove>:
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
  NWK_RouteTableEntry_t *entry;

  entry = NWK_RouteFindEntry(dst, multicast);
     aa0:	97 df       	rcall	.-210    	; 0x9d0 <NWK_RouteFindEntry>
  if (entry)
     aa2:	00 97       	sbiw	r24, 0x00	; 0
    NWK_RouteFreeEntry(entry);
     aa4:	09 f0       	breq	.+2      	; 0xaa8 <nwkRouteRemove+0x8>
     aa6:	e8 cf       	rjmp	.-48     	; 0xa78 <NWK_RouteFreeEntry>
     aa8:	08 95       	ret

00000aaa <nwkRouteFrameReceived>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
     aaa:	0f 93       	push	r16
     aac:	1f 93       	push	r17
     aae:	cf 93       	push	r28
     ab0:	df 93       	push	r29
     ab2:	fc 01       	movw	r30, r24
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
  NwkFrameHeader_t *header = &frame->header;
  NWK_RouteTableEntry_t *entry;

  if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
     ab4:	01 85       	ldd	r16, Z+9	; 0x09
     ab6:	12 85       	ldd	r17, Z+10	; 0x0a
     ab8:	11 23       	and	r17, r17
     aba:	2c f4       	brge	.+10     	; 0xac6 <nwkRouteFrameReceived+0x1c>
     abc:	85 85       	ldd	r24, Z+13	; 0x0d
     abe:	96 85       	ldd	r25, Z+14	; 0x0e
     ac0:	08 17       	cp	r16, r24
     ac2:	19 07       	cpc	r17, r25
     ac4:	e1 f5       	brne	.+120    	; 0xb3e <nwkRouteFrameReceived+0x94>
      (header->macSrcAddr != header->nwkSrcAddr))
    return;

  if (NWK_BROADCAST_PANID == header->macDstPanId)
     ac6:	85 81       	ldd	r24, Z+5	; 0x05
     ac8:	96 81       	ldd	r25, Z+6	; 0x06
     aca:	01 96       	adiw	r24, 0x01	; 1
     acc:	c1 f1       	breq	.+112    	; 0xb3e <nwkRouteFrameReceived+0x94>
     ace:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);
     ad0:	60 e0       	ldi	r22, 0x00	; 0
     ad2:	85 85       	ldd	r24, Z+13	; 0x0d
     ad4:	96 85       	ldd	r25, Z+14	; 0x0e
     ad6:	7c df       	rcall	.-264    	; 0x9d0 <NWK_RouteFindEntry>
     ad8:	fc 01       	movw	r30, r24

  if (entry)
     ada:	89 2b       	or	r24, r25
     adc:	a1 f0       	breq	.+40     	; 0xb06 <nwkRouteFrameReceived+0x5c>
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
     ade:	8f 81       	ldd	r24, Y+7	; 0x07
     ae0:	98 85       	ldd	r25, Y+8	; 0x08
     ae2:	01 96       	adiw	r24, 0x01	; 1
     ae4:	f9 f4       	brne	.+62     	; 0xb24 <nwkRouteFrameReceived+0x7a>
     ae6:	20 91 e7 19 	lds	r18, 0x19E7	; 0x8019e7 <nwkIb>
     aea:	30 91 e8 19 	lds	r19, 0x19E8	; 0x8019e8 <nwkIb+0x1>
     aee:	8f 85       	ldd	r24, Y+15	; 0x0f
     af0:	98 89       	ldd	r25, Y+16	; 0x10
     af2:	28 17       	cp	r18, r24
     af4:	39 07       	cpc	r19, r25
     af6:	b1 f4       	brne	.+44     	; 0xb24 <nwkRouteFrameReceived+0x7a>
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
    {
      entry->nextHopAddr = header->macSrcAddr;
     af8:	14 83       	std	Z+4, r17	; 0x04
     afa:	03 83       	std	Z+3, r16	; 0x03
      entry->score = NWK_ROUTE_DEFAULT_SCORE;
     afc:	80 81       	ld	r24, Z
     afe:	8f 70       	andi	r24, 0x0F	; 15
     b00:	80 63       	ori	r24, 0x30	; 48
     b02:	80 83       	st	Z, r24
    }
  }
  else
  {
    entry = NWK_RouteNewEntry();
     b04:	0a c0       	rjmp	.+20     	; 0xb1a <nwkRouteFrameReceived+0x70>
     b06:	96 df       	rcall	.-212    	; 0xa34 <NWK_RouteNewEntry>
     b08:	fc 01       	movw	r30, r24

    entry->dstAddr = header->nwkSrcAddr;
     b0a:	8d 85       	ldd	r24, Y+13	; 0x0d
     b0c:	9e 85       	ldd	r25, Y+14	; 0x0e
     b0e:	92 83       	std	Z+2, r25	; 0x02
     b10:	81 83       	std	Z+1, r24	; 0x01
    entry->nextHopAddr = header->macSrcAddr;
     b12:	89 85       	ldd	r24, Y+9	; 0x09
     b14:	9a 85       	ldd	r25, Y+10	; 0x0a
     b16:	94 83       	std	Z+4, r25	; 0x04
     b18:	83 83       	std	Z+3, r24	; 0x03
  }

  entry->lqi = frame->rx.lqi;
     b1a:	cd 57       	subi	r28, 0x7D	; 125
     b1c:	df 4f       	sbci	r29, 0xFF	; 255
     b1e:	88 81       	ld	r24, Y
     b20:	86 83       	std	Z+6, r24	; 0x06
     b22:	0d c0       	rjmp	.+26     	; 0xb3e <nwkRouteFrameReceived+0x94>
  if (entry)
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
     b24:	83 81       	ldd	r24, Z+3	; 0x03
     b26:	94 81       	ldd	r25, Z+4	; 0x04
     b28:	08 17       	cp	r16, r24
     b2a:	19 07       	cpc	r17, r25
     b2c:	b1 f3       	breq	.-20     	; 0xb1a <nwkRouteFrameReceived+0x70>
     b2e:	96 81       	ldd	r25, Z+6	; 0x06
     b30:	de 01       	movw	r26, r28
     b32:	ad 57       	subi	r26, 0x7D	; 125
     b34:	bf 4f       	sbci	r27, 0xFF	; 255
     b36:	8c 91       	ld	r24, X
     b38:	98 17       	cp	r25, r24
     b3a:	f0 f2       	brcs	.-68     	; 0xaf8 <nwkRouteFrameReceived+0x4e>
     b3c:	ee cf       	rjmp	.-36     	; 0xb1a <nwkRouteFrameReceived+0x70>

  entry->lqi = frame->rx.lqi;
#else
  (void)frame;
#endif
}
     b3e:	df 91       	pop	r29
     b40:	cf 91       	pop	r28
     b42:	1f 91       	pop	r17
     b44:	0f 91       	pop	r16
     b46:	08 95       	ret

00000b48 <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
     b48:	cf 93       	push	r28
     b4a:	df 93       	push	r29
     b4c:	fc 01       	movw	r30, r24
  NWK_RouteTableEntry_t *entry;

  if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr)
     b4e:	87 85       	ldd	r24, Z+15	; 0x0f
     b50:	90 89       	ldd	r25, Z+16	; 0x10
     b52:	8f 3f       	cpi	r24, 0xFF	; 255
     b54:	2f ef       	ldi	r18, 0xFF	; 255
     b56:	92 07       	cpc	r25, r18
     b58:	d9 f1       	breq	.+118    	; 0xbd0 <nwkRouteFrameSent+0x88>
     b5a:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(frame->header.nwkDstAddr, frame->header.nwkFcf.multicast);
     b5c:	63 85       	ldd	r22, Z+11	; 0x0b
     b5e:	63 fb       	bst	r22, 3
     b60:	66 27       	eor	r22, r22
     b62:	60 f9       	bld	r22, 0
     b64:	35 df       	rcall	.-406    	; 0x9d0 <NWK_RouteFindEntry>
     b66:	dc 01       	movw	r26, r24

  if (NULL == entry || entry->fixed)
     b68:	89 2b       	or	r24, r25
     b6a:	91 f1       	breq	.+100    	; 0xbd0 <nwkRouteFrameSent+0x88>
     b6c:	8c 91       	ld	r24, X
     b6e:	80 fd       	sbrc	r24, 0
     b70:	2f c0       	rjmp	.+94     	; 0xbd0 <nwkRouteFrameSent+0x88>
    return;

  if (NWK_SUCCESS_STATUS == frame->tx.status)
     b72:	fe 01       	movw	r30, r28
     b74:	ed 57       	subi	r30, 0x7D	; 125
     b76:	ff 4f       	sbci	r31, 0xFF	; 255
     b78:	80 81       	ld	r24, Z
     b7a:	81 11       	cpse	r24, r1
     b7c:	19 c0       	rjmp	.+50     	; 0xbb0 <nwkRouteFrameSent+0x68>
  {
    entry->score = NWK_ROUTE_DEFAULT_SCORE;
     b7e:	8c 91       	ld	r24, X
     b80:	8f 70       	andi	r24, 0x0F	; 15
     b82:	80 63       	ori	r24, 0x30	; 48
     b84:	8c 93       	st	X, r24

    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
     b86:	15 96       	adiw	r26, 0x05	; 5
     b88:	8c 91       	ld	r24, X
     b8a:	15 97       	sbiw	r26, 0x05	; 5
     b8c:	8f 5f       	subi	r24, 0xFF	; 255
     b8e:	15 96       	adiw	r26, 0x05	; 5
     b90:	8c 93       	st	X, r24
     b92:	8f 3f       	cpi	r24, 0xFF	; 255
     b94:	e9 f4       	brne	.+58     	; 0xbd0 <nwkRouteFrameSent+0x88>
     b96:	ed e4       	ldi	r30, 0x4D	; 77
     b98:	f6 e1       	ldi	r31, 0x16	; 22
     b9a:	29 e0       	ldi	r18, 0x09	; 9
     b9c:	39 e1       	ldi	r19, 0x19	; 25
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
     b9e:	80 81       	ld	r24, Z
     ba0:	86 95       	lsr	r24
     ba2:	8f 5f       	subi	r24, 0xFF	; 255
     ba4:	80 83       	st	Z, r24
     ba6:	37 96       	adiw	r30, 0x07	; 7

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
     ba8:	e2 17       	cp	r30, r18
     baa:	f3 07       	cpc	r31, r19
     bac:	c1 f7       	brne	.-16     	; 0xb9e <nwkRouteFrameSent+0x56>
     bae:	10 c0       	rjmp	.+32     	; 0xbd0 <nwkRouteFrameSent+0x88>
    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
      nwkRouteNormalizeRanks();
  }
  else
  {
    if (0 == --entry->score)
     bb0:	9c 91       	ld	r25, X
     bb2:	89 2f       	mov	r24, r25
     bb4:	82 95       	swap	r24
     bb6:	8f 70       	andi	r24, 0x0F	; 15
     bb8:	81 5f       	subi	r24, 0xF1	; 241
     bba:	8f 70       	andi	r24, 0x0F	; 15
     bbc:	28 2f       	mov	r18, r24
     bbe:	22 95       	swap	r18
     bc0:	20 7f       	andi	r18, 0xF0	; 240
     bc2:	9f 70       	andi	r25, 0x0F	; 15
     bc4:	92 2b       	or	r25, r18
     bc6:	9c 93       	st	X, r25
     bc8:	81 11       	cpse	r24, r1
     bca:	02 c0       	rjmp	.+4      	; 0xbd0 <nwkRouteFrameSent+0x88>
      NWK_RouteFreeEntry(entry);
     bcc:	cd 01       	movw	r24, r26
     bce:	54 df       	rcall	.-344    	; 0xa78 <NWK_RouteFreeEntry>
  }
}
     bd0:	df 91       	pop	r29
     bd2:	cf 91       	pop	r28
     bd4:	08 95       	ret

00000bd6 <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
     bd6:	cf 93       	push	r28
     bd8:	df 93       	push	r29
     bda:	fc 01       	movw	r30, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr)
     bdc:	87 85       	ldd	r24, Z+15	; 0x0f
     bde:	90 89       	ldd	r25, Z+16	; 0x10
     be0:	8f 3f       	cpi	r24, 0xFF	; 255
     be2:	2f ef       	ldi	r18, 0xFF	; 255
     be4:	92 07       	cpc	r25, r18
     be6:	29 f4       	brne	.+10     	; 0xbf2 <nwkRoutePrepareTx+0x1c>
  {
    header->macDstAddr = NWK_BROADCAST_ADDR;
     be8:	8f ef       	ldi	r24, 0xFF	; 255
     bea:	9f ef       	ldi	r25, 0xFF	; 255
     bec:	90 87       	std	Z+8, r25	; 0x08
     bee:	87 83       	std	Z+7, r24	; 0x07
     bf0:	0e c0       	rjmp	.+28     	; 0xc0e <nwkRoutePrepareTx+0x38>
  }

  else if (header->nwkFcf.linkLocal)
     bf2:	23 85       	ldd	r18, Z+11	; 0x0b
     bf4:	22 ff       	sbrs	r18, 2
     bf6:	03 c0       	rjmp	.+6      	; 0xbfe <nwkRoutePrepareTx+0x28>
  {
    header->macDstAddr = header->nwkDstAddr;
     bf8:	90 87       	std	Z+8, r25	; 0x08
     bfa:	87 83       	std	Z+7, r24	; 0x07
     bfc:	08 c0       	rjmp	.+16     	; 0xc0e <nwkRoutePrepareTx+0x38>
     bfe:	ef 01       	movw	r28, r30
  }
#endif

  else
  {
    header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast);
     c00:	63 85       	ldd	r22, Z+11	; 0x0b
     c02:	63 fb       	bst	r22, 3
     c04:	66 27       	eor	r22, r22
     c06:	60 f9       	bld	r22, 0
     c08:	41 df       	rcall	.-382    	; 0xa8c <NWK_RouteNextHop>
     c0a:	98 87       	std	Y+8, r25	; 0x08
     c0c:	8f 83       	std	Y+7, r24	; 0x07
  #ifdef NWK_ENABLE_ROUTE_DISCOVERY
    if (NWK_ROUTE_UNKNOWN == header->macDstAddr)
      nwkRouteDiscoveryRequest(frame);
  #endif
  }
}
     c0e:	df 91       	pop	r29
     c10:	cf 91       	pop	r28
     c12:	08 95       	ret

00000c14 <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
     c14:	af 92       	push	r10
     c16:	bf 92       	push	r11
     c18:	cf 92       	push	r12
     c1a:	df 92       	push	r13
     c1c:	ef 92       	push	r14
     c1e:	ff 92       	push	r15
     c20:	1f 93       	push	r17
     c22:	cf 93       	push	r28
     c24:	df 93       	push	r29
     c26:	ec 01       	movw	r28, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_ROUTE_UNKNOWN != NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast))
     c28:	1b 85       	ldd	r17, Y+11	; 0x0b
     c2a:	13 fb       	bst	r17, 3
     c2c:	11 27       	eor	r17, r17
     c2e:	10 f9       	bld	r17, 0
     c30:	cf 84       	ldd	r12, Y+15	; 0x0f
     c32:	d8 88       	ldd	r13, Y+16	; 0x10
     c34:	61 2f       	mov	r22, r17
     c36:	c6 01       	movw	r24, r12
     c38:	29 df       	rcall	.-430    	; 0xa8c <NWK_RouteNextHop>
     c3a:	01 96       	adiw	r24, 0x01	; 1
     c3c:	59 f0       	breq	.+22     	; 0xc54 <nwkRouteFrame+0x40>
  {
    frame->tx.confirm = NULL;
     c3e:	fe 01       	movw	r30, r28
     c40:	e9 57       	subi	r30, 0x79	; 121
     c42:	ff 4f       	sbci	r31, 0xFF	; 255
     c44:	11 82       	std	Z+1, r1	; 0x01
     c46:	10 82       	st	Z, r1
    frame->tx.control = NWK_TX_CONTROL_ROUTING;
     c48:	31 97       	sbiw	r30, 0x01	; 1
     c4a:	82 e0       	ldi	r24, 0x02	; 2
     c4c:	80 83       	st	Z, r24
    nwkTxFrame(frame);
     c4e:	ce 01       	movw	r24, r28
     c50:	6e d3       	rcall	.+1756   	; 0x132e <nwkTxFrame>
     c52:	22 c0       	rjmp	.+68     	; 0xc98 <nwkRouteFrame+0x84>
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
     c54:	ad 84       	ldd	r10, Y+13	; 0x0d
static void nwkRouteSendRouteError(uint16_t src, uint16_t dst, uint8_t multicast)
{
  NwkFrame_t *frame;
  NwkCommandRouteError_t *command;

  if (NULL == (frame = nwkFrameAlloc()))
     c56:	be 84       	ldd	r11, Y+14	; 0x0e
     c58:	1f de       	rcall	.-962    	; 0x898 <nwkFrameAlloc>
     c5a:	7c 01       	movw	r14, r24
     c5c:	00 97       	sbiw	r24, 0x00	; 0
    return;

  nwkFrameCommandInit(frame);
     c5e:	d1 f0       	breq	.+52     	; 0xc94 <nwkRouteFrame+0x80>
     c60:	83 de       	rcall	.-762    	; 0x968 <nwkFrameCommandInit>

  frame->size += sizeof(NwkCommandRouteError_t);
     c62:	f7 01       	movw	r30, r14
     c64:	81 81       	ldd	r24, Z+1	; 0x01
     c66:	8a 5f       	subi	r24, 0xFA	; 250
     c68:	81 83       	std	Z+1, r24	; 0x01
  frame->tx.confirm = NULL;
     c6a:	e9 57       	subi	r30, 0x79	; 121
     c6c:	ff 4f       	sbci	r31, 0xFF	; 255
     c6e:	11 82       	std	Z+1, r1	; 0x01
     c70:	10 82       	st	Z, r1

  frame->header.nwkDstAddr = src;
     c72:	f7 01       	movw	r30, r14
     c74:	b0 8a       	std	Z+16, r11	; 0x10
     c76:	a7 86       	std	Z+15, r10	; 0x0f

  command = (NwkCommandRouteError_t *)frame->payload;
     c78:	ef 57       	subi	r30, 0x7F	; 127
     c7a:	ff 4f       	sbci	r31, 0xFF	; 255
     c7c:	01 90       	ld	r0, Z+
     c7e:	f0 81       	ld	r31, Z
     c80:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ROUTE_ERROR;
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	80 83       	st	Z, r24
  command->srcAddr = src;
     c86:	b2 82       	std	Z+2, r11	; 0x02
     c88:	a1 82       	std	Z+1, r10	; 0x01
  command->dstAddr = dst;
     c8a:	d4 82       	std	Z+4, r13	; 0x04
  command->multicast = multicast;

  nwkTxFrame(frame);
     c8c:	c3 82       	std	Z+3, r12	; 0x03
     c8e:	15 83       	std	Z+5, r17	; 0x05
     c90:	c7 01       	movw	r24, r14
    nwkTxFrame(frame);
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
    nwkFrameFree(frame);
     c92:	4d d3       	rcall	.+1690   	; 0x132e <nwkTxFrame>
     c94:	ce 01       	movw	r24, r28
     c96:	39 de       	rcall	.-910    	; 0x90a <nwkFrameFree>
  }
}
     c98:	df 91       	pop	r29
     c9a:	cf 91       	pop	r28
     c9c:	1f 91       	pop	r17
     c9e:	ff 90       	pop	r15
     ca0:	ef 90       	pop	r14
     ca2:	df 90       	pop	r13
     ca4:	cf 90       	pop	r12
     ca6:	bf 90       	pop	r11
     ca8:	af 90       	pop	r10
     caa:	08 95       	ret

00000cac <nwkRouteErrorReceived>:
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

  if (sizeof(NwkCommandRouteError_t) != ind->size)
     cac:	fc 01       	movw	r30, r24
     cae:	21 85       	ldd	r18, Z+9	; 0x09
     cb0:	26 30       	cpi	r18, 0x06	; 6
     cb2:	49 f4       	brne	.+18     	; 0xcc6 <nwkRouteErrorReceived+0x1a>

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
     cb4:	07 80       	ldd	r0, Z+7	; 0x07
     cb6:	f0 85       	ldd	r31, Z+8	; 0x08
     cb8:	e0 2d       	mov	r30, r0

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    return false;

  nwkRouteRemove(command->dstAddr, command->multicast);
     cba:	65 81       	ldd	r22, Z+5	; 0x05
     cbc:	83 81       	ldd	r24, Z+3	; 0x03
     cbe:	94 81       	ldd	r25, Z+4	; 0x04
     cc0:	ef de       	rcall	.-546    	; 0xaa0 <nwkRouteRemove>

  return true;
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	08 95       	ret
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    return false;
     cc6:	80 e0       	ldi	r24, 0x00	; 0

  nwkRouteRemove(command->dstAddr, command->multicast);

  return true;
}
     cc8:	08 95       	ret

00000cca <nwkRxServiceDataInd>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetAckControl(uint8_t control)
{
  nwkRxAckControl = control;
     cca:	dc 01       	movw	r26, r24
     ccc:	19 96       	adiw	r26, 0x09	; 9
     cce:	2c 91       	ld	r18, X
     cd0:	19 97       	sbiw	r26, 0x09	; 9
     cd2:	22 23       	and	r18, r18
     cd4:	71 f0       	breq	.+28     	; 0xcf2 <nwkRxServiceDataInd+0x28>
     cd6:	17 96       	adiw	r26, 0x07	; 7
     cd8:	ed 91       	ld	r30, X+
     cda:	fc 91       	ld	r31, X
     cdc:	18 97       	sbiw	r26, 0x08	; 8
     cde:	20 81       	ld	r18, Z
     ce0:	22 23       	and	r18, r18
     ce2:	19 f0       	breq	.+6      	; 0xcea <nwkRxServiceDataInd+0x20>
     ce4:	21 30       	cpi	r18, 0x01	; 1
     ce6:	19 f0       	breq	.+6      	; 0xcee <nwkRxServiceDataInd+0x24>
     ce8:	06 c0       	rjmp	.+12     	; 0xcf6 <nwkRxServiceDataInd+0x2c>
     cea:	b2 c3       	rjmp	.+1892   	; 0x1450 <nwkTxAckReceived>
     cec:	08 95       	ret
     cee:	de cf       	rjmp	.-68     	; 0xcac <nwkRouteErrorReceived>
     cf0:	08 95       	ret
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	08 95       	ret
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	08 95       	ret

00000cfa <nwkRxDuplicateRejectionTimerHandler>:
     cfa:	bc 01       	movw	r22, r24
     cfc:	e6 e1       	ldi	r30, 0x16	; 22
     cfe:	f9 e1       	ldi	r31, 0x19	; 25
     d00:	28 e4       	ldi	r18, 0x48	; 72
     d02:	39 e1       	ldi	r19, 0x19	; 25
     d04:	40 e0       	ldi	r20, 0x00	; 0
     d06:	51 e0       	ldi	r21, 0x01	; 1
     d08:	90 81       	ld	r25, Z
     d0a:	99 23       	and	r25, r25
     d0c:	19 f0       	breq	.+6      	; 0xd14 <nwkRxDuplicateRejectionTimerHandler+0x1a>
     d0e:	91 50       	subi	r25, 0x01	; 1
     d10:	90 83       	st	Z, r25
     d12:	45 2f       	mov	r20, r21
     d14:	35 96       	adiw	r30, 0x05	; 5
     d16:	e2 17       	cp	r30, r18
     d18:	f3 07       	cpc	r31, r19
     d1a:	b1 f7       	brne	.-20     	; 0xd08 <nwkRxDuplicateRejectionTimerHandler+0xe>
     d1c:	44 23       	and	r20, r20
     d1e:	11 f0       	breq	.+4      	; 0xd24 <nwkRxDuplicateRejectionTimerHandler+0x2a>
     d20:	cb 01       	movw	r24, r22
     d22:	6d c6       	rjmp	.+3290   	; 0x19fe <SYS_TimerStart>
     d24:	08 95       	ret

00000d26 <nwkRxInit>:
     d26:	e6 e1       	ldi	r30, 0x16	; 22
     d28:	f9 e1       	ldi	r31, 0x19	; 25
     d2a:	88 e4       	ldi	r24, 0x48	; 72
     d2c:	99 e1       	ldi	r25, 0x19	; 25
     d2e:	10 82       	st	Z, r1
     d30:	35 96       	adiw	r30, 0x05	; 5
     d32:	e8 17       	cp	r30, r24
     d34:	f9 07       	cpc	r31, r25
     d36:	d9 f7       	brne	.-10     	; 0xd2e <nwkRxInit+0x8>
     d38:	e4 e0       	ldi	r30, 0x04	; 4
     d3a:	f9 e1       	ldi	r31, 0x19	; 25
     d3c:	84 e6       	ldi	r24, 0x64	; 100
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	a0 e0       	ldi	r26, 0x00	; 0
     d42:	b0 e0       	ldi	r27, 0x00	; 0
     d44:	86 83       	std	Z+6, r24	; 0x06
     d46:	97 83       	std	Z+7, r25	; 0x07
     d48:	a0 87       	std	Z+8, r26	; 0x08
     d4a:	b1 87       	std	Z+9, r27	; 0x09
     d4c:	12 86       	std	Z+10, r1	; 0x0a
     d4e:	8d e7       	ldi	r24, 0x7D	; 125
     d50:	96 e0       	ldi	r25, 0x06	; 6
     d52:	94 87       	std	Z+12, r25	; 0x0c
     d54:	83 87       	std	Z+11, r24	; 0x0b
     d56:	65 e6       	ldi	r22, 0x65	; 101
     d58:	76 e0       	ldi	r23, 0x06	; 6
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	96 cc       	rjmp	.-1748   	; 0x68a <NWK_OpenEndpoint>
     d5e:	08 95       	ret

00000d60 <PHY_DataInd>:
     d60:	cf 93       	push	r28
     d62:	df 93       	push	r29
     d64:	dc 01       	movw	r26, r24
     d66:	ed 91       	ld	r30, X+
     d68:	fc 91       	ld	r31, X
     d6a:	11 97       	sbiw	r26, 0x01	; 1
     d6c:	21 81       	ldd	r18, Z+1	; 0x01
     d6e:	28 38       	cpi	r18, 0x88	; 136
     d70:	f1 f4       	brne	.+60     	; 0xdae <PHY_DataInd+0x4e>
     d72:	20 81       	ld	r18, Z
     d74:	2f 7d       	andi	r18, 0xDF	; 223
     d76:	21 34       	cpi	r18, 0x41	; 65
     d78:	d1 f4       	brne	.+52     	; 0xdae <PHY_DataInd+0x4e>
     d7a:	12 96       	adiw	r26, 0x02	; 2
     d7c:	2c 91       	ld	r18, X
     d7e:	20 31       	cpi	r18, 0x10	; 16
     d80:	b0 f0       	brcs	.+44     	; 0xdae <PHY_DataInd+0x4e>
     d82:	ec 01       	movw	r28, r24
     d84:	89 dd       	rcall	.-1262   	; 0x898 <nwkFrameAlloc>
     d86:	00 97       	sbiw	r24, 0x00	; 0
     d88:	91 f0       	breq	.+36     	; 0xdae <PHY_DataInd+0x4e>
     d8a:	20 e2       	ldi	r18, 0x20	; 32
     d8c:	fc 01       	movw	r30, r24
     d8e:	20 83       	st	Z, r18
     d90:	2a 81       	ldd	r18, Y+2	; 0x02
     d92:	21 83       	std	Z+1, r18	; 0x01
     d94:	2b 81       	ldd	r18, Y+3	; 0x03
     d96:	ed 57       	subi	r30, 0x7D	; 125
     d98:	ff 4f       	sbci	r31, 0xFF	; 255
     d9a:	20 83       	st	Z, r18
     d9c:	2c 81       	ldd	r18, Y+4	; 0x04
     d9e:	31 96       	adiw	r30, 0x01	; 1
     da0:	20 83       	st	Z, r18
     da2:	4a 81       	ldd	r20, Y+2	; 0x02
     da4:	50 e0       	ldi	r21, 0x00	; 0
     da6:	68 81       	ld	r22, Y
     da8:	79 81       	ldd	r23, Y+1	; 0x01
     daa:	02 96       	adiw	r24, 0x02	; 2
     dac:	15 d7       	rcall	.+3626   	; 0x1bd8 <memcpy>
     dae:	df 91       	pop	r29
     db0:	cf 91       	pop	r28
     db2:	08 95       	ret

00000db4 <nwkRxTaskHandler>:

/*************************************************************************//**
  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
     db4:	2f 92       	push	r2
     db6:	3f 92       	push	r3
     db8:	4f 92       	push	r4
     dba:	5f 92       	push	r5
     dbc:	6f 92       	push	r6
     dbe:	7f 92       	push	r7
     dc0:	8f 92       	push	r8
     dc2:	9f 92       	push	r9
     dc4:	af 92       	push	r10
     dc6:	bf 92       	push	r11
     dc8:	cf 92       	push	r12
     dca:	df 92       	push	r13
     dcc:	ef 92       	push	r14
     dce:	ff 92       	push	r15
     dd0:	0f 93       	push	r16
     dd2:	1f 93       	push	r17
     dd4:	cf 93       	push	r28
     dd6:	df 93       	push	r29
     dd8:	cd b7       	in	r28, 0x3d	; 61
     dda:	de b7       	in	r29, 0x3e	; 62
     ddc:	2c 97       	sbiw	r28, 0x0c	; 12
     dde:	0f b6       	in	r0, 0x3f	; 63
     de0:	f8 94       	cli
     de2:	de bf       	out	0x3e, r29	; 62
     de4:	0f be       	out	0x3f, r0	; 63
     de6:	cd bf       	out	0x3d, r28	; 61
  NwkFrame_t *frame = NULL;
     de8:	00 e0       	ldi	r16, 0x00	; 0
     dea:	10 e0       	ldi	r17, 0x00	; 0
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
     dec:	0f 2e       	mov	r0, r31
     dee:	f4 e2       	ldi	r31, 0x24	; 36
     df0:	bf 2e       	mov	r11, r31
     df2:	f0 2d       	mov	r31, r0
    ack = true;

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
     df4:	0f 2e       	mov	r0, r31
     df6:	f7 ee       	ldi	r31, 0xE7	; 231
     df8:	ef 2e       	mov	r14, r31
     dfa:	f9 e1       	ldi	r31, 0x19	; 25
     dfc:	ff 2e       	mov	r15, r31
     dfe:	f0 2d       	mov	r31, r0
    ack = false;

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
      nwkIb.addr == frame->header.nwkDstAddr &&
      0 == frame->header.nwkFcf.multicast)
    ack = true;
     e00:	55 24       	eor	r5, r5
     e02:	53 94       	inc	r5
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
     e04:	68 94       	set
     e06:	aa 24       	eor	r10, r10
     e08:	a4 f8       	bld	r10, 4
  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
     e0a:	68 94       	set
     e0c:	77 24       	eor	r7, r7
     e0e:	73 f8       	bld	r7, 3

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
     e10:	68 94       	set
     e12:	66 24       	eor	r6, r6
     e14:	62 f8       	bld	r6, 2
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;
     e16:	31 2c       	mov	r3, r1
     e18:	21 2c       	mov	r2, r1
    return true;

  freeEntry->src = header->nwkSrcAddr;
  freeEntry->seq = header->nwkSeq;
  freeEntry->mask = 1;
  freeEntry->ttl = DUPLICATE_REJECTION_TTL;
     e1a:	0f 2e       	mov	r0, r31
     e1c:	ff e1       	ldi	r31, 0x1F	; 31
     e1e:	4f 2e       	mov	r4, r31
     e20:	f0 2d       	mov	r31, r0
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
        #endif
          return true;
        }

        entry->mask |= (1 << diff);
     e22:	cc 24       	eor	r12, r12
     e24:	c3 94       	inc	r12
     e26:	d1 2c       	mov	r13, r1
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
     e28:	da c1       	rjmp	.+948    	; 0x11de <nwkRxTaskHandler+0x42a>
  {
    switch (frame->state)
     e2a:	d8 01       	movw	r26, r16
     e2c:	8c 91       	ld	r24, X
     e2e:	82 32       	cpi	r24, 0x22	; 34
     e30:	09 f4       	brne	.+2      	; 0xe34 <nwkRxTaskHandler+0x80>
     e32:	05 c1       	rjmp	.+522    	; 0x103e <nwkRxTaskHandler+0x28a>
     e34:	18 f4       	brcc	.+6      	; 0xe3c <nwkRxTaskHandler+0x88>
     e36:	80 32       	cpi	r24, 0x20	; 32
     e38:	41 f0       	breq	.+16     	; 0xe4a <nwkRxTaskHandler+0x96>
     e3a:	d1 c1       	rjmp	.+930    	; 0x11de <nwkRxTaskHandler+0x42a>
     e3c:	83 32       	cpi	r24, 0x23	; 35
     e3e:	09 f4       	brne	.+2      	; 0xe42 <nwkRxTaskHandler+0x8e>
     e40:	c9 c1       	rjmp	.+914    	; 0x11d4 <nwkRxTaskHandler+0x420>
     e42:	84 32       	cpi	r24, 0x24	; 36
     e44:	09 f4       	brne	.+2      	; 0xe48 <nwkRxTaskHandler+0x94>
     e46:	c9 c1       	rjmp	.+914    	; 0x11da <nwkRxTaskHandler+0x426>
     e48:	ca c1       	rjmp	.+916    	; 0x11de <nwkRxTaskHandler+0x42a>
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;

  frame->state = NWK_RX_STATE_FINISH;
     e4a:	f8 01       	movw	r30, r16
     e4c:	b0 82       	st	Z, r11

#ifndef NWK_ENABLE_SECURITY
  if (header->nwkFcf.security)
     e4e:	83 85       	ldd	r24, Z+11	; 0x0b

#ifdef NWK_ENABLE_MULTICAST
  if (header->nwkFcf.multicast && header->nwkFcf.ackRequest)
    return;
#else
  if (header->nwkFcf.multicast)
     e50:	98 2f       	mov	r25, r24
     e52:	9a 70       	andi	r25, 0x0A	; 10
     e54:	09 f0       	breq	.+2      	; 0xe58 <nwkRxTaskHandler+0xa4>
     e56:	c3 c1       	rjmp	.+902    	; 0x11de <nwkRxTaskHandler+0x42a>
    return;
#endif

  if (NWK_BROADCAST_PANID == header->macDstPanId)
     e58:	25 81       	ldd	r18, Z+5	; 0x05
     e5a:	36 81       	ldd	r19, Z+6	; 0x06
     e5c:	2f 3f       	cpi	r18, 0xFF	; 255
     e5e:	3f 4f       	sbci	r19, 0xFF	; 255
     e60:	91 f4       	brne	.+36     	; 0xe86 <nwkRxTaskHandler+0xd2>
  {
    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
     e62:	d8 01       	movw	r26, r16
     e64:	1f 96       	adiw	r26, 0x0f	; 15
     e66:	8d 91       	ld	r24, X+
     e68:	9c 91       	ld	r25, X
     e6a:	50 97       	sbiw	r26, 0x10	; 16
     e6c:	f7 01       	movw	r30, r14
     e6e:	20 81       	ld	r18, Z
     e70:	31 81       	ldd	r19, Z+1	; 0x01
     e72:	28 17       	cp	r18, r24
     e74:	39 07       	cpc	r19, r25
     e76:	19 f0       	breq	.+6      	; 0xe7e <nwkRxTaskHandler+0xca>
     e78:	01 96       	adiw	r24, 0x01	; 1
     e7a:	09 f0       	breq	.+2      	; 0xe7e <nwkRxTaskHandler+0xca>
     e7c:	b0 c1       	rjmp	.+864    	; 0x11de <nwkRxTaskHandler+0x42a>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
     e7e:	e2 e2       	ldi	r30, 0x22	; 34
     e80:	d8 01       	movw	r26, r16
     e82:	ec 93       	st	X, r30
     e84:	ac c1       	rjmp	.+856    	; 0x11de <nwkRxTaskHandler+0x42a>
#ifdef NWK_ENABLE_ADDRESS_FILTER
  if (!NWK_FilterAddress(header->macSrcAddr, &frame->rx.lqi))
    return;
#endif

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr && header->nwkFcf.ackRequest)
     e86:	d8 01       	movw	r26, r16
     e88:	1f 96       	adiw	r26, 0x0f	; 15
     e8a:	2d 91       	ld	r18, X+
     e8c:	3c 91       	ld	r19, X
     e8e:	50 97       	sbiw	r26, 0x10	; 16
     e90:	2f 3f       	cpi	r18, 0xFF	; 255
     e92:	3f 4f       	sbci	r19, 0xFF	; 255
     e94:	11 f4       	brne	.+4      	; 0xe9a <nwkRxTaskHandler+0xe6>
     e96:	80 fd       	sbrc	r24, 0
     e98:	a2 c1       	rjmp	.+836    	; 0x11de <nwkRxTaskHandler+0x42a>
    return;

  if (nwkIb.addr == header->nwkSrcAddr)
     e9a:	f7 01       	movw	r30, r14
     e9c:	20 81       	ld	r18, Z
     e9e:	31 81       	ldd	r19, Z+1	; 0x01
     ea0:	d8 01       	movw	r26, r16
     ea2:	1d 96       	adiw	r26, 0x0d	; 13
     ea4:	8d 91       	ld	r24, X+
     ea6:	9c 91       	ld	r25, X
     ea8:	1e 97       	sbiw	r26, 0x0e	; 14
     eaa:	28 17       	cp	r18, r24
     eac:	39 07       	cpc	r19, r25
     eae:	09 f4       	brne	.+2      	; 0xeb2 <nwkRxTaskHandler+0xfe>
     eb0:	96 c1       	rjmp	.+812    	; 0x11de <nwkRxTaskHandler+0x42a>
    return;

#ifdef NWK_ENABLE_ROUTING
  nwkRouteFrameReceived(frame);
     eb2:	c8 01       	movw	r24, r16
     eb4:	fa dd       	rcall	.-1036   	; 0xaaa <nwkRouteFrameReceived>
     eb6:	e2 e1       	ldi	r30, 0x12	; 18
     eb8:	f9 e1       	ldi	r31, 0x19	; 25
     eba:	80 e0       	ldi	r24, 0x00	; 0
     ebc:	90 e0       	ldi	r25, 0x00	; 0
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;
     ebe:	83 2c       	mov	r8, r3
     ec0:	92 2c       	mov	r9, r2

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    entry = &nwkRxDuplicateRejectionTable[i];
     ec2:	9c 01       	movw	r18, r24

    if (entry->ttl && header->nwkSrcAddr == entry->src)
     ec4:	44 81       	ldd	r20, Z+4	; 0x04
     ec6:	44 23       	and	r20, r20
     ec8:	09 f4       	brne	.+2      	; 0xecc <nwkRxTaskHandler+0x118>
     eca:	74 c0       	rjmp	.+232    	; 0xfb4 <nwkRxTaskHandler+0x200>
     ecc:	d8 01       	movw	r26, r16
     ece:	1d 96       	adiw	r26, 0x0d	; 13
     ed0:	6d 91       	ld	r22, X+
     ed2:	7c 91       	ld	r23, X
     ed4:	1e 97       	sbiw	r26, 0x0e	; 14
     ed6:	40 81       	ld	r20, Z
     ed8:	51 81       	ldd	r21, Z+1	; 0x01
     eda:	64 17       	cp	r22, r20
     edc:	75 07       	cpc	r23, r21
     ede:	09 f0       	breq	.+2      	; 0xee2 <nwkRxTaskHandler+0x12e>
     ee0:	6a c0       	rjmp	.+212    	; 0xfb6 <nwkRxTaskHandler+0x202>
    {
      uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
     ee2:	1c 96       	adiw	r26, 0x0c	; 12
     ee4:	8c 91       	ld	r24, X
     ee6:	1c 97       	sbiw	r26, 0x0c	; 12
     ee8:	f9 01       	movw	r30, r18
     eea:	ee 0f       	add	r30, r30
     eec:	ff 1f       	adc	r31, r31
     eee:	ee 0f       	add	r30, r30
     ef0:	ff 1f       	adc	r31, r31
     ef2:	e2 0f       	add	r30, r18
     ef4:	f3 1f       	adc	r31, r19
     ef6:	ee 5e       	subi	r30, 0xEE	; 238
     ef8:	f6 4e       	sbci	r31, 0xE6	; 230
     efa:	92 81       	ldd	r25, Z+2	; 0x02
     efc:	98 1b       	sub	r25, r24

      if (diff < 8)
     efe:	98 30       	cpi	r25, 0x08	; 8
     f00:	08 f0       	brcs	.+2      	; 0xf04 <nwkRxTaskHandler+0x150>
     f02:	3e c0       	rjmp	.+124    	; 0xf80 <nwkRxTaskHandler+0x1cc>
      {
        if (entry->mask & (1 << diff))
     f04:	f9 01       	movw	r30, r18
     f06:	ee 0f       	add	r30, r30
     f08:	ff 1f       	adc	r31, r31
     f0a:	ee 0f       	add	r30, r30
     f0c:	ff 1f       	adc	r31, r31
     f0e:	e2 0f       	add	r30, r18
     f10:	f3 1f       	adc	r31, r19
     f12:	ee 5e       	subi	r30, 0xEE	; 238
     f14:	f6 4e       	sbci	r31, 0xE6	; 230
     f16:	83 81       	ldd	r24, Z+3	; 0x03
     f18:	48 2f       	mov	r20, r24
     f1a:	50 e0       	ldi	r21, 0x00	; 0
     f1c:	09 2e       	mov	r0, r25
     f1e:	02 c0       	rjmp	.+4      	; 0xf24 <nwkRxTaskHandler+0x170>
     f20:	55 95       	asr	r21
     f22:	47 95       	ror	r20
     f24:	0a 94       	dec	r0
     f26:	e2 f7       	brpl	.-8      	; 0xf20 <nwkRxTaskHandler+0x16c>
     f28:	40 ff       	sbrs	r20, 0
     f2a:	17 c0       	rjmp	.+46     	; 0xf5a <nwkRxTaskHandler+0x1a6>
        {
        #ifdef NWK_ENABLE_ROUTING
          if (nwkIb.addr == header->macDstAddr)
     f2c:	f7 01       	movw	r30, r14
     f2e:	20 81       	ld	r18, Z
     f30:	31 81       	ldd	r19, Z+1	; 0x01
     f32:	17 96       	adiw	r26, 0x07	; 7
     f34:	8d 91       	ld	r24, X+
     f36:	9c 91       	ld	r25, X
     f38:	18 97       	sbiw	r26, 0x08	; 8
     f3a:	28 17       	cp	r18, r24
     f3c:	39 07       	cpc	r19, r25
     f3e:	09 f0       	breq	.+2      	; 0xf42 <nwkRxTaskHandler+0x18e>
     f40:	4e c1       	rjmp	.+668    	; 0x11de <nwkRxTaskHandler+0x42a>
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
     f42:	1b 96       	adiw	r26, 0x0b	; 11
     f44:	6c 91       	ld	r22, X
     f46:	1b 97       	sbiw	r26, 0x0b	; 11
     f48:	63 fb       	bst	r22, 3
     f4a:	66 27       	eor	r22, r22
     f4c:	60 f9       	bld	r22, 0
     f4e:	1f 96       	adiw	r26, 0x0f	; 15
     f50:	8d 91       	ld	r24, X+
     f52:	9c 91       	ld	r25, X
     f54:	50 97       	sbiw	r26, 0x10	; 16
     f56:	a4 dd       	rcall	.-1208   	; 0xaa0 <nwkRouteRemove>
     f58:	42 c1       	rjmp	.+644    	; 0x11de <nwkRxTaskHandler+0x42a>
        #endif
          return true;
        }

        entry->mask |= (1 << diff);
     f5a:	f9 01       	movw	r30, r18
     f5c:	ee 0f       	add	r30, r30
     f5e:	ff 1f       	adc	r31, r31
     f60:	ee 0f       	add	r30, r30
     f62:	ff 1f       	adc	r31, r31
     f64:	2e 0f       	add	r18, r30
     f66:	3f 1f       	adc	r19, r31
     f68:	f9 01       	movw	r30, r18
     f6a:	ee 5e       	subi	r30, 0xEE	; 238
     f6c:	f6 4e       	sbci	r31, 0xE6	; 230
     f6e:	96 01       	movw	r18, r12
     f70:	02 c0       	rjmp	.+4      	; 0xf76 <nwkRxTaskHandler+0x1c2>
     f72:	22 0f       	add	r18, r18
     f74:	33 1f       	adc	r19, r19
     f76:	9a 95       	dec	r25
     f78:	e2 f7       	brpl	.-8      	; 0xf72 <nwkRxTaskHandler+0x1be>
     f7a:	82 2b       	or	r24, r18
     f7c:	83 83       	std	Z+3, r24	; 0x03
     f7e:	36 c1       	rjmp	.+620    	; 0x11ec <nwkRxTaskHandler+0x438>
      }
      else
      {
        uint8_t shift = -(int8_t)diff;

        entry->seq = header->nwkSeq;
     f80:	f9 01       	movw	r30, r18
     f82:	ee 0f       	add	r30, r30
     f84:	ff 1f       	adc	r31, r31
     f86:	ee 0f       	add	r30, r30
     f88:	ff 1f       	adc	r31, r31
     f8a:	2e 0f       	add	r18, r30
     f8c:	3f 1f       	adc	r19, r31
     f8e:	f9 01       	movw	r30, r18
     f90:	ee 5e       	subi	r30, 0xEE	; 238
     f92:	f6 4e       	sbci	r31, 0xE6	; 230
     f94:	82 83       	std	Z+2, r24	; 0x02
        entry->mask = (entry->mask << shift) | 1;
     f96:	83 81       	ldd	r24, Z+3	; 0x03
     f98:	28 2f       	mov	r18, r24
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	91 95       	neg	r25
     f9e:	a9 01       	movw	r20, r18
     fa0:	02 c0       	rjmp	.+4      	; 0xfa6 <nwkRxTaskHandler+0x1f2>
     fa2:	44 0f       	add	r20, r20
     fa4:	55 1f       	adc	r21, r21
     fa6:	9a 95       	dec	r25
     fa8:	e2 f7       	brpl	.-8      	; 0xfa2 <nwkRxTaskHandler+0x1ee>
     faa:	ca 01       	movw	r24, r20
     fac:	81 60       	ori	r24, 0x01	; 1
     fae:	83 83       	std	Z+3, r24	; 0x03
        entry->ttl = DUPLICATE_REJECTION_TTL;
     fb0:	44 82       	std	Z+4, r4	; 0x04
     fb2:	1c c1       	rjmp	.+568    	; 0x11ec <nwkRxTaskHandler+0x438>
        return false;
      }
    }

    if (0 == entry->ttl)
      freeEntry = entry;
     fb4:	4f 01       	movw	r8, r30
     fb6:	01 96       	adiw	r24, 0x01	; 1
     fb8:	35 96       	adiw	r30, 0x05	; 5
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
     fba:	8a 30       	cpi	r24, 0x0A	; 10
     fbc:	91 05       	cpc	r25, r1
     fbe:	09 f0       	breq	.+2      	; 0xfc2 <nwkRxTaskHandler+0x20e>
     fc0:	80 cf       	rjmp	.-256    	; 0xec2 <nwkRxTaskHandler+0x10e>

    if (0 == entry->ttl)
      freeEntry = entry;
  }

  if (NULL == freeEntry)
     fc2:	81 14       	cp	r8, r1
     fc4:	91 04       	cpc	r9, r1
     fc6:	09 f4       	brne	.+2      	; 0xfca <nwkRxTaskHandler+0x216>
     fc8:	0a c1       	rjmp	.+532    	; 0x11de <nwkRxTaskHandler+0x42a>
    return true;

  freeEntry->src = header->nwkSrcAddr;
     fca:	d8 01       	movw	r26, r16
     fcc:	1d 96       	adiw	r26, 0x0d	; 13
     fce:	8d 91       	ld	r24, X+
     fd0:	9c 91       	ld	r25, X
     fd2:	1e 97       	sbiw	r26, 0x0e	; 14
     fd4:	f4 01       	movw	r30, r8
     fd6:	91 83       	std	Z+1, r25	; 0x01
     fd8:	80 83       	st	Z, r24
  freeEntry->seq = header->nwkSeq;
     fda:	1c 96       	adiw	r26, 0x0c	; 12
     fdc:	8c 91       	ld	r24, X
     fde:	82 83       	std	Z+2, r24	; 0x02
  freeEntry->mask = 1;
     fe0:	53 82       	std	Z+3, r5	; 0x03
  freeEntry->ttl = DUPLICATE_REJECTION_TTL;
     fe2:	44 82       	std	Z+4, r4	; 0x04

  SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
     fe4:	84 e0       	ldi	r24, 0x04	; 4
     fe6:	99 e1       	ldi	r25, 0x19	; 25
     fe8:	0a d5       	rcall	.+2580   	; 0x19fe <SYS_TimerStart>
     fea:	00 c1       	rjmp	.+512    	; 0x11ec <nwkRxTaskHandler+0x438>
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
     fec:	d7 01       	movw	r26, r14
     fee:	2d 91       	ld	r18, X+
     ff0:	3c 91       	ld	r19, X
     ff2:	f8 01       	movw	r30, r16
     ff4:	87 85       	ldd	r24, Z+15	; 0x0f
     ff6:	90 89       	ldd	r25, Z+16	; 0x10
     ff8:	28 17       	cp	r18, r24
     ffa:	39 07       	cpc	r19, r25
     ffc:	81 f0       	breq	.+32     	; 0x101e <nwkRxTaskHandler+0x26a>
     ffe:	43 85       	ldd	r20, Z+11	; 0x0b
    1000:	42 fd       	sbrc	r20, 2
        0 == header->nwkFcf.linkLocal)
      nwkTxBroadcastFrame(frame);
    1002:	0b c0       	rjmp	.+22     	; 0x101a <nwkRxTaskHandler+0x266>
    1004:	c8 01       	movw	r24, r16
    1006:	e1 d1       	rcall	.+962    	; 0x13ca <nwkTxBroadcastFrame>

    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
    1008:	d7 01       	movw	r26, r14
    100a:	2d 91       	ld	r18, X+
    100c:	3c 91       	ld	r19, X
    100e:	f8 01       	movw	r30, r16
    1010:	87 85       	ldd	r24, Z+15	; 0x0f
    1012:	90 89       	ldd	r25, Z+16	; 0x10
    1014:	28 17       	cp	r18, r24
    1016:	39 07       	cpc	r19, r25
    1018:	11 f0       	breq	.+4      	; 0x101e <nwkRxTaskHandler+0x26a>
    101a:	01 96       	adiw	r24, 0x01	; 1
    101c:	21 f4       	brne	.+8      	; 0x1026 <nwkRxTaskHandler+0x272>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
    101e:	e2 e2       	ldi	r30, 0x22	; 34
    1020:	d8 01       	movw	r26, r16
    1022:	ec 93       	st	X, r30
    1024:	dc c0       	rjmp	.+440    	; 0x11de <nwkRxTaskHandler+0x42a>
    }

  #ifdef NWK_ENABLE_ROUTING
    else if (nwkIb.addr == header->macDstAddr)
    1026:	d8 01       	movw	r26, r16
    1028:	17 96       	adiw	r26, 0x07	; 7
    102a:	8d 91       	ld	r24, X+
    102c:	9c 91       	ld	r25, X
    102e:	18 97       	sbiw	r26, 0x08	; 8
    1030:	82 17       	cp	r24, r18
    1032:	93 07       	cpc	r25, r19
    1034:	09 f0       	breq	.+2      	; 0x1038 <nwkRxTaskHandler+0x284>
    1036:	d3 c0       	rjmp	.+422    	; 0x11de <nwkRxTaskHandler+0x42a>
    {
      frame->state = NWK_RX_STATE_ROUTE;
    1038:	e3 e2       	ldi	r30, 0x23	; 35
    103a:	ec 93       	st	X, r30
    103c:	d0 c0       	rjmp	.+416    	; 0x11de <nwkRxTaskHandler+0x42a>
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
  bool ack;

  nwkRxAckControl = 0;
    103e:	10 92 11 19 	sts	0x1911, r1	; 0x801911 <nwkRxAckControl>
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    1042:	d8 01       	movw	r26, r16
    1044:	51 96       	adiw	r26, 0x11	; 17
    1046:	8c 91       	ld	r24, X
    1048:	51 97       	sbiw	r26, 0x11	; 17
    104a:	82 95       	swap	r24
    104c:	8f 70       	andi	r24, 0x0F	; 15
    104e:	e8 2f       	mov	r30, r24
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	ee 0f       	add	r30, r30
    1054:	ff 1f       	adc	r31, r31
    1056:	e3 51       	subi	r30, 0x13	; 19
    1058:	f6 4e       	sbci	r31, 0xE6	; 230
    105a:	01 90       	ld	r0, Z+
    105c:	f0 81       	ld	r31, Z
    105e:	e0 2d       	mov	r30, r0
    1060:	30 97       	sbiw	r30, 0x00	; 0
    1062:	09 f4       	brne	.+2      	; 0x1066 <nwkRxTaskHandler+0x2b2>
    1064:	60 c0       	rjmp	.+192    	; 0x1126 <nwkRxTaskHandler+0x372>
    return false;

  ind.srcAddr = header->nwkSrcAddr;
    1066:	1d 96       	adiw	r26, 0x0d	; 13
    1068:	2d 91       	ld	r18, X+
    106a:	3c 91       	ld	r19, X
    106c:	1e 97       	sbiw	r26, 0x0e	; 14
    106e:	3a 83       	std	Y+2, r19	; 0x02
    1070:	29 83       	std	Y+1, r18	; 0x01
  ind.dstAddr = header->nwkDstAddr;
    1072:	1f 96       	adiw	r26, 0x0f	; 15
    1074:	4d 91       	ld	r20, X+
    1076:	5c 91       	ld	r21, X
    1078:	50 97       	sbiw	r26, 0x10	; 16
    107a:	5c 83       	std	Y+4, r21	; 0x04
    107c:	4b 83       	std	Y+3, r20	; 0x03
  ind.srcEndpoint = header->nwkSrcEndpoint;
    107e:	51 96       	adiw	r26, 0x11	; 17
    1080:	9c 91       	ld	r25, X
    1082:	51 97       	sbiw	r26, 0x11	; 17
    1084:	9f 70       	andi	r25, 0x0F	; 15
    1086:	9d 83       	std	Y+5, r25	; 0x05
  ind.dstEndpoint = header->nwkDstEndpoint;
    1088:	8e 83       	std	Y+6, r24	; 0x06
  ind.data = frame->payload;
    108a:	af 57       	subi	r26, 0x7F	; 127
    108c:	bf 4f       	sbci	r27, 0xFF	; 255
    108e:	8d 91       	ld	r24, X+
    1090:	9c 91       	ld	r25, X
    1092:	99 87       	std	Y+9, r25	; 0x09
    1094:	88 87       	std	Y+8, r24	; 0x08

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
  return frame->size - (frame->payload - frame->data);
    1096:	b8 01       	movw	r22, r16
    1098:	6e 5f       	subi	r22, 0xFE	; 254
    109a:	7f 4f       	sbci	r23, 0xFF	; 255
  ind.size = nwkFramePayloadSize(frame);
    109c:	86 1b       	sub	r24, r22
    109e:	97 0b       	sbc	r25, r23
    10a0:	d8 01       	movw	r26, r16
    10a2:	11 96       	adiw	r26, 0x01	; 1
    10a4:	9c 91       	ld	r25, X
    10a6:	11 97       	sbiw	r26, 0x01	; 1
    10a8:	98 1b       	sub	r25, r24
    10aa:	9a 87       	std	Y+10, r25	; 0x0a
  ind.lqi = frame->rx.lqi;
    10ac:	ad 57       	subi	r26, 0x7D	; 125
    10ae:	bf 4f       	sbci	r27, 0xFF	; 255
    10b0:	8c 91       	ld	r24, X
    10b2:	8b 87       	std	Y+11, r24	; 0x0b
  ind.rssi = frame->rx.rssi;
    10b4:	11 96       	adiw	r26, 0x01	; 1
    10b6:	8c 91       	ld	r24, X
    10b8:	8c 87       	std	Y+12, r24	; 0x0c

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    10ba:	d8 01       	movw	r26, r16
    10bc:	1b 96       	adiw	r26, 0x0b	; 11
    10be:	9c 91       	ld	r25, X
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
    10c0:	69 2f       	mov	r22, r25
    10c2:	63 70       	andi	r22, 0x03	; 3
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    10c4:	92 fd       	sbrc	r25, 2
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <nwkRxTaskHandler+0x318>
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	01 c0       	rjmp	.+2      	; 0x10ce <nwkRxTaskHandler+0x31a>
    10cc:	80 e2       	ldi	r24, 0x20	; 32
    10ce:	86 2b       	or	r24, r22
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
    10d0:	93 fd       	sbrc	r25, 3
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <nwkRxTaskHandler+0x324>
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	01 c0       	rjmp	.+2      	; 0x10da <nwkRxTaskHandler+0x326>
    10d8:	90 e4       	ldi	r25, 0x40	; 64
    10da:	89 2b       	or	r24, r25
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
    10dc:	4f 3f       	cpi	r20, 0xFF	; 255
    10de:	5f 4f       	sbci	r21, 0xFF	; 255
    10e0:	11 f0       	breq	.+4      	; 0x10e6 <nwkRxTaskHandler+0x332>
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	01 c0       	rjmp	.+2      	; 0x10e8 <nwkRxTaskHandler+0x334>
    10e6:	96 2d       	mov	r25, r6
    10e8:	89 2b       	or	r24, r25
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
    10ea:	d8 01       	movw	r26, r16
    10ec:	19 96       	adiw	r26, 0x09	; 9
    10ee:	4d 91       	ld	r20, X+
    10f0:	5c 91       	ld	r21, X
    10f2:	1a 97       	sbiw	r26, 0x0a	; 10
    10f4:	24 17       	cp	r18, r20
    10f6:	35 07       	cpc	r19, r21
    10f8:	11 f0       	breq	.+4      	; 0x10fe <nwkRxTaskHandler+0x34a>
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	01 c0       	rjmp	.+2      	; 0x1100 <nwkRxTaskHandler+0x34c>
    10fe:	97 2d       	mov	r25, r7
    1100:	89 2b       	or	r24, r25
    1102:	8f 83       	std	Y+7, r24	; 0x07
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    1104:	d8 01       	movw	r26, r16
    1106:	15 96       	adiw	r26, 0x05	; 5
    1108:	2d 91       	ld	r18, X+
    110a:	3c 91       	ld	r19, X
    110c:	16 97       	sbiw	r26, 0x06	; 6
    110e:	2f 3f       	cpi	r18, 0xFF	; 255
    1110:	3f 4f       	sbci	r19, 0xFF	; 255
    1112:	11 f0       	breq	.+4      	; 0x1118 <nwkRxTaskHandler+0x364>
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	01 c0       	rjmp	.+2      	; 0x111a <nwkRxTaskHandler+0x366>
    1118:	9a 2d       	mov	r25, r10
    111a:	89 2b       	or	r24, r25
    111c:	8f 83       	std	Y+7, r24	; 0x07

  return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    111e:	ce 01       	movw	r24, r28
    1120:	01 96       	adiw	r24, 0x01	; 1
    1122:	19 95       	eicall
    1124:	01 c0       	rjmp	.+2      	; 0x1128 <nwkRxTaskHandler+0x374>
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    return false;
    1126:	80 e0       	ldi	r24, 0x00	; 0
  bool ack;

  nwkRxAckControl = 0;
  ack = nwkRxIndicateFrame(frame);
  
  if (0 == frame->header.nwkFcf.ackRequest)
    1128:	f8 01       	movw	r30, r16
    112a:	93 85       	ldd	r25, Z+11	; 0x0b
    112c:	90 ff       	sbrs	r25, 0
    ack = false;
    112e:	80 e0       	ldi	r24, 0x00	; 0

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    1130:	d8 01       	movw	r26, r16
    1132:	17 96       	adiw	r26, 0x07	; 7
    1134:	2d 91       	ld	r18, X+
    1136:	3c 91       	ld	r19, X
    1138:	18 97       	sbiw	r26, 0x08	; 8
    113a:	2f 3f       	cpi	r18, 0xFF	; 255
    113c:	3f 4f       	sbci	r19, 0xFF	; 255
    113e:	69 f4       	brne	.+26     	; 0x115a <nwkRxTaskHandler+0x3a6>
    1140:	f7 01       	movw	r30, r14
    1142:	40 81       	ld	r20, Z
    1144:	51 81       	ldd	r21, Z+1	; 0x01
    1146:	d8 01       	movw	r26, r16
    1148:	1f 96       	adiw	r26, 0x0f	; 15
    114a:	2d 91       	ld	r18, X+
    114c:	3c 91       	ld	r19, X
    114e:	50 97       	sbiw	r26, 0x10	; 16
    1150:	42 17       	cp	r20, r18
    1152:	53 07       	cpc	r21, r19
    1154:	11 f4       	brne	.+4      	; 0x115a <nwkRxTaskHandler+0x3a6>
      nwkIb.addr == frame->header.nwkDstAddr &&
    1156:	93 ff       	sbrs	r25, 3
      0 == frame->header.nwkFcf.multicast)
    ack = true;
    1158:	85 2d       	mov	r24, r5

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    115a:	f8 01       	movw	r30, r16
    115c:	25 81       	ldd	r18, Z+5	; 0x05
    115e:	36 81       	ldd	r19, Z+6	; 0x06
    1160:	2f 3f       	cpi	r18, 0xFF	; 255
    1162:	3f 4f       	sbci	r19, 0xFF	; 255
    1164:	a1 f1       	breq	.+104    	; 0x11ce <nwkRxTaskHandler+0x41a>
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
    1166:	d7 01       	movw	r26, r14
    1168:	2d 91       	ld	r18, X+
    116a:	3c 91       	ld	r19, X
    116c:	2f 3f       	cpi	r18, 0xFF	; 255
    116e:	3f 4f       	sbci	r19, 0xFF	; 255
    ack = false;

  if (ack)
    1170:	71 f1       	breq	.+92     	; 0x11ce <nwkRxTaskHandler+0x41a>
    1172:	88 23       	and	r24, r24
static void nwkRxSendAck(NwkFrame_t *frame)
{
  NwkFrame_t *ack;
  NwkCommandAck_t *command;

  if (NULL == (ack = nwkFrameAlloc()))
    1174:	61 f1       	breq	.+88     	; 0x11ce <nwkRxTaskHandler+0x41a>
    1176:	90 db       	rcall	.-2272   	; 0x898 <nwkFrameAlloc>
    1178:	4c 01       	movw	r8, r24
    117a:	00 97       	sbiw	r24, 0x00	; 0
    return;

  nwkFrameCommandInit(ack);
    117c:	41 f1       	breq	.+80     	; 0x11ce <nwkRxTaskHandler+0x41a>
    117e:	f4 db       	rcall	.-2072   	; 0x968 <nwkFrameCommandInit>

  ack->size += sizeof(NwkCommandAck_t);
    1180:	f4 01       	movw	r30, r8
    1182:	81 81       	ldd	r24, Z+1	; 0x01
    1184:	8d 5f       	subi	r24, 0xFD	; 253
    1186:	81 83       	std	Z+1, r24	; 0x01
  ack->tx.confirm = NULL;
    1188:	e9 57       	subi	r30, 0x79	; 121
    118a:	ff 4f       	sbci	r31, 0xFF	; 255
    118c:	11 82       	std	Z+1, r1	; 0x01
    118e:	10 82       	st	Z, r1

  ack->header.nwkFcf.security = frame->header.nwkFcf.security;
    1190:	d8 01       	movw	r26, r16
    1192:	1b 96       	adiw	r26, 0x0b	; 11
    1194:	8c 91       	ld	r24, X
    1196:	1b 97       	sbiw	r26, 0x0b	; 11
    1198:	86 95       	lsr	r24
    119a:	81 70       	andi	r24, 0x01	; 1
    119c:	f4 01       	movw	r30, r8
    119e:	93 85       	ldd	r25, Z+11	; 0x0b
    11a0:	80 fb       	bst	r24, 0
    11a2:	91 f9       	bld	r25, 1
    11a4:	93 87       	std	Z+11, r25	; 0x0b
  ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
    11a6:	1d 96       	adiw	r26, 0x0d	; 13
    11a8:	8d 91       	ld	r24, X+
    11aa:	9c 91       	ld	r25, X
    11ac:	1e 97       	sbiw	r26, 0x0e	; 14
    11ae:	90 8b       	std	Z+16, r25	; 0x10
    11b0:	87 87       	std	Z+15, r24	; 0x0f

  command = (NwkCommandAck_t *)ack->payload;
    11b2:	ef 57       	subi	r30, 0x7F	; 127
    11b4:	ff 4f       	sbci	r31, 0xFF	; 255
    11b6:	01 90       	ld	r0, Z+
    11b8:	f0 81       	ld	r31, Z
    11ba:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ACK;
    11bc:	10 82       	st	Z, r1
  command->control = nwkRxAckControl;
    11be:	80 91 11 19 	lds	r24, 0x1911	; 0x801911 <nwkRxAckControl>
  command->seq = frame->header.nwkSeq;
    11c2:	82 83       	std	Z+2, r24	; 0x02
    11c4:	1c 96       	adiw	r26, 0x0c	; 12
    11c6:	8c 91       	ld	r24, X

  nwkTxFrame(ack);
    11c8:	81 83       	std	Z+1, r24	; 0x01
    11ca:	c4 01       	movw	r24, r8
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
    11cc:	b0 d0       	rcall	.+352    	; 0x132e <nwkTxFrame>
    11ce:	d8 01       	movw	r26, r16
      } break;

#ifdef NWK_ENABLE_ROUTING
      case NWK_RX_STATE_ROUTE:
      {
        nwkRouteFrame(frame);
    11d0:	bc 92       	st	X, r11
    11d2:	05 c0       	rjmp	.+10     	; 0x11de <nwkRxTaskHandler+0x42a>
    11d4:	c8 01       	movw	r24, r16
      } break;
    11d6:	1e dd       	rcall	.-1476   	; 0xc14 <nwkRouteFrame>
#endif

      case NWK_RX_STATE_FINISH:
      {
        nwkFrameFree(frame);
    11d8:	02 c0       	rjmp	.+4      	; 0x11de <nwkRxTaskHandler+0x42a>
    11da:	c8 01       	movw	r24, r16
    11dc:	96 db       	rcall	.-2260   	; 0x90a <nwkFrameFree>
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    11de:	c8 01       	movw	r24, r16
    11e0:	9e db       	rcall	.-2244   	; 0x91e <nwkFrameNext>
    11e2:	8c 01       	movw	r16, r24
    11e4:	89 2b       	or	r24, r25
    11e6:	09 f0       	breq	.+2      	; 0x11ea <nwkRxTaskHandler+0x436>
    11e8:	20 ce       	rjmp	.-960    	; 0xe2a <nwkRxTaskHandler+0x76>
    11ea:	07 c0       	rjmp	.+14     	; 0x11fa <nwkRxTaskHandler+0x446>
    11ec:	f8 01       	movw	r30, r16
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    11ee:	87 81       	ldd	r24, Z+7	; 0x07
    11f0:	90 85       	ldd	r25, Z+8	; 0x08
    11f2:	01 96       	adiw	r24, 0x01	; 1
    11f4:	09 f0       	breq	.+2      	; 0x11f8 <nwkRxTaskHandler+0x444>
    11f6:	08 cf       	rjmp	.-496    	; 0x1008 <nwkRxTaskHandler+0x254>
    11f8:	f9 ce       	rjmp	.-526    	; 0xfec <nwkRxTaskHandler+0x238>
    11fa:	2c 96       	adiw	r28, 0x0c	; 12
      {
        nwkFrameFree(frame);
      } break;
    }
  }
}
    11fc:	0f b6       	in	r0, 0x3f	; 63
    11fe:	f8 94       	cli
    1200:	de bf       	out	0x3e, r29	; 62
    1202:	0f be       	out	0x3f, r0	; 63
    1204:	cd bf       	out	0x3d, r28	; 61
    1206:	df 91       	pop	r29
    1208:	cf 91       	pop	r28
    120a:	1f 91       	pop	r17
    120c:	0f 91       	pop	r16
    120e:	ff 90       	pop	r15
    1210:	ef 90       	pop	r14
    1212:	df 90       	pop	r13
    1214:	cf 90       	pop	r12
    1216:	bf 90       	pop	r11
    1218:	af 90       	pop	r10
    121a:	9f 90       	pop	r9
    121c:	8f 90       	pop	r8
    121e:	7f 90       	pop	r7
    1220:	6f 90       	pop	r6
    1222:	5f 90       	pop	r5
    1224:	4f 90       	pop	r4
    1226:	3f 90       	pop	r3
    1228:	2f 90       	pop	r2
    122a:	08 95       	ret

0000122c <nwkTxDelayTimerHandler>:
    122c:	ef 92       	push	r14
/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
  frame->tx.status = status;
    122e:	ff 92       	push	r15
    1230:	0f 93       	push	r16
    1232:	1f 93       	push	r17
    1234:	cf 93       	push	r28
    1236:	7c 01       	movw	r14, r24
    1238:	10 e0       	ldi	r17, 0x00	; 0
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	01 e0       	ldi	r16, 0x01	; 1
    1240:	c3 e1       	ldi	r28, 0x13	; 19
    1242:	13 c0       	rjmp	.+38     	; 0x126a <nwkTxDelayTimerHandler+0x3e>
    1244:	fc 01       	movw	r30, r24
    1246:	20 81       	ld	r18, Z
    1248:	21 31       	cpi	r18, 0x11	; 17
    124a:	79 f4       	brne	.+30     	; 0x126a <nwkTxDelayTimerHandler+0x3e>
    124c:	ec 57       	subi	r30, 0x7C	; 124
    124e:	ff 4f       	sbci	r31, 0xFF	; 255
    1250:	20 81       	ld	r18, Z
    1252:	31 81       	ldd	r19, Z+1	; 0x01
    1254:	21 50       	subi	r18, 0x01	; 1
    1256:	31 09       	sbc	r19, r1
    1258:	31 83       	std	Z+1, r19	; 0x01
    125a:	20 83       	st	Z, r18
    125c:	23 2b       	or	r18, r19
    125e:	21 f4       	brne	.+8      	; 0x1268 <nwkTxDelayTimerHandler+0x3c>
    1260:	fc 01       	movw	r30, r24
    1262:	c0 83       	st	Z, r28
    1264:	10 2f       	mov	r17, r16
    1266:	01 c0       	rjmp	.+2      	; 0x126a <nwkTxDelayTimerHandler+0x3e>
    1268:	10 2f       	mov	r17, r16
    126a:	59 db       	rcall	.-2382   	; 0x91e <nwkFrameNext>
    126c:	00 97       	sbiw	r24, 0x00	; 0
    126e:	51 f7       	brne	.-44     	; 0x1244 <nwkTxDelayTimerHandler+0x18>
    1270:	11 23       	and	r17, r17
    1272:	11 f0       	breq	.+4      	; 0x1278 <nwkTxDelayTimerHandler+0x4c>
    1274:	c7 01       	movw	r24, r14
    1276:	c3 d3       	rcall	.+1926   	; 0x19fe <SYS_TimerStart>
    1278:	cf 91       	pop	r28
    127a:	1f 91       	pop	r17
    127c:	0f 91       	pop	r16
    127e:	ff 90       	pop	r15
    1280:	ef 90       	pop	r14
    1282:	08 95       	ret

00001284 <nwkTxAckWaitTimerHandler>:
    1284:	ef 92       	push	r14
    1286:	ff 92       	push	r15
    1288:	0f 93       	push	r16
    128a:	1f 93       	push	r17
    128c:	cf 93       	push	r28
    128e:	df 93       	push	r29
    1290:	7c 01       	movw	r14, r24
    1292:	10 e0       	ldi	r17, 0x00	; 0
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	01 e0       	ldi	r16, 0x01	; 1
    129a:	d7 e1       	ldi	r29, 0x17	; 23
    129c:	c0 e1       	ldi	r28, 0x10	; 16
    129e:	16 c0       	rjmp	.+44     	; 0x12cc <nwkTxAckWaitTimerHandler+0x48>
    12a0:	fc 01       	movw	r30, r24
    12a2:	20 81       	ld	r18, Z
    12a4:	26 31       	cpi	r18, 0x16	; 22
    12a6:	91 f4       	brne	.+36     	; 0x12cc <nwkTxAckWaitTimerHandler+0x48>
    12a8:	ec 57       	subi	r30, 0x7C	; 124
    12aa:	ff 4f       	sbci	r31, 0xFF	; 255
    12ac:	20 81       	ld	r18, Z
    12ae:	31 81       	ldd	r19, Z+1	; 0x01
    12b0:	21 50       	subi	r18, 0x01	; 1
    12b2:	31 09       	sbc	r19, r1
    12b4:	31 83       	std	Z+1, r19	; 0x01
    12b6:	20 83       	st	Z, r18
    12b8:	23 2b       	or	r18, r19
    12ba:	39 f4       	brne	.+14     	; 0x12ca <nwkTxAckWaitTimerHandler+0x46>
    12bc:	fc 01       	movw	r30, r24
    12be:	d0 83       	st	Z, r29
    12c0:	ed 57       	subi	r30, 0x7D	; 125
    12c2:	ff 4f       	sbci	r31, 0xFF	; 255
    12c4:	c0 83       	st	Z, r28
    12c6:	10 2f       	mov	r17, r16
    12c8:	01 c0       	rjmp	.+2      	; 0x12cc <nwkTxAckWaitTimerHandler+0x48>
    12ca:	10 2f       	mov	r17, r16
    12cc:	28 db       	rcall	.-2480   	; 0x91e <nwkFrameNext>
    12ce:	00 97       	sbiw	r24, 0x00	; 0
    12d0:	39 f7       	brne	.-50     	; 0x12a0 <nwkTxAckWaitTimerHandler+0x1c>
    12d2:	11 23       	and	r17, r17
    12d4:	11 f0       	breq	.+4      	; 0x12da <nwkTxAckWaitTimerHandler+0x56>
    12d6:	c7 01       	movw	r24, r14
    12d8:	92 d3       	rcall	.+1828   	; 0x19fe <SYS_TimerStart>
    12da:	df 91       	pop	r29
    12dc:	cf 91       	pop	r28
    12de:	1f 91       	pop	r17
    12e0:	0f 91       	pop	r16
    12e2:	ff 90       	pop	r15
    12e4:	ef 90       	pop	r14
    12e6:	08 95       	ret

000012e8 <nwkTxInit>:
    12e8:	10 92 5f 19 	sts	0x195F, r1	; 0x80195f <nwkTxPhyActiveFrame+0x1>
    12ec:	10 92 5e 19 	sts	0x195E, r1	; 0x80195e <nwkTxPhyActiveFrame>
    12f0:	e1 e5       	ldi	r30, 0x51	; 81
    12f2:	f9 e1       	ldi	r31, 0x19	; 25
    12f4:	82 e3       	ldi	r24, 0x32	; 50
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	a0 e0       	ldi	r26, 0x00	; 0
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	86 83       	std	Z+6, r24	; 0x06
    12fe:	97 83       	std	Z+7, r25	; 0x07
    1300:	a0 87       	std	Z+8, r26	; 0x08
    1302:	b1 87       	std	Z+9, r27	; 0x09
    1304:	12 86       	std	Z+10, r1	; 0x0a
    1306:	82 e4       	ldi	r24, 0x42	; 66
    1308:	99 e0       	ldi	r25, 0x09	; 9
    130a:	94 87       	std	Z+12, r25	; 0x0c
    130c:	83 87       	std	Z+11, r24	; 0x0b
    130e:	e4 e4       	ldi	r30, 0x44	; 68
    1310:	f9 e1       	ldi	r31, 0x19	; 25
    1312:	8a e0       	ldi	r24, 0x0A	; 10
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	a0 e0       	ldi	r26, 0x00	; 0
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	86 83       	std	Z+6, r24	; 0x06
    131c:	97 83       	std	Z+7, r25	; 0x07
    131e:	a0 87       	std	Z+8, r26	; 0x08
    1320:	b1 87       	std	Z+9, r27	; 0x09
    1322:	12 86       	std	Z+10, r1	; 0x0a
    1324:	86 e1       	ldi	r24, 0x16	; 22
    1326:	99 e0       	ldi	r25, 0x09	; 9
    1328:	94 87       	std	Z+12, r25	; 0x0c
    132a:	83 87       	std	Z+11, r24	; 0x0b
    132c:	08 95       	ret

0000132e <nwkTxFrame>:
    132e:	cf 93       	push	r28
    1330:	df 93       	push	r29
    1332:	ec 01       	movw	r28, r24
    1334:	fc 01       	movw	r30, r24
    1336:	ea 57       	subi	r30, 0x7A	; 122
    1338:	ff 4f       	sbci	r31, 0xFF	; 255
    133a:	80 81       	ld	r24, Z
    133c:	81 ff       	sbrs	r24, 1
    133e:	03 c0       	rjmp	.+6      	; 0x1346 <nwkTxFrame+0x18>
    1340:	92 e1       	ldi	r25, 0x12	; 18
    1342:	98 83       	st	Y, r25
    1344:	02 c0       	rjmp	.+4      	; 0x134a <nwkTxFrame+0x1c>
    1346:	92 e1       	ldi	r25, 0x12	; 18
    1348:	98 83       	st	Y, r25
    134a:	fe 01       	movw	r30, r28
    134c:	ed 57       	subi	r30, 0x7D	; 125
    134e:	ff 4f       	sbci	r31, 0xFF	; 255
    1350:	10 82       	st	Z, r1
    1352:	80 ff       	sbrs	r24, 0
    1354:	05 c0       	rjmp	.+10     	; 0x1360 <nwkTxFrame+0x32>
    1356:	2f ef       	ldi	r18, 0xFF	; 255
    1358:	3f ef       	ldi	r19, 0xFF	; 255
    135a:	3e 83       	std	Y+6, r19	; 0x06
    135c:	2d 83       	std	Y+5, r18	; 0x05
    135e:	06 c0       	rjmp	.+12     	; 0x136c <nwkTxFrame+0x3e>
    1360:	20 91 e9 19 	lds	r18, 0x19E9	; 0x8019e9 <nwkIb+0x2>
    1364:	30 91 ea 19 	lds	r19, 0x19EA	; 0x8019ea <nwkIb+0x3>
    1368:	3e 83       	std	Y+6, r19	; 0x06
    136a:	2d 83       	std	Y+5, r18	; 0x05
    136c:	85 70       	andi	r24, 0x05	; 5
    136e:	19 f4       	brne	.+6      	; 0x1376 <nwkTxFrame+0x48>
    1370:	ce 01       	movw	r24, r28
    1372:	31 dc       	rcall	.-1950   	; 0xbd6 <nwkRoutePrepareTx>
    1374:	04 c0       	rjmp	.+8      	; 0x137e <nwkTxFrame+0x50>
    1376:	8f 85       	ldd	r24, Y+15	; 0x0f
    1378:	98 89       	ldd	r25, Y+16	; 0x10
    137a:	98 87       	std	Y+8, r25	; 0x08
    137c:	8f 83       	std	Y+7, r24	; 0x07
    137e:	e7 ee       	ldi	r30, 0xE7	; 231
    1380:	f9 e1       	ldi	r31, 0x19	; 25
    1382:	80 81       	ld	r24, Z
    1384:	91 81       	ldd	r25, Z+1	; 0x01
    1386:	9a 87       	std	Y+10, r25	; 0x0a
    1388:	89 87       	std	Y+9, r24	; 0x09
    138a:	85 81       	ldd	r24, Z+5	; 0x05
    138c:	8f 5f       	subi	r24, 0xFF	; 255
    138e:	85 83       	std	Z+5, r24	; 0x05
    1390:	8c 83       	std	Y+4, r24	; 0x04
    1392:	8f 81       	ldd	r24, Y+7	; 0x07
    1394:	98 85       	ldd	r25, Y+8	; 0x08
    1396:	01 96       	adiw	r24, 0x01	; 1
    1398:	69 f4       	brne	.+26     	; 0x13b4 <nwkTxFrame+0x86>
    139a:	81 e4       	ldi	r24, 0x41	; 65
    139c:	98 e8       	ldi	r25, 0x88	; 136
    139e:	9b 83       	std	Y+3, r25	; 0x03
    13a0:	8a 83       	std	Y+2, r24	; 0x02
    13a2:	0c d4       	rcall	.+2072   	; 0x1bbc <rand>
    13a4:	cc 57       	subi	r28, 0x7C	; 124
    13a6:	df 4f       	sbci	r29, 0xFF	; 255
    13a8:	87 70       	andi	r24, 0x07	; 7
    13aa:	99 27       	eor	r25, r25
    13ac:	01 96       	adiw	r24, 0x01	; 1
    13ae:	99 83       	std	Y+1, r25	; 0x01
    13b0:	88 83       	st	Y, r24
    13b2:	08 c0       	rjmp	.+16     	; 0x13c4 <nwkTxFrame+0x96>
    13b4:	81 e6       	ldi	r24, 0x61	; 97
    13b6:	98 e8       	ldi	r25, 0x88	; 136
    13b8:	9b 83       	std	Y+3, r25	; 0x03
    13ba:	8a 83       	std	Y+2, r24	; 0x02
    13bc:	cc 57       	subi	r28, 0x7C	; 124
    13be:	df 4f       	sbci	r29, 0xFF	; 255
    13c0:	19 82       	std	Y+1, r1	; 0x01
    13c2:	18 82       	st	Y, r1
    13c4:	df 91       	pop	r29
    13c6:	cf 91       	pop	r28
    13c8:	08 95       	ret

000013ca <nwkTxBroadcastFrame>:
    13ca:	0f 93       	push	r16
    13cc:	1f 93       	push	r17
    13ce:	cf 93       	push	r28
    13d0:	df 93       	push	r29
    13d2:	8c 01       	movw	r16, r24
    13d4:	61 da       	rcall	.-2878   	; 0x898 <nwkFrameAlloc>
    13d6:	ec 01       	movw	r28, r24
    13d8:	89 2b       	or	r24, r25
    13da:	a9 f1       	breq	.+106    	; 0x1446 <nwkTxBroadcastFrame+0x7c>
    13dc:	82 e1       	ldi	r24, 0x12	; 18
    13de:	88 83       	st	Y, r24
    13e0:	f8 01       	movw	r30, r16
    13e2:	81 81       	ldd	r24, Z+1	; 0x01
    13e4:	89 83       	std	Y+1, r24	; 0x01
    13e6:	fe 01       	movw	r30, r28
    13e8:	ed 57       	subi	r30, 0x7D	; 125
    13ea:	ff 4f       	sbci	r31, 0xFF	; 255
    13ec:	10 82       	st	Z, r1
    13ee:	e6 d3       	rcall	.+1996   	; 0x1bbc <rand>
    13f0:	fe 01       	movw	r30, r28
    13f2:	ec 57       	subi	r30, 0x7C	; 124
    13f4:	ff 4f       	sbci	r31, 0xFF	; 255
    13f6:	87 70       	andi	r24, 0x07	; 7
    13f8:	99 27       	eor	r25, r25
    13fa:	01 96       	adiw	r24, 0x01	; 1
    13fc:	91 83       	std	Z+1, r25	; 0x01
    13fe:	80 83       	st	Z, r24
    1400:	33 96       	adiw	r30, 0x03	; 3
    1402:	11 82       	std	Z+1, r1	; 0x01
    1404:	10 82       	st	Z, r1
    1406:	f8 01       	movw	r30, r16
    1408:	41 81       	ldd	r20, Z+1	; 0x01
    140a:	50 e0       	ldi	r21, 0x00	; 0
    140c:	b8 01       	movw	r22, r16
    140e:	6e 5f       	subi	r22, 0xFE	; 254
    1410:	7f 4f       	sbci	r23, 0xFF	; 255
    1412:	ce 01       	movw	r24, r28
    1414:	02 96       	adiw	r24, 0x02	; 2
    1416:	e0 d3       	rcall	.+1984   	; 0x1bd8 <memcpy>
    1418:	81 e4       	ldi	r24, 0x41	; 65
    141a:	98 e8       	ldi	r25, 0x88	; 136
    141c:	9b 83       	std	Y+3, r25	; 0x03
    141e:	8a 83       	std	Y+2, r24	; 0x02
    1420:	8f ef       	ldi	r24, 0xFF	; 255
    1422:	9f ef       	ldi	r25, 0xFF	; 255
    1424:	98 87       	std	Y+8, r25	; 0x08
    1426:	8f 83       	std	Y+7, r24	; 0x07
    1428:	f8 01       	movw	r30, r16
    142a:	85 81       	ldd	r24, Z+5	; 0x05
    142c:	96 81       	ldd	r25, Z+6	; 0x06
    142e:	9e 83       	std	Y+6, r25	; 0x06
    1430:	8d 83       	std	Y+5, r24	; 0x05
    1432:	e7 ee       	ldi	r30, 0xE7	; 231
    1434:	f9 e1       	ldi	r31, 0x19	; 25
    1436:	80 81       	ld	r24, Z
    1438:	91 81       	ldd	r25, Z+1	; 0x01
    143a:	9a 87       	std	Y+10, r25	; 0x0a
    143c:	89 87       	std	Y+9, r24	; 0x09
    143e:	85 81       	ldd	r24, Z+5	; 0x05
    1440:	8f 5f       	subi	r24, 0xFF	; 255
    1442:	85 83       	std	Z+5, r24	; 0x05
    1444:	8c 83       	std	Y+4, r24	; 0x04
    1446:	df 91       	pop	r29
    1448:	cf 91       	pop	r28
    144a:	1f 91       	pop	r17
    144c:	0f 91       	pop	r16
    144e:	08 95       	ret

00001450 <nwkTxAckReceived>:
    1450:	cf 93       	push	r28
    1452:	df 93       	push	r29
    1454:	fc 01       	movw	r30, r24
    1456:	21 85       	ldd	r18, Z+9	; 0x09
    1458:	23 30       	cpi	r18, 0x03	; 3
    145a:	d9 f4       	brne	.+54     	; 0x1492 <nwkTxAckReceived+0x42>
    145c:	10 c0       	rjmp	.+32     	; 0x147e <nwkTxAckReceived+0x2e>
    145e:	fc 01       	movw	r30, r24
    1460:	20 81       	ld	r18, Z
    1462:	26 31       	cpi	r18, 0x16	; 22
    1464:	89 f4       	brne	.+34     	; 0x1488 <nwkTxAckReceived+0x38>
    1466:	34 85       	ldd	r19, Z+12	; 0x0c
    1468:	29 81       	ldd	r18, Y+1	; 0x01
    146a:	32 13       	cpse	r19, r18
    146c:	0d c0       	rjmp	.+26     	; 0x1488 <nwkTxAckReceived+0x38>
    146e:	27 e1       	ldi	r18, 0x17	; 23
    1470:	20 83       	st	Z, r18
    1472:	2a 81       	ldd	r18, Y+2	; 0x02
    1474:	ea 57       	subi	r30, 0x7A	; 122
    1476:	ff 4f       	sbci	r31, 0xFF	; 255
    1478:	20 83       	st	Z, r18
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	0b c0       	rjmp	.+22     	; 0x1494 <nwkTxAckReceived+0x44>
    147e:	fc 01       	movw	r30, r24
    1480:	c7 81       	ldd	r28, Z+7	; 0x07
    1482:	d0 85       	ldd	r29, Z+8	; 0x08
    1484:	80 e0       	ldi	r24, 0x00	; 0
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	4a da       	rcall	.-2924   	; 0x91e <nwkFrameNext>
    148a:	00 97       	sbiw	r24, 0x00	; 0
    148c:	41 f7       	brne	.-48     	; 0x145e <nwkTxAckReceived+0xe>
    148e:	80 e0       	ldi	r24, 0x00	; 0
    1490:	01 c0       	rjmp	.+2      	; 0x1494 <nwkTxAckReceived+0x44>
    1492:	80 e0       	ldi	r24, 0x00	; 0
    1494:	df 91       	pop	r29
    1496:	cf 91       	pop	r28
    1498:	08 95       	ret

0000149a <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    149a:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <nwkTxPhyActiveFrame>
    149e:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <nwkTxPhyActiveFrame+0x1>

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
    14a2:	81 30       	cpi	r24, 0x01	; 1
    14a4:	21 f0       	breq	.+8      	; 0x14ae <PHY_DataConf+0x14>
    14a6:	48 f0       	brcs	.+18     	; 0x14ba <PHY_DataConf+0x20>
    14a8:	82 30       	cpi	r24, 0x02	; 2
    14aa:	19 f0       	breq	.+6      	; 0x14b2 <PHY_DataConf+0x18>
    14ac:	04 c0       	rjmp	.+8      	; 0x14b6 <PHY_DataConf+0x1c>
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;

    case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
      return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    14ae:	80 e2       	ldi	r24, 0x20	; 32
    14b0:	05 c0       	rjmp	.+10     	; 0x14bc <PHY_DataConf+0x22>

    case PHY_STATUS_NO_ACK:
      return NWK_PHY_NO_ACK_STATUS;
    14b2:	81 e2       	ldi	r24, 0x21	; 33
    14b4:	03 c0       	rjmp	.+6      	; 0x14bc <PHY_DataConf+0x22>

    default:
      return NWK_ERROR_STATUS;
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	01 c0       	rjmp	.+2      	; 0x14bc <PHY_DataConf+0x22>
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;
    14ba:	80 e0       	ldi	r24, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    14bc:	df 01       	movw	r26, r30
    14be:	ad 57       	subi	r26, 0x7D	; 125
    14c0:	bf 4f       	sbci	r27, 0xFF	; 255
    14c2:	8c 93       	st	X, r24
  nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    14c4:	85 e1       	ldi	r24, 0x15	; 21
    14c6:	80 83       	st	Z, r24
  nwkTxPhyActiveFrame = NULL;
    14c8:	10 92 5f 19 	sts	0x195F, r1	; 0x80195f <nwkTxPhyActiveFrame+0x1>
    14cc:	10 92 5e 19 	sts	0x195E, r1	; 0x80195e <nwkTxPhyActiveFrame>
  nwkIb.lock--;
    14d0:	e7 ee       	ldi	r30, 0xE7	; 231
    14d2:	f9 e1       	ldi	r31, 0x19	; 25
    14d4:	86 a1       	ldd	r24, Z+38	; 0x26
    14d6:	97 a1       	ldd	r25, Z+39	; 0x27
    14d8:	01 97       	sbiw	r24, 0x01	; 1
    14da:	97 a3       	std	Z+39, r25	; 0x27
    14dc:	86 a3       	std	Z+38, r24	; 0x26
    14de:	08 95       	ret

000014e0 <nwkTxTaskHandler>:

/*************************************************************************//**
  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    14e0:	9f 92       	push	r9
    14e2:	af 92       	push	r10
    14e4:	bf 92       	push	r11
    14e6:	cf 92       	push	r12
    14e8:	df 92       	push	r13
    14ea:	ef 92       	push	r14
    14ec:	ff 92       	push	r15
    14ee:	0f 93       	push	r16
    14f0:	1f 93       	push	r17
    14f2:	cf 93       	push	r28
    14f4:	df 93       	push	r29
  NwkFrame_t *frame = NULL;
    14f6:	c0 e0       	ldi	r28, 0x00	; 0
    14f8:	d0 e0       	ldi	r29, 0x00	; 0
      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
        {
          nwkTxPhyActiveFrame = frame;
          frame->state = NWK_TX_STATE_WAIT_CONF;
    14fa:	0f 2e       	mov	r0, r31
    14fc:	f4 e1       	ldi	r31, 0x14	; 20
    14fe:	af 2e       	mov	r10, r31
    1500:	f0 2d       	mov	r31, r0
          PHY_DataReq(frame->data, frame->size);
          nwkIb.lock++;
    1502:	07 ee       	ldi	r16, 0xE7	; 231
    1504:	19 e1       	ldi	r17, 0x19	; 25
            frame->state = NWK_TX_STATE_CONFIRM;
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    1506:	0f 2e       	mov	r0, r31
    1508:	f7 e1       	ldi	r31, 0x17	; 23
    150a:	df 2e       	mov	r13, r31
    150c:	f0 2d       	mov	r31, r0
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    150e:	0f 2e       	mov	r0, r31
    1510:	f6 e1       	ldi	r31, 0x16	; 22
    1512:	9f 2e       	mov	r9, r31
    1514:	f0 2d       	mov	r31, r0
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    1516:	0f 2e       	mov	r0, r31
    1518:	f9 e2       	ldi	r31, 0x29	; 41
    151a:	ef 2e       	mov	r14, r31
    151c:	f1 2c       	mov	r15, r1
    151e:	f0 2d       	mov	r31, r0
          frame->state = NWK_TX_STATE_WAIT_DELAY;
          SYS_TimerStart(&nwkTxDelayTimer);
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    1520:	0f 2e       	mov	r0, r31
    1522:	f3 e1       	ldi	r31, 0x13	; 19
    1524:	cf 2e       	mov	r12, r31
    1526:	f0 2d       	mov	r31, r0

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    1528:	0f 2e       	mov	r0, r31
    152a:	f1 e1       	ldi	r31, 0x11	; 17
    152c:	bf 2e       	mov	r11, r31
    152e:	f0 2d       	mov	r31, r0
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    1530:	60 c0       	rjmp	.+192    	; 0x15f2 <nwkTxTaskHandler+0x112>
  {
    switch (frame->state)
    1532:	88 81       	ld	r24, Y
    1534:	83 31       	cpi	r24, 0x13	; 19
    1536:	c1 f0       	breq	.+48     	; 0x1568 <nwkTxTaskHandler+0x88>
    1538:	18 f4       	brcc	.+6      	; 0x1540 <nwkTxTaskHandler+0x60>
    153a:	82 31       	cpi	r24, 0x12	; 18
    153c:	39 f0       	breq	.+14     	; 0x154c <nwkTxTaskHandler+0x6c>
    153e:	59 c0       	rjmp	.+178    	; 0x15f2 <nwkTxTaskHandler+0x112>
    1540:	85 31       	cpi	r24, 0x15	; 21
    1542:	49 f1       	breq	.+82     	; 0x1596 <nwkTxTaskHandler+0xb6>
    1544:	87 31       	cpi	r24, 0x17	; 23
    1546:	09 f4       	brne	.+2      	; 0x154a <nwkTxTaskHandler+0x6a>
    1548:	45 c0       	rjmp	.+138    	; 0x15d4 <nwkTxTaskHandler+0xf4>
    154a:	53 c0       	rjmp	.+166    	; 0x15f2 <nwkTxTaskHandler+0x112>
      } break;
#endif

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
    154c:	fe 01       	movw	r30, r28
    154e:	ec 57       	subi	r30, 0x7C	; 124
    1550:	ff 4f       	sbci	r31, 0xFF	; 255
    1552:	80 81       	ld	r24, Z
    1554:	91 81       	ldd	r25, Z+1	; 0x01
    1556:	89 2b       	or	r24, r25
    1558:	29 f0       	breq	.+10     	; 0x1564 <nwkTxTaskHandler+0x84>
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    155a:	b8 82       	st	Y, r11
          SYS_TimerStart(&nwkTxDelayTimer);
    155c:	84 e4       	ldi	r24, 0x44	; 68
    155e:	99 e1       	ldi	r25, 0x19	; 25
    1560:	4e d2       	rcall	.+1180   	; 0x19fe <SYS_TimerStart>
    1562:	47 c0       	rjmp	.+142    	; 0x15f2 <nwkTxTaskHandler+0x112>
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    1564:	c8 82       	st	Y, r12
    1566:	45 c0       	rjmp	.+138    	; 0x15f2 <nwkTxTaskHandler+0x112>
        }
      } break;

      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
    1568:	80 91 5e 19 	lds	r24, 0x195E	; 0x80195e <nwkTxPhyActiveFrame>
    156c:	90 91 5f 19 	lds	r25, 0x195F	; 0x80195f <nwkTxPhyActiveFrame+0x1>
    1570:	89 2b       	or	r24, r25
    1572:	09 f0       	breq	.+2      	; 0x1576 <nwkTxTaskHandler+0x96>
    1574:	3e c0       	rjmp	.+124    	; 0x15f2 <nwkTxTaskHandler+0x112>
        {
          nwkTxPhyActiveFrame = frame;
    1576:	d0 93 5f 19 	sts	0x195F, r29	; 0x80195f <nwkTxPhyActiveFrame+0x1>
    157a:	c0 93 5e 19 	sts	0x195E, r28	; 0x80195e <nwkTxPhyActiveFrame>
          frame->state = NWK_TX_STATE_WAIT_CONF;
    157e:	a8 82       	st	Y, r10
          PHY_DataReq(frame->data, frame->size);
    1580:	69 81       	ldd	r22, Y+1	; 0x01
    1582:	ce 01       	movw	r24, r28
    1584:	02 96       	adiw	r24, 0x02	; 2
    1586:	cb d0       	rcall	.+406    	; 0x171e <PHY_DataReq>
          nwkIb.lock++;
    1588:	f8 01       	movw	r30, r16
    158a:	86 a1       	ldd	r24, Z+38	; 0x26
    158c:	97 a1       	ldd	r25, Z+39	; 0x27
    158e:	01 96       	adiw	r24, 0x01	; 1
    1590:	97 a3       	std	Z+39, r25	; 0x27
    1592:	86 a3       	std	Z+38, r24	; 0x26
    1594:	2e c0       	rjmp	.+92     	; 0x15f2 <nwkTxTaskHandler+0x112>
      case NWK_TX_STATE_WAIT_CONF:
        break;

      case NWK_TX_STATE_SENT:
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
    1596:	fe 01       	movw	r30, r28
    1598:	ed 57       	subi	r30, 0x7D	; 125
    159a:	ff 4f       	sbci	r31, 0xFF	; 255
    159c:	80 81       	ld	r24, Z
    159e:	81 11       	cpse	r24, r1
    15a0:	17 c0       	rjmp	.+46     	; 0x15d0 <nwkTxTaskHandler+0xf0>
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
    15a2:	2d 85       	ldd	r18, Y+13	; 0x0d
    15a4:	3e 85       	ldd	r19, Y+14	; 0x0e
    15a6:	f8 01       	movw	r30, r16
    15a8:	80 81       	ld	r24, Z
    15aa:	91 81       	ldd	r25, Z+1	; 0x01
    15ac:	28 17       	cp	r18, r24
    15ae:	39 07       	cpc	r19, r25
    15b0:	69 f4       	brne	.+26     	; 0x15cc <nwkTxTaskHandler+0xec>
    15b2:	8b 85       	ldd	r24, Y+11	; 0x0b
    15b4:	80 ff       	sbrs	r24, 0
    15b6:	0a c0       	rjmp	.+20     	; 0x15cc <nwkTxTaskHandler+0xec>
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    15b8:	98 82       	st	Y, r9
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    15ba:	fe 01       	movw	r30, r28
    15bc:	ec 57       	subi	r30, 0x7C	; 124
    15be:	ff 4f       	sbci	r31, 0xFF	; 255
    15c0:	f1 82       	std	Z+1, r15	; 0x01
    15c2:	e0 82       	st	Z, r14
            SYS_TimerStart(&nwkTxAckWaitTimer);
    15c4:	81 e5       	ldi	r24, 0x51	; 81
    15c6:	99 e1       	ldi	r25, 0x19	; 25
    15c8:	1a d2       	rcall	.+1076   	; 0x19fe <SYS_TimerStart>
    15ca:	13 c0       	rjmp	.+38     	; 0x15f2 <nwkTxTaskHandler+0x112>
          }
          else
          {
            frame->state = NWK_TX_STATE_CONFIRM;
    15cc:	d8 82       	st	Y, r13
    15ce:	11 c0       	rjmp	.+34     	; 0x15f2 <nwkTxTaskHandler+0x112>
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    15d0:	d8 82       	st	Y, r13
        break;

      case NWK_TX_STATE_CONFIRM:
      {
#ifdef NWK_ENABLE_ROUTING
        nwkRouteFrameSent(frame);
    15d2:	0f c0       	rjmp	.+30     	; 0x15f2 <nwkTxTaskHandler+0x112>
    15d4:	ce 01       	movw	r24, r28
    15d6:	b8 da       	rcall	.-2704   	; 0xb48 <nwkRouteFrameSent>
#endif
        if (NULL == frame->tx.confirm)
    15d8:	fe 01       	movw	r30, r28
    15da:	e9 57       	subi	r30, 0x79	; 121
    15dc:	ff 4f       	sbci	r31, 0xFF	; 255
    15de:	01 90       	ld	r0, Z+
    15e0:	f0 81       	ld	r31, Z
    15e2:	e0 2d       	mov	r30, r0
    15e4:	30 97       	sbiw	r30, 0x00	; 0
          nwkFrameFree(frame);
    15e6:	19 f4       	brne	.+6      	; 0x15ee <nwkTxTaskHandler+0x10e>
    15e8:	ce 01       	movw	r24, r28
    15ea:	8f d9       	rcall	.-3298   	; 0x90a <nwkFrameFree>
        else
          frame->tx.confirm(frame);
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <nwkTxTaskHandler+0x112>
    15ee:	ce 01       	movw	r24, r28
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    15f0:	19 95       	eicall
    15f2:	ce 01       	movw	r24, r28
    15f4:	94 d9       	rcall	.-3288   	; 0x91e <nwkFrameNext>
    15f6:	ec 01       	movw	r28, r24
    15f8:	89 2b       	or	r24, r25
    15fa:	09 f0       	breq	.+2      	; 0x15fe <nwkTxTaskHandler+0x11e>
    15fc:	9a cf       	rjmp	.-204    	; 0x1532 <nwkTxTaskHandler+0x52>

      default:
        break;
    };
  }
}
    15fe:	df 91       	pop	r29
    1600:	cf 91       	pop	r28
    1602:	1f 91       	pop	r17
    1604:	0f 91       	pop	r16
    1606:	ff 90       	pop	r15
    1608:	ef 90       	pop	r14
    160a:	df 90       	pop	r13
    160c:	cf 90       	pop	r12
    160e:	bf 90       	pop	r11
    1610:	af 90       	pop	r10
    1612:	9f 90       	pop	r9
    1614:	08 95       	ret

00001616 <phySetChannel>:
*****************************************************************************/
void PHY_Wakeup(void)
{
  TRXPR_REG_s.slptr = 0;
  phySetRxState();
  phyState = PHY_STATE_IDLE;
    1616:	80 91 60 19 	lds	r24, 0x1960	; 0x801960 <phyBand>
    161a:	98 2f       	mov	r25, r24
    161c:	9f 70       	andi	r25, 0x0F	; 15
    161e:	e4 e5       	ldi	r30, 0x54	; 84
    1620:	f1 e0       	ldi	r31, 0x01	; 1
    1622:	80 81       	ld	r24, Z
    1624:	80 7f       	andi	r24, 0xF0	; 240
    1626:	89 2b       	or	r24, r25
    1628:	80 83       	st	Z, r24
    162a:	80 91 60 19 	lds	r24, 0x1960	; 0x801960 <phyBand>
    162e:	88 23       	and	r24, r24
    1630:	29 f0       	breq	.+10     	; 0x163c <phySetChannel+0x26>
    1632:	80 91 61 19 	lds	r24, 0x1961	; 0x801961 <phyChannel>
    1636:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x7c0153>
    163a:	08 95       	ret
    163c:	80 91 61 19 	lds	r24, 0x1961	; 0x801961 <phyChannel>
    1640:	98 2f       	mov	r25, r24
    1642:	9f 71       	andi	r25, 0x1F	; 31
    1644:	e8 e4       	ldi	r30, 0x48	; 72
    1646:	f1 e0       	ldi	r31, 0x01	; 1
    1648:	80 81       	ld	r24, Z
    164a:	80 7e       	andi	r24, 0xE0	; 224
    164c:	89 2b       	or	r24, r25
    164e:	80 83       	st	Z, r24
    1650:	08 95       	ret

00001652 <phyTrxSetState>:
    1652:	93 e0       	ldi	r25, 0x03	; 3
    1654:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    1658:	e1 e4       	ldi	r30, 0x41	; 65
    165a:	f1 e0       	ldi	r31, 0x01	; 1
    165c:	90 81       	ld	r25, Z
    165e:	9f 71       	andi	r25, 0x1F	; 31
    1660:	98 30       	cpi	r25, 0x08	; 8
    1662:	e1 f7       	brne	.-8      	; 0x165c <phyTrxSetState+0xa>
    1664:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    1668:	e1 e4       	ldi	r30, 0x41	; 65
    166a:	f1 e0       	ldi	r31, 0x01	; 1
    166c:	90 81       	ld	r25, Z
    166e:	9f 71       	andi	r25, 0x1F	; 31
    1670:	89 13       	cpse	r24, r25
    1672:	fc cf       	rjmp	.-8      	; 0x166c <phyTrxSetState+0x1a>
    1674:	08 95       	ret

00001676 <phySetRxState>:
    1676:	88 e0       	ldi	r24, 0x08	; 8
    1678:	ec df       	rcall	.-40     	; 0x1652 <phyTrxSetState>
    167a:	8f ef       	ldi	r24, 0xFF	; 255
    167c:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    1680:	80 91 62 19 	lds	r24, 0x1962	; 0x801962 <phyRxState>
    1684:	88 23       	and	r24, r24
    1686:	11 f0       	breq	.+4      	; 0x168c <phySetRxState+0x16>
    1688:	86 e1       	ldi	r24, 0x16	; 22
    168a:	e3 cf       	rjmp	.-58     	; 0x1652 <phyTrxSetState>
    168c:	08 95       	ret

0000168e <PHY_Init>:
    168e:	e9 e3       	ldi	r30, 0x39	; 57
    1690:	f1 e0       	ldi	r31, 0x01	; 1
    1692:	80 81       	ld	r24, Z
    1694:	81 60       	ori	r24, 0x01	; 1
    1696:	80 83       	st	Z, r24
    1698:	10 92 62 19 	sts	0x1962, r1	; 0x801962 <phyRxState>
    169c:	10 92 60 19 	sts	0x1960, r1	; 0x801960 <phyBand>
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	80 93 e3 19 	sts	0x19E3, r24	; 0x8019e3 <phyState>
    16a6:	88 e0       	ldi	r24, 0x08	; 8
    16a8:	d4 df       	rcall	.-88     	; 0x1652 <phyTrxSetState>
    16aa:	8b ee       	ldi	r24, 0xEB	; 235
    16ac:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__TEXT_REGION_LENGTH__+0x7c0156>
    16b0:	ec e4       	ldi	r30, 0x4C	; 76
    16b2:	f1 e0       	ldi	r31, 0x01	; 1
    16b4:	80 81       	ld	r24, Z
    16b6:	80 68       	ori	r24, 0x80	; 128
    16b8:	80 83       	st	Z, r24
    16ba:	08 95       	ret

000016bc <PHY_SetRxState>:
    16bc:	80 93 62 19 	sts	0x1962, r24	; 0x801962 <phyRxState>
    16c0:	da cf       	rjmp	.-76     	; 0x1676 <phySetRxState>
    16c2:	08 95       	ret

000016c4 <PHY_SetChannel>:
    16c4:	80 93 61 19 	sts	0x1961, r24	; 0x801961 <phyChannel>
    16c8:	a6 cf       	rjmp	.-180    	; 0x1616 <phySetChannel>
    16ca:	08 95       	ret

000016cc <PHY_SetPanId>:
    16cc:	cf 93       	push	r28
    16ce:	df 93       	push	r29
    16d0:	1f 92       	push	r1
    16d2:	1f 92       	push	r1
    16d4:	cd b7       	in	r28, 0x3d	; 61
    16d6:	de b7       	in	r29, 0x3e	; 62
    16d8:	9a 83       	std	Y+2, r25	; 0x02
    16da:	89 83       	std	Y+1, r24	; 0x01
    16dc:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__TEXT_REGION_LENGTH__+0x7c0162>
    16e0:	8a 81       	ldd	r24, Y+2	; 0x02
    16e2:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <__TEXT_REGION_LENGTH__+0x7c0163>
    16e6:	0f 90       	pop	r0
    16e8:	0f 90       	pop	r0
    16ea:	df 91       	pop	r29
    16ec:	cf 91       	pop	r28
    16ee:	08 95       	ret

000016f0 <PHY_SetShortAddr>:
    16f0:	cf 93       	push	r28
    16f2:	df 93       	push	r29
    16f4:	1f 92       	push	r1
    16f6:	1f 92       	push	r1
    16f8:	cd b7       	in	r28, 0x3d	; 61
    16fa:	de b7       	in	r29, 0x3e	; 62
    16fc:	9a 83       	std	Y+2, r25	; 0x02
    16fe:	89 83       	std	Y+1, r24	; 0x01
    1700:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__TEXT_REGION_LENGTH__+0x7c0160>
    1704:	8a 81       	ldd	r24, Y+2	; 0x02
    1706:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <__TEXT_REGION_LENGTH__+0x7c0161>
    170a:	99 81       	ldd	r25, Y+1	; 0x01
    170c:	8a 81       	ldd	r24, Y+2	; 0x02
    170e:	89 0f       	add	r24, r25
    1710:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <__TEXT_REGION_LENGTH__+0x7c016d>
    1714:	0f 90       	pop	r0
    1716:	0f 90       	pop	r0
    1718:	df 91       	pop	r29
    171a:	cf 91       	pop	r28
    171c:	08 95       	ret

0000171e <PHY_DataReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data, uint8_t size)
{
    171e:	1f 93       	push	r17
    1720:	cf 93       	push	r28
    1722:	df 93       	push	r29
    1724:	18 2f       	mov	r17, r24
    1726:	d9 2f       	mov	r29, r25
    1728:	c6 2f       	mov	r28, r22
  phyTrxSetState(TRX_CMD_TX_ARET_ON);
    172a:	89 e1       	ldi	r24, 0x19	; 25
    172c:	92 df       	rcall	.-220    	; 0x1652 <phyTrxSetState>

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;
    172e:	8f ef       	ldi	r24, 0xFF	; 255
    1730:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
    1734:	82 e0       	ldi	r24, 0x02	; 2
    1736:	8c 0f       	add	r24, r28
    1738:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x7c0180>
  for (uint8_t i = 0; i < size; i++)
    173c:	cc 23       	and	r28, r28
    173e:	71 f0       	breq	.+28     	; 0x175c <PHY_DataReq+0x3e>
    1740:	a1 2f       	mov	r26, r17
    1742:	bd 2f       	mov	r27, r29
    1744:	c1 50       	subi	r28, 0x01	; 1
    1746:	6c 2f       	mov	r22, r28
    1748:	70 e0       	ldi	r23, 0x00	; 0
    174a:	6e 57       	subi	r22, 0x7E	; 126
    174c:	7e 4f       	sbci	r23, 0xFE	; 254
    174e:	e1 e8       	ldi	r30, 0x81	; 129
    1750:	f1 e0       	ldi	r31, 0x01	; 1
    TRX_FRAME_BUFFER(i+1) = data[i];
    1752:	8d 91       	ld	r24, X+
    1754:	81 93       	st	Z+, r24
  phyTrxSetState(TRX_CMD_TX_ARET_ON);

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
  for (uint8_t i = 0; i < size; i++)
    1756:	e6 17       	cp	r30, r22
    1758:	f7 07       	cpc	r31, r23
    175a:	d9 f7       	brne	.-10     	; 0x1752 <PHY_DataReq+0x34>
    TRX_FRAME_BUFFER(i+1) = data[i];

  phyState = PHY_STATE_TX_WAIT_END;
    175c:	83 e0       	ldi	r24, 0x03	; 3
    175e:	80 93 e3 19 	sts	0x19E3, r24	; 0x8019e3 <phyState>
  TRX_STATE_REG = TRX_CMD_TX_START;
    1762:	82 e0       	ldi	r24, 0x02	; 2
    1764:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
}
    1768:	df 91       	pop	r29
    176a:	cf 91       	pop	r28
    176c:	1f 91       	pop	r17
    176e:	08 95       	ret

00001770 <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    1770:	1f 93       	push	r17
    1772:	cf 93       	push	r28
    1774:	df 93       	push	r29
    1776:	00 d0       	rcall	.+0      	; 0x1778 <PHY_TaskHandler+0x8>
    1778:	1f 92       	push	r1
    177a:	1f 92       	push	r1
    177c:	cd b7       	in	r28, 0x3d	; 61
    177e:	de b7       	in	r29, 0x3e	; 62
  if (PHY_STATE_SLEEP == phyState)
    1780:	80 91 e3 19 	lds	r24, 0x19E3	; 0x8019e3 <phyState>
    1784:	82 30       	cpi	r24, 0x02	; 2
    1786:	09 f4       	brne	.+2      	; 0x178a <PHY_TaskHandler+0x1a>
    1788:	65 c0       	rjmp	.+202    	; 0x1854 <PHY_TaskHandler+0xe4>
    return;

  if (IRQ_STATUS_REG_s.rxEnd)
    178a:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    178e:	83 ff       	sbrs	r24, 3
    1790:	3e c0       	rjmp	.+124    	; 0x180e <PHY_TaskHandler+0x9e>
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;
    1792:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7c017b>

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    1796:	6a 2f       	mov	r22, r26
    1798:	70 e0       	ldi	r23, 0x00	; 0
    179a:	ab 01       	movw	r20, r22
    179c:	4f 5f       	subi	r20, 0xFF	; 255
    179e:	5f 4f       	sbci	r21, 0xFF	; 255
    17a0:	80 e0       	ldi	r24, 0x00	; 0
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	20 e0       	ldi	r18, 0x00	; 0
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
    17a6:	fc 01       	movw	r30, r24
    17a8:	e0 58       	subi	r30, 0x80	; 128
    17aa:	fe 4f       	sbci	r31, 0xFE	; 254
    17ac:	30 81       	ld	r19, Z
    17ae:	fc 01       	movw	r30, r24
    17b0:	ed 59       	subi	r30, 0x9D	; 157
    17b2:	f6 4e       	sbci	r31, 0xE6	; 230
    17b4:	30 83       	st	Z, r19
  if (IRQ_STATUS_REG_s.rxEnd)
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    17b6:	2f 5f       	subi	r18, 0xFF	; 255
    17b8:	82 2f       	mov	r24, r18
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	84 17       	cp	r24, r20
    17be:	95 07       	cpc	r25, r21
    17c0:	94 f3       	brlt	.-28     	; 0x17a6 <PHY_TaskHandler+0x36>
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);

    ind.data = phyRxBuffer;
    17c2:	83 e6       	ldi	r24, 0x63	; 99
    17c4:	99 e1       	ldi	r25, 0x19	; 25
    17c6:	9a 83       	std	Y+2, r25	; 0x02
    17c8:	89 83       	std	Y+1, r24	; 0x01
    ind.size = size - PHY_CRC_SIZE;
    17ca:	a2 50       	subi	r26, 0x02	; 2
    17cc:	ab 83       	std	Y+3, r26	; 0x03
    ind.lqi  = phyRxBuffer[size];
    17ce:	fb 01       	movw	r30, r22
    17d0:	ed 59       	subi	r30, 0x9D	; 157
    17d2:	f6 4e       	sbci	r31, 0xE6	; 230
    17d4:	80 81       	ld	r24, Z
    17d6:	8c 83       	std	Y+4, r24	; 0x04
    ind.rssi = (int8_t)PHY_ED_LEVEL_REG + PHY_RSSI_BASE_VAL;
    17d8:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <__TEXT_REGION_LENGTH__+0x7c0147>
    17dc:	8a 55       	subi	r24, 0x5A	; 90
    17de:	8d 83       	std	Y+5, r24	; 0x05
    PHY_DataInd(&ind);
    17e0:	ce 01       	movw	r24, r28
    17e2:	01 96       	adiw	r24, 0x01	; 1
    17e4:	bd da       	rcall	.-2694   	; 0xd60 <PHY_DataInd>

    while (TRX_STATUS_RX_AACK_ON != TRX_STATUS_REG_s.trxStatus);
    17e6:	e1 e4       	ldi	r30, 0x41	; 65
    17e8:	f1 e0       	ldi	r31, 0x01	; 1
    17ea:	80 81       	ld	r24, Z
    17ec:	8f 71       	andi	r24, 0x1F	; 31
    17ee:	86 31       	cpi	r24, 0x16	; 22
    17f0:	e1 f7       	brne	.-8      	; 0x17ea <PHY_TaskHandler+0x7a>

    IRQ_STATUS_REG_s.rxEnd = 1;
    17f2:	ef e4       	ldi	r30, 0x4F	; 79
    17f4:	f1 e0       	ldi	r31, 0x01	; 1
    17f6:	80 81       	ld	r24, Z
    17f8:	88 60       	ori	r24, 0x08	; 8
    17fa:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 0;
    17fc:	ec e4       	ldi	r30, 0x4C	; 76
    17fe:	f1 e0       	ldi	r31, 0x01	; 1
    1800:	80 81       	ld	r24, Z
    1802:	8f 77       	andi	r24, 0x7F	; 127
    1804:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 1;
    1806:	80 81       	ld	r24, Z
    1808:	80 68       	ori	r24, 0x80	; 128
    180a:	80 83       	st	Z, r24
    180c:	23 c0       	rjmp	.+70     	; 0x1854 <PHY_TaskHandler+0xe4>
  }

  else if (IRQ_STATUS_REG_s.txEnd)
    180e:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    1812:	86 ff       	sbrs	r24, 6
    1814:	1f c0       	rjmp	.+62     	; 0x1854 <PHY_TaskHandler+0xe4>
  {
    if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus)
    1816:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    181a:	8f 71       	andi	r24, 0x1F	; 31
    181c:	89 31       	cpi	r24, 0x19	; 25
    181e:	a9 f4       	brne	.+42     	; 0x184a <PHY_TaskHandler+0xda>
    {
      uint8_t status = TRX_STATE_REG_s.tracStatus;
    1820:	10 91 42 01 	lds	r17, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    1824:	12 95       	swap	r17
    1826:	16 95       	lsr	r17
    1828:	17 70       	andi	r17, 0x07	; 7

      if (TRAC_STATUS_SUCCESS == status)
    182a:	49 f0       	breq	.+18     	; 0x183e <PHY_TaskHandler+0xce>
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    182c:	13 30       	cpi	r17, 0x03	; 3
    182e:	21 f0       	breq	.+8      	; 0x1838 <PHY_TaskHandler+0xc8>
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
      else if (TRAC_STATUS_NO_ACK == status)
    1830:	15 30       	cpi	r17, 0x05	; 5
    1832:	21 f0       	breq	.+8      	; 0x183c <PHY_TaskHandler+0xcc>
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;
    1834:	13 e0       	ldi	r17, 0x03	; 3
    1836:	03 c0       	rjmp	.+6      	; 0x183e <PHY_TaskHandler+0xce>
      uint8_t status = TRX_STATE_REG_s.tracStatus;

      if (TRAC_STATUS_SUCCESS == status)
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    1838:	11 e0       	ldi	r17, 0x01	; 1
    183a:	01 c0       	rjmp	.+2      	; 0x183e <PHY_TaskHandler+0xce>
      else if (TRAC_STATUS_NO_ACK == status)
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;

      phySetRxState();
    183c:	12 e0       	ldi	r17, 0x02	; 2
    183e:	1b df       	rcall	.-458    	; 0x1676 <phySetRxState>
      phyState = PHY_STATE_IDLE;
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	80 93 e3 19 	sts	0x19E3, r24	; 0x8019e3 <phyState>

      PHY_DataConf(status);
    1846:	81 2f       	mov	r24, r17
    1848:	28 de       	rcall	.-944    	; 0x149a <PHY_DataConf>
    }

    IRQ_STATUS_REG_s.txEnd = 1;
    184a:	ef e4       	ldi	r30, 0x4F	; 79
    184c:	f1 e0       	ldi	r31, 0x01	; 1
    184e:	80 81       	ld	r24, Z
    1850:	80 64       	ori	r24, 0x40	; 64
    1852:	80 83       	st	Z, r24
  }
}
    1854:	0f 90       	pop	r0
    1856:	0f 90       	pop	r0
    1858:	0f 90       	pop	r0
    185a:	0f 90       	pop	r0
    185c:	0f 90       	pop	r0
    185e:	df 91       	pop	r29
    1860:	cf 91       	pop	r28
    1862:	1f 91       	pop	r17
    1864:	08 95       	ret

00001866 <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
  HAL_Init();
    1866:	0e 94 7f 01 	call	0x2fe	; 0x2fe <HAL_Init>
  SYS_TimerInit();
    186a:	6d d0       	rcall	.+218    	; 0x1946 <SYS_TimerInit>
  PHY_Init();
    186c:	10 df       	rcall	.-480    	; 0x168e <PHY_Init>
    186e:	0c 94 20 03 	jmp	0x640	; 0x640 <NWK_Init>
  NWK_Init();
    1872:	08 95       	ret

00001874 <SYS_TaskHandler>:
    1874:	7d df       	rcall	.-262    	; 0x1770 <PHY_TaskHandler>
/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
  PHY_TaskHandler();
  NWK_TaskHandler();
    1876:	0e 94 4e 03 	call	0x69c	; 0x69c <NWK_TaskHandler>
  SYS_TimerTaskHandler();
    187a:	cc c0       	rjmp	.+408    	; 0x1a14 <SYS_TimerTaskHandler>
    187c:	08 95       	ret

0000187e <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    187e:	0f 93       	push	r16
    1880:	1f 93       	push	r17
    1882:	cf 93       	push	r28
    1884:	df 93       	push	r29
    1886:	ec 01       	movw	r28, r24
  if (timers)
    1888:	80 91 e4 19 	lds	r24, 0x19E4	; 0x8019e4 <timers>
    188c:	90 91 e5 19 	lds	r25, 0x19E5	; 0x8019e5 <timers+0x1>
    1890:	00 97       	sbiw	r24, 0x00	; 0
    1892:	09 f4       	brne	.+2      	; 0x1896 <placeTimer+0x18>
    1894:	45 c0       	rjmp	.+138    	; 0x1920 <placeTimer+0xa2>
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;
    1896:	4e 81       	ldd	r20, Y+6	; 0x06
    1898:	5f 81       	ldd	r21, Y+7	; 0x07
    189a:	68 85       	ldd	r22, Y+8	; 0x08
    189c:	79 85       	ldd	r23, Y+9	; 0x09

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
    189e:	fc 01       	movw	r30, r24
    18a0:	02 81       	ldd	r16, Z+2	; 0x02
    18a2:	13 81       	ldd	r17, Z+3	; 0x03
    18a4:	24 81       	ldd	r18, Z+4	; 0x04
    18a6:	35 81       	ldd	r19, Z+5	; 0x05
    18a8:	40 17       	cp	r20, r16
    18aa:	51 07       	cpc	r21, r17
    18ac:	62 07       	cpc	r22, r18
    18ae:	73 07       	cpc	r23, r19
    18b0:	60 f0       	brcs	.+24     	; 0x18ca <placeTimer+0x4c>
    18b2:	dc 01       	movw	r26, r24
    18b4:	17 c0       	rjmp	.+46     	; 0x18e4 <placeTimer+0x66>
    18b6:	02 81       	ldd	r16, Z+2	; 0x02
    18b8:	13 81       	ldd	r17, Z+3	; 0x03
    18ba:	24 81       	ldd	r18, Z+4	; 0x04
    18bc:	35 81       	ldd	r19, Z+5	; 0x05
    18be:	40 17       	cp	r20, r16
    18c0:	51 07       	cpc	r21, r17
    18c2:	62 07       	cpc	r22, r18
    18c4:	73 07       	cpc	r23, r19
    18c6:	68 f4       	brcc	.+26     	; 0x18e2 <placeTimer+0x64>
    18c8:	03 c0       	rjmp	.+6      	; 0x18d0 <placeTimer+0x52>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    18ca:	fc 01       	movw	r30, r24
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    18cc:	a0 e0       	ldi	r26, 0x00	; 0
    18ce:	b0 e0       	ldi	r27, 0x00	; 0

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
      {
         t->timeout -= timeout;
    18d0:	04 1b       	sub	r16, r20
    18d2:	15 0b       	sbc	r17, r21
    18d4:	26 0b       	sbc	r18, r22
    18d6:	37 0b       	sbc	r19, r23
    18d8:	02 83       	std	Z+2, r16	; 0x02
    18da:	13 83       	std	Z+3, r17	; 0x03
    18dc:	24 83       	std	Z+4, r18	; 0x04
    18de:	35 83       	std	Z+5, r19	; 0x05
         break;
    18e0:	0a c0       	rjmp	.+20     	; 0x18f6 <placeTimer+0x78>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    18e2:	df 01       	movw	r26, r30
      {
         t->timeout -= timeout;
         break;
      }
      else
        timeout -= t->timeout;
    18e4:	40 1b       	sub	r20, r16
    18e6:	51 0b       	sbc	r21, r17
    18e8:	62 0b       	sbc	r22, r18
    18ea:	73 0b       	sbc	r23, r19
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    18ec:	ed 91       	ld	r30, X+
    18ee:	fc 91       	ld	r31, X
    18f0:	11 97       	sbiw	r26, 0x01	; 1
    18f2:	30 97       	sbiw	r30, 0x00	; 0
    18f4:	01 f7       	brne	.-64     	; 0x18b6 <placeTimer+0x38>
        timeout -= t->timeout;

      prev = t;
    }

    timer->timeout = timeout;
    18f6:	4a 83       	std	Y+2, r20	; 0x02
    18f8:	5b 83       	std	Y+3, r21	; 0x03
    18fa:	6c 83       	std	Y+4, r22	; 0x04
    18fc:	7d 83       	std	Y+5, r23	; 0x05

    if (prev)
    18fe:	10 97       	sbiw	r26, 0x00	; 0
    1900:	41 f0       	breq	.+16     	; 0x1912 <placeTimer+0x94>
    {
      timer->next = prev->next;
    1902:	8d 91       	ld	r24, X+
    1904:	9c 91       	ld	r25, X
    1906:	11 97       	sbiw	r26, 0x01	; 1
    1908:	99 83       	std	Y+1, r25	; 0x01
    190a:	88 83       	st	Y, r24
      prev->next = timer;
    190c:	cd 93       	st	X+, r28
    190e:	dc 93       	st	X, r29
    1910:	15 c0       	rjmp	.+42     	; 0x193c <placeTimer+0xbe>
    }
    else
    {
      timer->next = timers;
    1912:	99 83       	std	Y+1, r25	; 0x01
    1914:	88 83       	st	Y, r24
      timers = timer;
    1916:	d0 93 e5 19 	sts	0x19E5, r29	; 0x8019e5 <timers+0x1>
    191a:	c0 93 e4 19 	sts	0x19E4, r28	; 0x8019e4 <timers>
    191e:	0e c0       	rjmp	.+28     	; 0x193c <placeTimer+0xbe>
    }
  }
  else
  {
    timer->next = NULL;
    1920:	19 82       	std	Y+1, r1	; 0x01
    1922:	18 82       	st	Y, r1
    timer->timeout = timer->interval;
    1924:	8e 81       	ldd	r24, Y+6	; 0x06
    1926:	9f 81       	ldd	r25, Y+7	; 0x07
    1928:	a8 85       	ldd	r26, Y+8	; 0x08
    192a:	b9 85       	ldd	r27, Y+9	; 0x09
    192c:	8a 83       	std	Y+2, r24	; 0x02
    192e:	9b 83       	std	Y+3, r25	; 0x03
    1930:	ac 83       	std	Y+4, r26	; 0x04
    1932:	bd 83       	std	Y+5, r27	; 0x05
    timers = timer;
    1934:	d0 93 e5 19 	sts	0x19E5, r29	; 0x8019e5 <timers+0x1>
    1938:	c0 93 e4 19 	sts	0x19E4, r28	; 0x8019e4 <timers>
  }
}
    193c:	df 91       	pop	r29
    193e:	cf 91       	pop	r28
    1940:	1f 91       	pop	r17
    1942:	0f 91       	pop	r16
    1944:	08 95       	ret

00001946 <SYS_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
  timers = NULL;
    1946:	10 92 e5 19 	sts	0x19E5, r1	; 0x8019e5 <timers+0x1>
    194a:	10 92 e4 19 	sts	0x19E4, r1	; 0x8019e4 <timers>
    194e:	08 95       	ret

00001950 <SYS_TimerStop>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
    1950:	cf 93       	push	r28
    1952:	df 93       	push	r29
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    1954:	a0 91 e4 19 	lds	r26, 0x19E4	; 0x8019e4 <timers>
    1958:	b0 91 e5 19 	lds	r27, 0x19E5	; 0x8019e5 <timers+0x1>
    195c:	10 97       	sbiw	r26, 0x00	; 0
    195e:	91 f1       	breq	.+100    	; 0x19c4 <SYS_TimerStop+0x74>
  {
    if (t == timer)
    1960:	a8 17       	cp	r26, r24
    1962:	b9 07       	cpc	r27, r25
    1964:	51 f5       	brne	.+84     	; 0x19ba <SYS_TimerStop+0x6a>
    1966:	0a c0       	rjmp	.+20     	; 0x197c <SYS_TimerStop+0x2c>
    1968:	8e 17       	cp	r24, r30
    196a:	9f 07       	cpc	r25, r31
    196c:	29 f5       	brne	.+74     	; 0x19b8 <SYS_TimerStop+0x68>
    {
      if (prev)
    196e:	10 97       	sbiw	r26, 0x00	; 0
    1970:	31 f0       	breq	.+12     	; 0x197e <SYS_TimerStop+0x2e>
        prev->next = t->next;
    1972:	20 81       	ld	r18, Z
    1974:	31 81       	ldd	r19, Z+1	; 0x01
    1976:	2d 93       	st	X+, r18
    1978:	3c 93       	st	X, r19
    197a:	07 c0       	rjmp	.+14     	; 0x198a <SYS_TimerStop+0x3a>
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    197c:	fc 01       	movw	r30, r24
    if (t == timer)
    {
      if (prev)
        prev->next = t->next;
      else
        timers = t->next;
    197e:	20 81       	ld	r18, Z
    1980:	31 81       	ldd	r19, Z+1	; 0x01
    1982:	30 93 e5 19 	sts	0x19E5, r19	; 0x8019e5 <timers+0x1>
    1986:	20 93 e4 19 	sts	0x19E4, r18	; 0x8019e4 <timers>

      if (t->next)
    198a:	01 90       	ld	r0, Z+
    198c:	f0 81       	ld	r31, Z
    198e:	e0 2d       	mov	r30, r0
    1990:	30 97       	sbiw	r30, 0x00	; 0
    1992:	c1 f0       	breq	.+48     	; 0x19c4 <SYS_TimerStop+0x74>
        t->next->timeout += timer->timeout;
    1994:	42 81       	ldd	r20, Z+2	; 0x02
    1996:	53 81       	ldd	r21, Z+3	; 0x03
    1998:	64 81       	ldd	r22, Z+4	; 0x04
    199a:	75 81       	ldd	r23, Z+5	; 0x05
    199c:	ec 01       	movw	r28, r24
    199e:	8a 81       	ldd	r24, Y+2	; 0x02
    19a0:	9b 81       	ldd	r25, Y+3	; 0x03
    19a2:	ac 81       	ldd	r26, Y+4	; 0x04
    19a4:	bd 81       	ldd	r27, Y+5	; 0x05
    19a6:	84 0f       	add	r24, r20
    19a8:	95 1f       	adc	r25, r21
    19aa:	a6 1f       	adc	r26, r22
    19ac:	b7 1f       	adc	r27, r23
    19ae:	82 83       	std	Z+2, r24	; 0x02
    19b0:	93 83       	std	Z+3, r25	; 0x03
    19b2:	a4 83       	std	Z+4, r26	; 0x04
    19b4:	b5 83       	std	Z+5, r27	; 0x05
    19b6:	06 c0       	rjmp	.+12     	; 0x19c4 <SYS_TimerStop+0x74>
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    19b8:	df 01       	movw	r26, r30
    19ba:	ed 91       	ld	r30, X+
    19bc:	fc 91       	ld	r31, X
    19be:	11 97       	sbiw	r26, 0x01	; 1
    19c0:	30 97       	sbiw	r30, 0x00	; 0
    19c2:	91 f6       	brne	.-92     	; 0x1968 <SYS_TimerStop+0x18>

      break;
    }
    prev = t;
  }
}
    19c4:	df 91       	pop	r29
    19c6:	cf 91       	pop	r28
    19c8:	08 95       	ret

000019ca <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    19ca:	e0 91 e4 19 	lds	r30, 0x19E4	; 0x8019e4 <timers>
    19ce:	f0 91 e5 19 	lds	r31, 0x19E5	; 0x8019e5 <timers+0x1>
    19d2:	30 97       	sbiw	r30, 0x00	; 0
    19d4:	71 f0       	breq	.+28     	; 0x19f2 <SYS_TimerStarted+0x28>
    if (t == timer)
    19d6:	e8 17       	cp	r30, r24
    19d8:	f9 07       	cpc	r31, r25
    19da:	21 f4       	brne	.+8      	; 0x19e4 <SYS_TimerStarted+0x1a>
    19dc:	0c c0       	rjmp	.+24     	; 0x19f6 <SYS_TimerStarted+0x2c>
    19de:	8e 17       	cp	r24, r30
    19e0:	9f 07       	cpc	r25, r31
    19e2:	59 f0       	breq	.+22     	; 0x19fa <SYS_TimerStarted+0x30>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    19e4:	01 90       	ld	r0, Z+
    19e6:	f0 81       	ld	r31, Z
    19e8:	e0 2d       	mov	r30, r0
    19ea:	30 97       	sbiw	r30, 0x00	; 0
    19ec:	c1 f7       	brne	.-16     	; 0x19de <SYS_TimerStarted+0x14>
    if (t == timer)
      return true;
  return false;
    19ee:	80 e0       	ldi	r24, 0x00	; 0
    19f0:	08 95       	ret
    19f2:	80 e0       	ldi	r24, 0x00	; 0
    19f4:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    if (t == timer)
      return true;
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	08 95       	ret
    19fa:	81 e0       	ldi	r24, 0x01	; 1
  return false;
}
    19fc:	08 95       	ret

000019fe <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    19fe:	cf 93       	push	r28
    1a00:	df 93       	push	r29
    1a02:	ec 01       	movw	r28, r24
  if (!SYS_TimerStarted(timer))
    1a04:	e2 df       	rcall	.-60     	; 0x19ca <SYS_TimerStarted>
    1a06:	81 11       	cpse	r24, r1
    1a08:	02 c0       	rjmp	.+4      	; 0x1a0e <SYS_TimerStart+0x10>
    placeTimer(timer);
    1a0a:	ce 01       	movw	r24, r28
    1a0c:	38 df       	rcall	.-400    	; 0x187e <placeTimer>
}
    1a0e:	df 91       	pop	r29
    1a10:	cf 91       	pop	r28
    1a12:	08 95       	ret

00001a14 <SYS_TimerTaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    1a14:	cf 92       	push	r12
    1a16:	df 92       	push	r13
    1a18:	ef 92       	push	r14
    1a1a:	ff 92       	push	r15
    1a1c:	cf 93       	push	r28
    1a1e:	df 93       	push	r29
  uint32_t elapsed;
  uint8_t cnt;

  if (0 == halTimerIrqCount)
    1a20:	80 91 e6 19 	lds	r24, 0x19E6	; 0x8019e6 <halTimerIrqCount>
    1a24:	88 23       	and	r24, r24
    1a26:	09 f4       	brne	.+2      	; 0x1a2a <SYS_TimerTaskHandler+0x16>
    1a28:	59 c0       	rjmp	.+178    	; 0x1adc <SYS_TimerTaskHandler+0xc8>
    return;

  ATOMIC_SECTION_ENTER
    1a2a:	8f b7       	in	r24, 0x3f	; 63
    1a2c:	f8 94       	cli
    cnt = halTimerIrqCount;
    1a2e:	c0 90 e6 19 	lds	r12, 0x19E6	; 0x8019e6 <halTimerIrqCount>
    halTimerIrqCount = 0;
    1a32:	10 92 e6 19 	sts	0x19E6, r1	; 0x8019e6 <halTimerIrqCount>
  ATOMIC_SECTION_LEAVE
    1a36:	8f bf       	out	0x3f, r24	; 63

  elapsed = cnt * HAL_TIMER_INTERVAL;
    1a38:	d1 2c       	mov	r13, r1
    1a3a:	e1 2c       	mov	r14, r1
    1a3c:	f1 2c       	mov	r15, r1
    1a3e:	cc 0c       	add	r12, r12
    1a40:	dd 1c       	adc	r13, r13
    1a42:	ee 1c       	adc	r14, r14
    1a44:	ff 1c       	adc	r15, r15
    1a46:	d7 01       	movw	r26, r14
    1a48:	c6 01       	movw	r24, r12
    1a4a:	88 0f       	add	r24, r24
    1a4c:	99 1f       	adc	r25, r25
    1a4e:	aa 1f       	adc	r26, r26
    1a50:	bb 1f       	adc	r27, r27
    1a52:	88 0f       	add	r24, r24
    1a54:	99 1f       	adc	r25, r25
    1a56:	aa 1f       	adc	r26, r26
    1a58:	bb 1f       	adc	r27, r27
    1a5a:	c8 0e       	add	r12, r24
    1a5c:	d9 1e       	adc	r13, r25
    1a5e:	ea 1e       	adc	r14, r26
    1a60:	fb 1e       	adc	r15, r27

  while (timers && (timers->timeout <= elapsed))
    1a62:	c0 91 e4 19 	lds	r28, 0x19E4	; 0x8019e4 <timers>
    1a66:	d0 91 e5 19 	lds	r29, 0x19E5	; 0x8019e5 <timers+0x1>
    1a6a:	20 97       	sbiw	r28, 0x00	; 0
    1a6c:	b9 f1       	breq	.+110    	; 0x1adc <SYS_TimerTaskHandler+0xc8>
    1a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a70:	9b 81       	ldd	r25, Y+3	; 0x03
    1a72:	ac 81       	ldd	r26, Y+4	; 0x04
    1a74:	bd 81       	ldd	r27, Y+5	; 0x05
    1a76:	c8 16       	cp	r12, r24
    1a78:	d9 06       	cpc	r13, r25
    1a7a:	ea 06       	cpc	r14, r26
    1a7c:	fb 06       	cpc	r15, r27
    1a7e:	10 f1       	brcs	.+68     	; 0x1ac4 <SYS_TimerTaskHandler+0xb0>
  {
    SYS_Timer_t *timer = timers;

    elapsed -= timers->timeout;
    1a80:	c8 1a       	sub	r12, r24
    1a82:	d9 0a       	sbc	r13, r25
    1a84:	ea 0a       	sbc	r14, r26
    1a86:	fb 0a       	sbc	r15, r27
    timers = timers->next;
    1a88:	88 81       	ld	r24, Y
    1a8a:	99 81       	ldd	r25, Y+1	; 0x01
    1a8c:	90 93 e5 19 	sts	0x19E5, r25	; 0x8019e5 <timers+0x1>
    1a90:	80 93 e4 19 	sts	0x19E4, r24	; 0x8019e4 <timers>
    if (SYS_TIMER_PERIODIC_MODE == timer->mode)
    1a94:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a96:	81 30       	cpi	r24, 0x01	; 1
    1a98:	11 f4       	brne	.+4      	; 0x1a9e <SYS_TimerTaskHandler+0x8a>
      placeTimer(timer);
    1a9a:	ce 01       	movw	r24, r28
    1a9c:	f0 de       	rcall	.-544    	; 0x187e <placeTimer>
    timer->handler(timer);
    1a9e:	eb 85       	ldd	r30, Y+11	; 0x0b
    1aa0:	fc 85       	ldd	r31, Y+12	; 0x0c
    1aa2:	ce 01       	movw	r24, r28
    1aa4:	19 95       	eicall
    halTimerIrqCount = 0;
  ATOMIC_SECTION_LEAVE

  elapsed = cnt * HAL_TIMER_INTERVAL;

  while (timers && (timers->timeout <= elapsed))
    1aa6:	c0 91 e4 19 	lds	r28, 0x19E4	; 0x8019e4 <timers>
    1aaa:	d0 91 e5 19 	lds	r29, 0x19E5	; 0x8019e5 <timers+0x1>
    1aae:	20 97       	sbiw	r28, 0x00	; 0
    1ab0:	a9 f0       	breq	.+42     	; 0x1adc <SYS_TimerTaskHandler+0xc8>
    1ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ab6:	ac 81       	ldd	r26, Y+4	; 0x04
    1ab8:	bd 81       	ldd	r27, Y+5	; 0x05
    1aba:	c8 16       	cp	r12, r24
    1abc:	d9 06       	cpc	r13, r25
    1abe:	ea 06       	cpc	r14, r26
    1ac0:	fb 06       	cpc	r15, r27
    1ac2:	f0 f6       	brcc	.-68     	; 0x1a80 <SYS_TimerTaskHandler+0x6c>
      placeTimer(timer);
    timer->handler(timer);
  }

  if (timers)
    timers->timeout -= elapsed;
    1ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ac8:	ac 81       	ldd	r26, Y+4	; 0x04
    1aca:	bd 81       	ldd	r27, Y+5	; 0x05
    1acc:	8c 19       	sub	r24, r12
    1ace:	9d 09       	sbc	r25, r13
    1ad0:	ae 09       	sbc	r26, r14
    1ad2:	bf 09       	sbc	r27, r15
    1ad4:	8a 83       	std	Y+2, r24	; 0x02
    1ad6:	9b 83       	std	Y+3, r25	; 0x03
    1ad8:	ac 83       	std	Y+4, r26	; 0x04
    1ada:	bd 83       	std	Y+5, r27	; 0x05
}
    1adc:	df 91       	pop	r29
    1ade:	cf 91       	pop	r28
    1ae0:	ff 90       	pop	r15
    1ae2:	ef 90       	pop	r14
    1ae4:	df 90       	pop	r13
    1ae6:	cf 90       	pop	r12
    1ae8:	08 95       	ret

00001aea <__udivmodsi4>:
    1aea:	a1 e2       	ldi	r26, 0x21	; 33
    1aec:	1a 2e       	mov	r1, r26
    1aee:	aa 1b       	sub	r26, r26
    1af0:	bb 1b       	sub	r27, r27
    1af2:	fd 01       	movw	r30, r26
    1af4:	0d c0       	rjmp	.+26     	; 0x1b10 <__udivmodsi4_ep>

00001af6 <__udivmodsi4_loop>:
    1af6:	aa 1f       	adc	r26, r26
    1af8:	bb 1f       	adc	r27, r27
    1afa:	ee 1f       	adc	r30, r30
    1afc:	ff 1f       	adc	r31, r31
    1afe:	a2 17       	cp	r26, r18
    1b00:	b3 07       	cpc	r27, r19
    1b02:	e4 07       	cpc	r30, r20
    1b04:	f5 07       	cpc	r31, r21
    1b06:	20 f0       	brcs	.+8      	; 0x1b10 <__udivmodsi4_ep>
    1b08:	a2 1b       	sub	r26, r18
    1b0a:	b3 0b       	sbc	r27, r19
    1b0c:	e4 0b       	sbc	r30, r20
    1b0e:	f5 0b       	sbc	r31, r21

00001b10 <__udivmodsi4_ep>:
    1b10:	66 1f       	adc	r22, r22
    1b12:	77 1f       	adc	r23, r23
    1b14:	88 1f       	adc	r24, r24
    1b16:	99 1f       	adc	r25, r25
    1b18:	1a 94       	dec	r1
    1b1a:	69 f7       	brne	.-38     	; 0x1af6 <__udivmodsi4_loop>
    1b1c:	60 95       	com	r22
    1b1e:	70 95       	com	r23
    1b20:	80 95       	com	r24
    1b22:	90 95       	com	r25
    1b24:	9b 01       	movw	r18, r22
    1b26:	ac 01       	movw	r20, r24
    1b28:	bd 01       	movw	r22, r26
    1b2a:	cf 01       	movw	r24, r30
    1b2c:	08 95       	ret

00001b2e <do_rand>:
    1b2e:	8f 92       	push	r8
    1b30:	9f 92       	push	r9
    1b32:	af 92       	push	r10
    1b34:	bf 92       	push	r11
    1b36:	cf 92       	push	r12
    1b38:	df 92       	push	r13
    1b3a:	ef 92       	push	r14
    1b3c:	ff 92       	push	r15
    1b3e:	cf 93       	push	r28
    1b40:	df 93       	push	r29
    1b42:	ec 01       	movw	r28, r24
    1b44:	68 81       	ld	r22, Y
    1b46:	79 81       	ldd	r23, Y+1	; 0x01
    1b48:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b4c:	61 15       	cp	r22, r1
    1b4e:	71 05       	cpc	r23, r1
    1b50:	81 05       	cpc	r24, r1
    1b52:	91 05       	cpc	r25, r1
    1b54:	21 f4       	brne	.+8      	; 0x1b5e <do_rand+0x30>
    1b56:	64 e2       	ldi	r22, 0x24	; 36
    1b58:	79 ed       	ldi	r23, 0xD9	; 217
    1b5a:	8b e5       	ldi	r24, 0x5B	; 91
    1b5c:	97 e0       	ldi	r25, 0x07	; 7
    1b5e:	2d e1       	ldi	r18, 0x1D	; 29
    1b60:	33 ef       	ldi	r19, 0xF3	; 243
    1b62:	41 e0       	ldi	r20, 0x01	; 1
    1b64:	50 e0       	ldi	r21, 0x00	; 0
    1b66:	41 d0       	rcall	.+130    	; 0x1bea <__divmodsi4>
    1b68:	49 01       	movw	r8, r18
    1b6a:	5a 01       	movw	r10, r20
    1b6c:	9b 01       	movw	r18, r22
    1b6e:	ac 01       	movw	r20, r24
    1b70:	a7 ea       	ldi	r26, 0xA7	; 167
    1b72:	b1 e4       	ldi	r27, 0x41	; 65
    1b74:	56 d0       	rcall	.+172    	; 0x1c22 <__muluhisi3>
    1b76:	6b 01       	movw	r12, r22
    1b78:	7c 01       	movw	r14, r24
    1b7a:	ac ee       	ldi	r26, 0xEC	; 236
    1b7c:	b4 ef       	ldi	r27, 0xF4	; 244
    1b7e:	a5 01       	movw	r20, r10
    1b80:	94 01       	movw	r18, r8
    1b82:	5b d0       	rcall	.+182    	; 0x1c3a <__mulohisi3>
    1b84:	dc 01       	movw	r26, r24
    1b86:	cb 01       	movw	r24, r22
    1b88:	8c 0d       	add	r24, r12
    1b8a:	9d 1d       	adc	r25, r13
    1b8c:	ae 1d       	adc	r26, r14
    1b8e:	bf 1d       	adc	r27, r15
    1b90:	b7 ff       	sbrs	r27, 7
    1b92:	03 c0       	rjmp	.+6      	; 0x1b9a <do_rand+0x6c>
    1b94:	01 97       	sbiw	r24, 0x01	; 1
    1b96:	a1 09       	sbc	r26, r1
    1b98:	b0 48       	sbci	r27, 0x80	; 128
    1b9a:	88 83       	st	Y, r24
    1b9c:	99 83       	std	Y+1, r25	; 0x01
    1b9e:	aa 83       	std	Y+2, r26	; 0x02
    1ba0:	bb 83       	std	Y+3, r27	; 0x03
    1ba2:	9f 77       	andi	r25, 0x7F	; 127
    1ba4:	df 91       	pop	r29
    1ba6:	cf 91       	pop	r28
    1ba8:	ff 90       	pop	r15
    1baa:	ef 90       	pop	r14
    1bac:	df 90       	pop	r13
    1bae:	cf 90       	pop	r12
    1bb0:	bf 90       	pop	r11
    1bb2:	af 90       	pop	r10
    1bb4:	9f 90       	pop	r9
    1bb6:	8f 90       	pop	r8
    1bb8:	08 95       	ret

00001bba <rand_r>:
    1bba:	b9 cf       	rjmp	.-142    	; 0x1b2e <do_rand>

00001bbc <rand>:
    1bbc:	80 e0       	ldi	r24, 0x00	; 0
    1bbe:	92 e0       	ldi	r25, 0x02	; 2
    1bc0:	b6 cf       	rjmp	.-148    	; 0x1b2e <do_rand>

00001bc2 <srand>:
    1bc2:	a0 e0       	ldi	r26, 0x00	; 0
    1bc4:	b0 e0       	ldi	r27, 0x00	; 0
    1bc6:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
    1bca:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    1bce:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
    1bd2:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
    1bd6:	08 95       	ret

00001bd8 <memcpy>:
    1bd8:	fb 01       	movw	r30, r22
    1bda:	dc 01       	movw	r26, r24
    1bdc:	02 c0       	rjmp	.+4      	; 0x1be2 <memcpy+0xa>
    1bde:	01 90       	ld	r0, Z+
    1be0:	0d 92       	st	X+, r0
    1be2:	41 50       	subi	r20, 0x01	; 1
    1be4:	50 40       	sbci	r21, 0x00	; 0
    1be6:	d8 f7       	brcc	.-10     	; 0x1bde <memcpy+0x6>
    1be8:	08 95       	ret

00001bea <__divmodsi4>:
    1bea:	05 2e       	mov	r0, r21
    1bec:	97 fb       	bst	r25, 7
    1bee:	16 f4       	brtc	.+4      	; 0x1bf4 <__divmodsi4+0xa>
    1bf0:	00 94       	com	r0
    1bf2:	0f d0       	rcall	.+30     	; 0x1c12 <__negsi2>
    1bf4:	57 fd       	sbrc	r21, 7
    1bf6:	05 d0       	rcall	.+10     	; 0x1c02 <__divmodsi4_neg2>
    1bf8:	78 df       	rcall	.-272    	; 0x1aea <__udivmodsi4>
    1bfa:	07 fc       	sbrc	r0, 7
    1bfc:	02 d0       	rcall	.+4      	; 0x1c02 <__divmodsi4_neg2>
    1bfe:	46 f4       	brtc	.+16     	; 0x1c10 <__divmodsi4_exit>
    1c00:	08 c0       	rjmp	.+16     	; 0x1c12 <__negsi2>

00001c02 <__divmodsi4_neg2>:
    1c02:	50 95       	com	r21
    1c04:	40 95       	com	r20
    1c06:	30 95       	com	r19
    1c08:	21 95       	neg	r18
    1c0a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c0c:	4f 4f       	sbci	r20, 0xFF	; 255
    1c0e:	5f 4f       	sbci	r21, 0xFF	; 255

00001c10 <__divmodsi4_exit>:
    1c10:	08 95       	ret

00001c12 <__negsi2>:
    1c12:	90 95       	com	r25
    1c14:	80 95       	com	r24
    1c16:	70 95       	com	r23
    1c18:	61 95       	neg	r22
    1c1a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c1c:	8f 4f       	sbci	r24, 0xFF	; 255
    1c1e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c20:	08 95       	ret

00001c22 <__muluhisi3>:
    1c22:	0f d0       	rcall	.+30     	; 0x1c42 <__umulhisi3>
    1c24:	a5 9f       	mul	r26, r21
    1c26:	90 0d       	add	r25, r0
    1c28:	b4 9f       	mul	r27, r20
    1c2a:	90 0d       	add	r25, r0
    1c2c:	a4 9f       	mul	r26, r20
    1c2e:	80 0d       	add	r24, r0
    1c30:	91 1d       	adc	r25, r1
    1c32:	11 24       	eor	r1, r1
    1c34:	08 95       	ret

00001c36 <__mulshisi3>:
    1c36:	b7 ff       	sbrs	r27, 7
    1c38:	f4 cf       	rjmp	.-24     	; 0x1c22 <__muluhisi3>

00001c3a <__mulohisi3>:
    1c3a:	f3 df       	rcall	.-26     	; 0x1c22 <__muluhisi3>
    1c3c:	82 1b       	sub	r24, r18
    1c3e:	93 0b       	sbc	r25, r19
    1c40:	08 95       	ret

00001c42 <__umulhisi3>:
    1c42:	a2 9f       	mul	r26, r18
    1c44:	b0 01       	movw	r22, r0
    1c46:	b3 9f       	mul	r27, r19
    1c48:	c0 01       	movw	r24, r0
    1c4a:	a3 9f       	mul	r26, r19
    1c4c:	70 0d       	add	r23, r0
    1c4e:	81 1d       	adc	r24, r1
    1c50:	11 24       	eor	r1, r1
    1c52:	91 1d       	adc	r25, r1
    1c54:	b2 9f       	mul	r27, r18
    1c56:	70 0d       	add	r23, r0
    1c58:	81 1d       	adc	r24, r1
    1c5a:	11 24       	eor	r1, r1
    1c5c:	91 1d       	adc	r25, r1
    1c5e:	08 95       	ret

00001c60 <_exit>:
    1c60:	f8 94       	cli

00001c62 <__stop_program>:
    1c62:	ff cf       	rjmp	.-2      	; 0x1c62 <__stop_program>
